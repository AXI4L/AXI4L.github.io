[
  {
    "Mnemonic": "ADC",
    "Description": "Add with Carry.",
    "Syntax": "ADC{S}{cond}\n                            {Rd},\n                        Rn,\n                        Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    ADDS    r4, r0, r2    ; adding the least significant words\n    ADC     r5, r1, r3    ; adding the most significant words\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289861367.htm"
  },
  {
    "Mnemonic": "ADD",
    "Description": "Add without Carry.",
    "Syntax": "ADD{S}{cond}\n                            {Rd},\n                        Rn,\n                        Operand2<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>imm12</code></span></dt>\n<dd><div class=\"p\">is any value in the range 0-4095.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    ADD     r2, r1, r3\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289861747.htm"
  },
  {
    "Mnemonic": "ADR (PC-relative)",
    "Description": "Generate a PC-relative address in the destination register, for a label in the current     area.",
    "Syntax": "ADR{cond}{.W}\n              Rd,label<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a PC-relative expression.</div>\n<div class=\"p\"><span class=\"var\"><code>label</code></span> must be within a\nlimited distance of the current instruction.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361358903373.htm"
  },
  {
    "Mnemonic": "ADR (register-relative)",
    "Description": "Generate a register-relative address in the destination register, for a label defined     in a storage map.",
    "Syntax": "ADR{cond}{.W}\n              Rd,label\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a symbol defined by the <code>FIELD</code> directive. <span class=\"var\"><code>label</code></span> specifies\nan offset from the base register which is defined using the <code>MAP</code> directive.</div>\n<div class=\"p\"><span class=\"var\"><code>label</code></span> must be within a\nlimited distance from the base register.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289862147.htm"
  },
  {
    "Mnemonic": "ADRL pseudo-instruction",
    "Description": "Load a PC-relative or register-relative address into a register.",
    "Syntax": "ADRL{cond}\n              Rd,label\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a PC-relative or register-relative expression.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289862667.htm"
  },
  {
    "Mnemonic": "AND",
    "Description": "Logical AND.",
    "Syntax": "AND{S}{cond}\n                            Rd,\n                        Rn,\n                        Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    AND     r9,r2,#0xFF00\n    ANDS    r9, r8, #0x19\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289863017.htm"
  },
  {
    "Mnemonic": "ASR",
    "Description": "Arithmetic Shift Right. This instruction is a preferred synonym for             MOV instructions with shifted register operands.",
    "Syntax": "ASR{S}{cond}\n                            Rd,\n                        Rm,\n                        Rs\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand. This\noperand is shifted right.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rs</code></span></dt>\n<dd><div class=\"p\">is a register holding a shift value to apply to\nthe value in <code><span class=\"var\"><code>Rm</code></span></code>. Only the least significant\nbyte is used.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sh</code></span></dt>\n<dd><div class=\"p\">is a constant shift. The range of values permitted\nis 1-32.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    ASR     r7, r8, r9\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289863407.htm"
  },
  {
    "Mnemonic": "B",
    "Description": "Branch.",
    "Syntax": "B{cond}{.W}\n                            label\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. </div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier to force\nthe use of a 32-bit <code>B</code> instruction in\nThumb.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a PC-relative expression.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    B       loopA\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289863797.htm"
  },
  {
    "Mnemonic": "BFC",
    "Description": "Bit Field Clear.",
    "Syntax": "BFC{cond}\n              Rd, #lsb,\n              #width\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>lsb</code></span></dt>\n<dd><div class=\"p\">is the least significant bit that is to be cleared.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>width</code></span></dt>\n<dd><div class=\"p\">is the number of bits to be cleared. <code><span class=\"var\"><code>width</code></span></code> must not be 0, and (<code><span class=\"var\"><code>width</code></span></code>+<code><span class=\"var\"><code>lsb</code></span></code>) must be less than\n              or equal to 32.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289864157.htm"
  },
  {
    "Mnemonic": "BFI",
    "Description": "Bit Field Insert.",
    "Syntax": "BFI{cond}\n              Rd, Rn,\n              #lsb, #width\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the source register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>lsb</code></span></dt>\n<dd><div class=\"p\">is the least significant bit that is to be copied.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>width</code></span></dt>\n<dd><div class=\"p\">is the number of bits to be copied. <code><span class=\"var\"><code>width</code></span></code> must not be 0, and (<code><span class=\"var\"><code>width</code></span></code>+<code><span class=\"var\"><code>lsb</code></span></code>) must be less than\n              or equal to 32.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289864536.htm"
  },
  {
    "Mnemonic": "BIC",
    "Description": "Bit Clear.",
    "Syntax": "BIC{S}{cond}\n              Rd, Rn,\n              Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n              the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    BIC     r0, r1, #0xab\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289864906.htm"
  },
  {
    "Mnemonic": "BKPT",
    "Description": "Breakpoint.",
    "Syntax": "BKPT #imm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>imm</code></span></dt>\n<dd><div class=\"p\">is an expression evaluating to an integer in the\nrange:</div>\n<ul><li><div class=\"p\">0-65535 (a 16-bit value) in an ARM instruction.</div>\n</li>\n<li><div class=\"p\">0-255 (an 8-bit value) in a 16-bit Thumb instruction.</div>\n</li>\n</ul>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289865326.htm"
  },
  {
    "Mnemonic": "BL",
    "Description": "Branch with Link.",
    "Syntax": "BL{cond}{.W}\n                            label\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. <code><span class=\"var\"><code>cond</code></span></code> is\nnot available on all forms of this instruction.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier to force\nthe use of a 32-bit <code>BL</code> instruction in\nThumb.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a PC-relative expression.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    BLE     ng+8\n    BL      subC\n    BLLT    rtX\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289865686.htm"
  },
  {
    "Mnemonic": "BLX",
    "Description": "Branch with Link and exchange instruction set.",
    "Syntax": "BLX{cond}{.W}\n                            label\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. <code><span class=\"var\"><code>cond</code></span></code> is\nnot available on all forms of this instruction.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier to force\nthe use of a 32-bit <code>BLX</code> instruction in\nThumb.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a PC-relative expression.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing an address to branch to.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289866046.htm"
  },
  {
    "Mnemonic": "BX",
    "Description": "Branch and exchange instruction set.",
    "Syntax": "BX{cond}\n                            Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. <code><span class=\"var\"><code>cond</code></span></code> is\nnot available on all forms of this instruction.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing an address to branch to.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289866466.htm"
  },
  {
    "Mnemonic": "BXJ",
    "Description": "Branch and change to Jazelle state.",
    "Syntax": "BXJ{cond}\n              Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. <code><span class=\"var\"><code>cond</code></span></code> is\nnot available on all forms of this instruction.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing an address to branch to.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289866836.htm"
  },
  {
    "Mnemonic": "CBZ and CBNZ",
    "Description": "Compare and Branch on Zero, Compare and Branch on Non-Zero.",
    "Syntax": "CBZ Rn, label<dl>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is the branch destination.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    CMP     Rn, #0\n    BEQ     label\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289867296.htm"
  },
  {
    "Mnemonic": "CDP and CDP2",
    "Description": "Coprocessor data operations.",
    "Syntax": "CDP{cond}\n              coproc,\n            #opcode1, CRd,\n              CRn, CRm{,\n              #opcode2} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. In ARM code, <code><span class=\"var\"><code>cond</code></span></code> is\nnot permitted for <code>CDP2</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor the instruction is\nfor. The standard name is p<span class=\"var\"><code>n</code></span>,\nwhere <span class=\"var\"><code>n</code></span> is an integer in the\nrange 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode1</code></span></dt>\n<dd><div class=\"p\">is a 4-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode2</code></span></dt>\n<dd><div class=\"p\">is an optional 3-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>CRd</code></span>, <span class=\"var\"><code>CRn</code></span>, <span class=\"var\"><code>CRm</code></span></dt>\n<dd><div class=\"p\">are coprocessor registers.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289867676.htm"
  },
  {
    "Mnemonic": "CLREX",
    "Description": "Clear Exclusive.",
    "Syntax": "CLREX{cond} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n<div class=\"note\"><h3 class=\"note\">Note</h3>\n<div class=\"p\"><code><span class=\"var\"><code>cond</code></span></code> is permitted only in\nThumb code, using a preceding <code>IT</code> instruction.\nThis is an unconditional instruction in ARM.</div>\n</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289868046.htm"
  },
  {
    "Mnemonic": "CLZ",
    "Description": "Count Leading Zeros.",
    "Syntax": "CLZ{cond}\n                            Rd,\n                        Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the operand register.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    CLZ     r4,r9\n    CLZNE   r2,r3\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289868426.htm"
  },
  {
    "Mnemonic": "CMP and CMN",
    "Description": "Compare and Compare Negative.",
    "Syntax": "CMP{cond}\n                            Rn,\n                            Operand2\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the ARM register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    CMP     r2, r9\n    CMN     r0, #6400\n    CMPGT   sp, r7, LSL #2\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289868786.htm"
  },
  {
    "Mnemonic": "CPS",
    "Description": "Change Processor State.",
    "Syntax": "CPSeffect iflags{, #mode} <dl>\n<dt class=\"code\"><span class=\"var\"><code>effect</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>IE</code></dt>\n<dd><div class=\"p\">Interrupt or abort enable.</div>\n</dd>\n<dt class=\"normaldt\"><code>ID</code></dt>\n<dd><div class=\"p\">Interrupt or abort disable.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>iflags</code></span></dt>\n<dd><div class=\"p\">is a sequence of one or more of:</div>\n<dl><dt class=\"normaldt\"><code>a</code></dt>\n<dd><div class=\"p\">Enables or disables imprecise aborts.</div>\n</dd>\n<dt class=\"normaldt\"><code>i</code></dt>\n<dd><div class=\"p\">Enables or disables IRQ interrupts.</div>\n</dd>\n<dt class=\"normaldt\"><code>f</code></dt>\n<dd><div class=\"p\">Enables or disables FIQ interrupts. </div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>mode</code></span></dt>\n<dd><div class=\"p\">specifies the number of the mode to change to.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">    CPSIE if      ; Enable IRQ and FIQ interrupts.\n    CPSID A       ; Disable imprecise aborts.\n    CPSID ai, #17 ; Disable imprecise aborts and interrupts, and enter FIQ mode.\n    CPS #16       ; Enter User mode.</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289869176.htm"
  },
  {
    "Mnemonic": "CPY pseudo-instruction",
    "Description": "Copy a value from one register to another.",
    "Syntax": "CPY{cond}\n              Rd, Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to be copied.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289869526.htm"
  },
  {
    "Mnemonic": "DBG",
    "Description": "Debug.",
    "Syntax": "DBG{cond}\n              {option} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>option</code></span></dt>\n<dd><div class=\"p\">is an optional limitation on the operation of the\nhint. The range is 0-15.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289869916.htm"
  },
  {
    "Mnemonic": "DMB",
    "Description": "Data Memory Barrier.",
    "Syntax": "DMB{cond}\n              {option} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n<div class=\"note\"><h3 class=\"note\">Note</h3>\n<div class=\"p\"><code><span class=\"var\"><code>cond</code></span></code> is permitted only in Thumb code. This is an\n                unconditional instruction in ARM code.</div>\n</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>option</code></span></dt>\n<dd><div class=\"p\">is an optional limitation on the operation of the\nhint. Permitted values are:</div>\n<dl>\n<dt class=\"pt\"><code>SY</code></dt>\n<dd><div class=\"p\">Full system <code>DMB</code> operation.\nThis is the default and can be omitted.</div>\n</dd>\n<dt class=\"pt\"><code>ST</code></dt>\n<dd><div class=\"p\"><code>DMB</code> operation that waits\nonly for stores to complete.</div>\n</dd>\n<dt class=\"pt\"><code>ISH</code></dt>\n<dd><div class=\"p\"><code>DMB</code> operation only to\nthe inner shareable domain.</div>\n</dd>\n<dt class=\"pt\"><code>ISHST</code></dt>\n<dd><div class=\"p\"><code>DMB</code> operation that waits\nonly for stores to complete, and only to the inner shareable domain.</div>\n</dd>\n<dt class=\"pt\"><code>NSH</code></dt>\n<dd><div class=\"p\"><code>DMB</code> operation only out\nto the point of unification.</div>\n</dd>\n<dt class=\"pt\"><code>NSHST</code></dt>\n<dd><div class=\"p\"><code>DMB</code> operation that waits\nonly for stores to complete and only out to the point of unification.</div>\n</dd>\n<dt class=\"pt\"><code>OSH</code></dt>\n<dd><div class=\"p\"><code>DMB</code> operation only to\nthe outer shareable domain.</div>\n</dd>\n<dt class=\"pt\"><code>OSHST</code></dt>\n<dd><div class=\"p\"><code>DMB</code> operation that waits\nonly for stores to complete, and only to the outer shareable domain.</div>\n</dd>\n</dl>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289870356.htm"
  },
  {
    "Mnemonic": "DSB",
    "Description": "Data Synchronization Barrier.",
    "Syntax": "DSB{cond}\n              {option} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n<div class=\"note\"><h3 class=\"note\">Note</h3>\n<div class=\"p\"><code><span class=\"var\"><code>cond</code></span></code> is permitted only in\nThumb code. This is an unconditional instruction in ARM.</div>\n</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>option</code></span></dt>\n<dd><div class=\"p\">is an optional limitation on the operation of the\nhint. Permitted values are:</div>\n<dl><dt class=\"pt\"><code>SY</code></dt>\n<dd><div class=\"p\">Full system <code>DSB</code> operation.\nThis is the default and can be omitted.</div>\n</dd>\n<dt class=\"pt\"><code>ST</code></dt>\n<dd><div class=\"p\"><code>DSB</code> operation that waits\nonly for stores to complete.</div>\n</dd>\n<dt class=\"pt\"><code>ISH</code></dt>\n<dd><div class=\"p\"><code>DSB</code> operation only to\nthe inner shareable domain.</div>\n</dd>\n<dt class=\"pt\"><code>ISHST</code></dt>\n<dd><div class=\"p\"><code>DSB</code> operation that waits\nonly for stores to complete, and only to the inner shareable domain.</div>\n</dd>\n<dt class=\"pt\"><code>NSH</code></dt>\n<dd><div class=\"p\"><code>DSB</code> operation only out\nto the point of unification.</div>\n</dd>\n<dt class=\"pt\"><code>NSHST</code></dt>\n<dd><div class=\"p\"><code>DSB</code> operation that waits\nonly for stores to complete and only out to the point of unification.</div>\n</dd>\n<dt class=\"pt\"><code>OSH</code></dt>\n<dd><div class=\"p\"><code>DSB</code> operation only to\nthe outer shareable domain.</div>\n</dd>\n<dt class=\"pt\"><code>OSHST</code></dt>\n<dd><div class=\"p\"><code>DSB</code> operation that waits\nonly for stores to complete, and only to the outer shareable domain.</div>\n</dd>\n</dl>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289870725.htm"
  },
  {
    "Mnemonic": "EOR",
    "Description": "Logical Exclusive OR.",
    "Syntax": "EOR{S}{cond}\n                            Rd,\n                        Rn,\n                        Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    EORS    r0,r0,r3,ROR r6\n    EORS    r7, r11, #0x18181818 \n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289871065.htm"
  },
  {
    "Mnemonic": "ERET",
    "Description": "Exception Return.",
    "Syntax": "ERET{cond} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289871515.htm"
  },
  {
    "Mnemonic": "HVC",
    "Description": "Hypervisor Call.",
    "Syntax": "HVC #imm<dl>\n<dt class=\"code\"><span class=\"var\"><code>imm</code></span></dt>\n<dd>\n<div class=\"p\">is an expression evaluating to an integer in the range 0-65535.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1387466087086.htm"
  },
  {
    "Mnemonic": "ISB",
    "Description": "Instruction Synchronization Barrier.",
    "Syntax": "ISB{cond}\n              {option} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n<div class=\"note\"><h3 class=\"note\">Note</h3><code><span class=\"var\"><code>cond</code></span></code> is\n                            permitted only in Thumb code. This is an unconditional instruction in\n                            ARM code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>option</code></span></dt>\n<dd><div class=\"p\">is an optional limitation on the operation of the\n  hint. The permitted value is:</div>\n<dl>\n<dt class=\"pt\"><code>SY</code></dt>\n<dd>Full system <code>ISB</code> operation. This is the default and can be omitted.</dd>\n</dl>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289871865.htm"
  },
  {
    "Mnemonic": "IT",
    "Description": "If-Then.",
    "Syntax": "IT{x{y{z}}}\n                            {cond} <dl>\n<dt class=\"code\"><span class=\"var\"><code>x</code></span></dt>\n<dd><div class=\"p\">specifies the condition switch for the second instruction\nin the IT block.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>y</code></span></dt>\n<dd><div class=\"p\">specifies the condition switch for the third instruction\nin the IT block.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>z</code></span></dt>\n<dd><div class=\"p\">specifies the condition switch for the fourth instruction\nin the IT block.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">specifies the condition for the first instruction\nin the IT block.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    ITTE   NE        ; IT can be omitted\n    ANDNE  r0,r0,r1  ; 16-bit AND, not ANDS\n    ADDSNE r2,r2,#1  ; 32-bit ADDS (16-bit ADDS does not set flags in \n                     ; IT block)\n    MOVEQ  r2,r3     ; 16-bit MOV\n    ITT    AL        ; emit 2 non-flag setting 16-bit instructions\n    ADDAL  r0,r0,r1  ; 16-bit ADD, not ADDS\n    SUBAL  r2,r2,#1  ; 16-bit SUB, not SUB\n    ADD    r0,r0,r1  ; expands into 32-bit ADD, and is not in IT block\n    ITT    EQ        \n    MOVEQ  r0,r1\n    BEQ    dloop     ; branch at end of IT block is permitted\n    ITT    EQ\n    MOVEQ  r0,r1\n    BKPT   #1        ; BKPT always executes\n    ADDEQ  r0,r0,#1     \n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289872225.htm"
  },
  {
    "Mnemonic": "LDC and LDC2",
    "Description": "Transfer Data from memory to Coprocessor.",
    "Syntax": "op{L}{cond} coproc, CRd, [Rn]<dl>\n<dt class=\"code\"><span class=\"var\"><code>op</code></span></dt>\n<dd>\n<div class=\"p\">is <code>LDC</code> or <code>LDC2</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n<div class=\"p\">In ARM code, <code><span class=\"var\"><code>cond</code></span></code> is not permitted for <code>LDC2</code>.</div>\n</dd>\n<dt class=\"pt\"><code>L</code></dt>\n<dd>\n<div class=\"p\">is an optional suffix specifying a long transfer.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc</code></span></dt>\n<dd>\n<div class=\"p\">is the name of the coprocessor the instruction is for. The standard\n              name is p<span class=\"var\"><code>n</code></span>, where <span class=\"var\"><code>n</code></span> is an integer in the range 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>CRd</code></span></dt>\n<dd>\n<div class=\"p\">is the coprocessor register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd>\n<div class=\"p\">is the register on which the memory address is based. If PC is\n              specified, the value used is the address of the current instruction plus eight.</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd>\n<div class=\"p\">is an optional minus sign. If <span class=\"codeph\">-</span> is present, the offset is subtracted from <span class=\"var\"><code>Rn</code></span>. Otherwise, the offset is added to <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd>\n<div class=\"p\">is an expression evaluating to a multiple of 4, in the range 0 to\n              1020.</div>\n</dd>\n<dt class=\"pt\"><code>!</code></dt>\n<dd>\n<div class=\"p\">is an optional suffix. If ! is present, the address including the\n              offset is written back into <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd>\n<div class=\"p\">is a word-aligned PC-relative expression.</div>\n<div class=\"p\"><span class=\"var\"><code>label</code></span> must be within 1020 bytes\n              of the current instruction.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>option</code></span></dt>\n<dd>\n<div class=\"p\">is a coprocessor option in the range 0-255, enclosed in braces.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289872695.htm"
  },
  {
    "Mnemonic": "LDM",
    "Description": "Load Multiple registers.",
    "Syntax": "LDM{addr_mode}{cond}\n                            Rn{!},\n                            reglist{^} <dl>\n<dt class=\"code\"><span class=\"var\"><code>addr_mode</code></span></dt>\n<dd><div class=\"p\">is any one of the following:</div>\n<dl>\n<dt class=\"pt\"><code>IA</code></dt>\n<dd><div class=\"p\">Increment address After each transfer. This is the\ndefault, and can be omitted.</div>\n</dd>\n<dt class=\"pt\"><code>IB</code></dt>\n<dd><div class=\"p\">Increment address Before each transfer (ARM only).</div>\n</dd>\n<dt class=\"pt\"><code>DA</code></dt>\n<dd><div class=\"p\">Decrement address After each transfer (ARM only).</div>\n</dd>\n<dt class=\"pt\"><code>DB</code></dt>\n<dd><div class=\"p\">Decrement address Before each transfer.</div>\n</dd>\n</dl>\n<div class=\"p\">You can also use the stack oriented addressing mode suffixes, for example,\n                            when implementing stacks.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the <dfn class=\"term\">base register</dfn>, the ARM\nregister holding the initial address for the transfer. <span class=\"var\"><code>Rn</code></span> must\nnot be PC.</div>\n</dd>\n<dt class=\"pt\"><code>!</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">!</span> is\npresent, the final address is written back into <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>reglist</code></span></dt>\n<dd><div class=\"p\">is a list of one or more registers to be loaded, enclosed in braces. It can contain register\n                            ranges. It must be comma separated if it contains more than one register\n                            or register range. Any combination of registers <code>R0</code> to\n                                <code>R15</code> (PC) can be transferred in ARM state, but there\n                            are some restrictions in Thumb state.</div>\n</dd>\n<dt class=\"pt\"><code>^</code></dt>\n<dd><div class=\"p\">is an optional suffix, available in ARM state only.\nYou must not use it in User mode or System mode. It has the following\npurposes:</div>\n<ul><li><div class=\"p\">If <span class=\"var\"><code>reglist</code></span> contains\nthe PC (<code>R15</code>), in addition to the normal multiple\nregister transfer, the <code>SPSR</code> is copied into the <code>CPSR</code>.\nThis is for returning from exception handlers. Use this only from\nexception modes.</div>\n</li>\n<li><div class=\"p\">Otherwise, data is transferred into or out of the\nUser mode registers instead of the current mode registers.</div>\n</li>\n</ul>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    LDM     r8,{r0,r2,r9}      ; LDMIA is a synonym for LDM\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289873045.htm"
  },
  {
    "Mnemonic": "LDR (immediate offset)",
    "Description": "Load with immediate offset, pre-indexed immediate offset, or post-indexed immediate offset.",
    "Syntax": "LDR{type}{cond}\nRt, [Rn {,\n#offset}] ; immediate offset <dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl><dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">unsigned Byte (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SB</code></dt>\n<dd><div class=\"p\">signed Byte (<code>LDR</code> only.\nSign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">unsigned Halfword (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SH</code></dt>\n<dd><div class=\"p\">signed Halfword (<code>LDR</code> only.\nSign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd><div class=\"p\">is an offset. If <code><span class=\"var\"><code>offset</code></span></code> is\nomitted, the address is the contents of <code><span class=\"var\"><code>Rn</code></span></code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the additional register to load for doubleword\noperations.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    LDR     r8,[r10]        ; loads R8 from the address in R10.\n    LDRNE   r2,[r5,#960]!   ; (conditionally) loads R2 from a word\n                            ; 960 bytes above the address in R5, and\n                            ; increments R5 by 960.\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289873425.htm"
  },
  {
    "Mnemonic": "LDR (PC-relative)",
    "Description": "Load register. The address is an offset from the PC.",
    "Syntax": "LDR{type}{cond}{.W}\n              Rt, label\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl><dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">unsigned Byte (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SB</code></dt>\n<dd><div class=\"p\">signed Byte (<code>LDR</code> only.\nSign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">unsigned Halfword (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SH</code></dt>\n<dd><div class=\"p\">signed Halfword (<code>LDR</code> only.\nSign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to load or store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the second register to load or store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a PC-relative expression.</div>\n<div class=\"p\"><span class=\"var\"><code>label</code></span> must be within a\nlimited distance of the current instruction.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289873875.htm"
  },
  {
    "Mnemonic": "LDR (register offset)",
    "Description": "Load with register offset, pre-indexed register offset, or post-indexed register offset.",
    "Syntax": "LDR{type}{cond}\nRt, [Rn,\n\u00c2\u00b1Rm {, shift}] ;\nregister offset <dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl><dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">unsigned Byte (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SB</code></dt>\n<dd><div class=\"p\">signed Byte (<code>LDR</code> only.\nSign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">unsigned Halfword (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SH</code></dt>\n<dd><div class=\"p\">signed Halfword (<code>LDR</code> only.\nSign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing a value to be used as the\noffset. <code><span class=\"var\"><code>\u00e2\u0080\u0093Rm</code></span></code> is not permitted in Thumb\ncode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional shift.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the additional register to load for doubleword\noperations.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289874275.htm"
  },
  {
    "Mnemonic": "LDR (register-relative)",
    "Description": "Load register. The address is an offset from a base register.",
    "Syntax": "LDR{type}{cond}{.W}\nRt, label\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl>\n<dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">unsigned Byte (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SB</code></dt>\n<dd><div class=\"p\">signed Byte (<code>LDR</code> only. Sign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">unsigned Halfword (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SH</code></dt>\n<dd><div class=\"p\">signed Halfword (<code>LDR</code> only. Sign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to load or store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the second register to load or store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a symbol defined by the <code>FIELD</code> directive. <span class=\"var\"><code>label</code></span>\nspecifies an offset from the base register which is defined using the <code>MAP</code>\ndirective.</div>\n<div class=\"p\"><span class=\"var\"><code>label</code></span> must be within a limited distance of the value in the base\nregister.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289874695.htm"
  },
  {
    "Mnemonic": "LDR pseudo-instruction",
    "Description": "Load a register with either a 32-bit immediate value or an address.",
    "Syntax": "This describes the LDR\npseudo-instruction only, and not the\n            LDR instruction.<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to be loaded.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>expr</code></span></dt>\n<dd><div class=\"p\">evaluates to a numeric value.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label_expr</code></span></dt>\n<dd><div class=\"p\">is a PC-relative or external expression of an address\nin the form of a label plus or minus a numeric value.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n        LDR     r3,=0xff0    ; loads 0xff0 into R3\n                             ; =&gt;  MOV.W r3,#0xff0\n        LDR     r1,=0xfff    ; loads 0xfff into R1\n                             ; =&gt;  LDR r1,[pc,offset_to_litpool]\n                             ;     ...\n                             ;     litpool DCD 0xfff\n        LDR     r2,=place    ; loads the address of\n                             ; place into R2\n                             ; =&gt;  LDR r2,[pc,offset_to_litpool]\n                             ;     ...\n                             ;     litpool DCD place\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289875065.htm"
  },
  {
    "Mnemonic": "LDR, unprivileged",
    "Description": "Unprivileged load byte, halfword, or word.",
    "Syntax": "LDR{type}T{cond}\nRt, [Rn {,\n#offset}] ; immediate offset (32-bit Thumb encoding only)\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl><dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">unsigned Byte (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SB</code></dt>\n<dd><div class=\"p\">signed Byte (Sign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">unsigned Halfword (Zero extend to 32 bits on loads.)</div>\n</dd>\n<dt class=\"pt\"><code>SH</code></dt>\n<dd><div class=\"p\">signed Halfword (Sign extend to 32 bits.)</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd><div class=\"p\">is an offset. If offset is omitted, the address\nis the value in <code><span class=\"var\"><code>Rn</code></span></code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing a value to be used as the\noffset. <code><span class=\"var\"><code>Rm</code></span></code> must not be PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional shift.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289875455.htm"
  },
  {
    "Mnemonic": "LDREX",
    "Description": "Load Register Exclusive.",
    "Syntax": "LDREX{cond}\n              Rt, [Rn {,\n              #offset}] <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to load.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the second register for doubleword loads.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd><div class=\"p\">is an optional offset applied to the value in <span class=\"var\"><code>Rn</code></span>.\n                  <code><span class=\"var\"><code>offset</code></span></code> is permitted only in 32-bit Thumb\n              instructions. If <code><span class=\"var\"><code>offset</code></span></code> is omitted, an offset of\n              zero is assumed.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    MOV r1, #0x1                ; load the \u00e2\u0080\u0098lock taken\u00e2\u0080\u0099 value\ntry\n    LDREX r0, [LockAddr]        ; load the lock value\n    CMP r0, #0                  ; is the lock free?\n    STREXEQ r0, r1, [LockAddr]  ; try and claim the lock\n    CMPEQ r0, #0                ; did this succeed?\n    BNE try                     ; no \u00e2\u0080\u0093 try again\n    ....                        ; yes \u00e2\u0080\u0093 we have the lock\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289875835.htm"
  },
  {
    "Mnemonic": "LSL",
    "Description": "Logical Shift Left. This instruction is a preferred synonym for MOV         instructions with shifted register operands.",
    "Syntax": "LSL{S}{cond} Rd, Rm, Rs<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand. This operand is shifted left.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rs</code></span></dt>\n<dd><div class=\"p\">is a register holding a shift value to apply to the value in\n                                    <code><span class=\"var\"><code>Rm</code></span></code>. Only the least\n                            significant byte is used.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sh</code></span></dt>\n<dd><div class=\"p\">is a constant shift. The range of values permitted is 0-31.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    LSLS    r1, r2, r3\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289876185.htm"
  },
  {
    "Mnemonic": "LSR",
    "Description": "Logical Shift Right. This instruction is a preferred synonym for MOV         instructions with shifted register operands.",
    "Syntax": "LSR{S}{cond}\n                            Rd,\n                        Rm,\n                        Rs\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand. This\noperand is shifted right.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rs</code></span></dt>\n<dd><div class=\"p\">is a register holding a shift value to apply to\nthe value in <code><span class=\"var\"><code>Rm</code></span></code>. Only the least significant\nbyte is used.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sh</code></span></dt>\n<dd><div class=\"p\">is a constant shift. The range of values permitted\nis 1-32.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    LSR     r4, r5, r6\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289876525.htm"
  },
  {
    "Mnemonic": "MCR and MCR2",
    "Description": "Move to Coprocessor from ARM Register. Depending on the coprocessor, you might be able     to specify various additional operations.",
    "Syntax": "MCR{cond}\n              coproc,\n            #opcode1, Rt,\n              CRn, CRm{,\n              #opcode2}<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. In ARM code, <code><span class=\"var\"><code>cond</code></span></code> is not\n              permitted for <code>MCR2</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor the instruction is\nfor. The standard name is p<span class=\"var\"><code>n</code></span>, where <span class=\"var\"><code>n</code></span> is\nan integer in the range 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode1</code></span></dt>\n<dd><div class=\"p\">is a 3-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode2</code></span></dt>\n<dd><div class=\"p\">is an optional 3-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is an ARM source register. <code>R<span class=\"var\"><code>t</code></span></code> must\nnot be PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>CRn</code></span>, <span class=\"var\"><code>CRm</code></span></dt>\n<dd><div class=\"p\">are coprocessor registers.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289877204.htm"
  },
  {
    "Mnemonic": "MCRR and MCRR2",
    "Description": "Move to Coprocessor from ARM Registers. Depending on the coprocessor, you might be able     to specify various additional operations.",
    "Syntax": "MCRR{cond}\n              coproc,\n            #opcode, Rt,\n              Rt2, CRn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. In ARM code, <code><span class=\"var\"><code>cond</code></span></code> is\nnot permitted for <code>MCRR2</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor the instruction is\nfor. The standard name is p<span class=\"var\"><code>n</code></span>, where <span class=\"var\"><code>n</code></span> is\nan integer in the range 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode</code></span></dt>\n<dd><div class=\"p\">is a 4-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span>, <span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">are ARM source registers. <code>R<span class=\"var\"><code>t</code></span></code> and <code>R<span class=\"var\"><code>t2</code></span></code> must\nnot be PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>CRn</code></span></dt>\n<dd><div class=\"p\">is a coprocessor register.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289877604.htm"
  },
  {
    "Mnemonic": "MLA",
    "Description": "Multiply-Accumulate with signed or unsigned 32-bit operands, giving the least     significant 32 bits of the result.",
    "Syntax": "MLA{S}{cond}\n              Rd, Rn,\n              Rm, Ra\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n              the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are registers holding the values to be multiplied.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is a register holding the value to be added.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n MLA     r10, r2, r1, r5\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289878324.htm"
  },
  {
    "Mnemonic": "MLS",
    "Description": "Multiply-Subtract, with signed or unsigned 32-bit operands, giving the least     significant 32 bits of the result.",
    "Syntax": "MLS{cond}\n              Rd, Rn,\n              Rm, Ra\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n              the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are registers holding the values to be multiplied.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is a register holding the value to be subtracted\nfrom.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n MLS     r4, r5, r6, r7\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289878654.htm"
  },
  {
    "Mnemonic": "MOV",
    "Description": "Move.",
    "Syntax": "MOV{S}{cond}\n              Rd, Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n              the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>imm16</code></span></dt>\n<dd><div class=\"p\">is any value in the range 0-65535.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289878994.htm"
  },
  {
    "Mnemonic": "MOV32 pseudo-instruction",
    "Description": "Load a register with either a 32-bit immediate value or any address.",
    "Syntax": "MOV32{cond}\n              Rd, expr\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the register to be loaded. <code><span class=\"var\"><code>Rd</code></span></code> must\nnot be SP or PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>expr</code></span></dt>\n<dd><div class=\"p\">can be any one of the following:</div>\n<dl><dt class=\"code\"><span class=\"var\"><code>symbol</code></span></dt>\n<dd><div class=\"p\">A label in this or another program area.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>#constant</code></span></dt>\n<dd><div class=\"p\">Any 32-bit immediate value.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>symbol</code></span> + <span class=\"var\"><code>constant</code></span></dt>\n<dd><div class=\"p\">A label plus a 32-bit immediate value.</div>\n</dd>\n</dl>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n     MOV32 r3, #0xABCDEF12  ; loads 0xABCDEF12 into R3\n     MOV32 r1, Trigger+12   ; loads the address that is 12 bytes \n                            ; higher than the address Trigger into R1\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289879354.htm"
  },
  {
    "Mnemonic": "MOVT",
    "Description": "Move Top.",
    "Syntax": "MOVT{cond}\n              Rd, #imm16\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>imm16</code></span></dt>\n<dd><div class=\"p\">is a 16-bit immediate value.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289879724.htm"
  },
  {
    "Mnemonic": "MRC and MRC2",
    "Description": "Move to ARM Register from Coprocessor. Depending on the coprocessor, you might be able     to specify various additional operations.",
    "Syntax": "MRC{cond}\n              coproc,\n            #opcode1, Rt,\n              CRn, CRm{,\n              #opcode2} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. In ARM code, <code><span class=\"var\"><code>cond</code></span></code> is\nnot permitted for <code>MRC2</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor the instruction is\nfor. The standard name is p<span class=\"var\"><code>n</code></span>, where <span class=\"var\"><code>n</code></span> is\nan integer in the range 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode1</code></span></dt>\n<dd><div class=\"p\">is a 3-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode2</code></span></dt>\n<dd><div class=\"p\">is an optional 3-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the ARM destination register. <code>R<span class=\"var\"><code>t</code></span></code> must\nnot be PC.</div>\n<div class=\"p\"><span class=\"var\"><code>Rt</code></span> can be <code>APSR_nzcv</code>. This means that the coprocessor executes\n              an instruction that changes the value of the condition flags in the APSR.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>CRn</code></span>, <span class=\"var\"><code>CRm</code></span></dt>\n<dd><div class=\"p\">are coprocessor registers.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289880404.htm"
  },
  {
    "Mnemonic": "MRRC and MRRC2",
    "Description": "Move to ARM Registers from Coprocessor. Depending on the coprocessor, you might be able     to specify various additional operations.",
    "Syntax": "MRRC{cond}\n              coproc,\n            #opcode, Rt,\n              Rt2, CRm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code. In ARM code, <code><span class=\"var\"><code>cond</code></span></code> is\nnot permitted for <code>MRRC2</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor the instruction is for. The standard name is\n                  <code>p<span class=\"var\"><code>n</code></span></code>, where <span class=\"var\"><code>n</code></span> is an integer\n              in the range 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>opcode</code></span></dt>\n<dd><div class=\"p\">is a 4-bit coprocessor-specific opcode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span>, <span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">are ARM destination registers. <code>R<span class=\"var\"><code>t</code></span></code> and <code>R<span class=\"var\"><code>t2</code></span></code> must\nnot be PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>CRm</code></span></dt>\n<dd><div class=\"p\">is a coprocessor register.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289880734.htm"
  },
  {
    "Mnemonic": "MRS (PSR to general-purpose register)",
    "Description": "Move the contents of a PSR to a general-purpose register.",
    "Syntax": "MRS{cond}\n              Rd, psr\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>psr</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl><dt class=\"pt\"><code>APSR</code></dt>\n<dd><div class=\"p\">on any processor, in any mode.</div>\n</dd>\n<dt class=\"pt\"><code>CPSR</code></dt>\n<dd><div class=\"p\">deprecated synonym for APSR and for use in Debug\nstate, on any processor except ARMv7-M and ARMv6-M.</div>\n</dd>\n<dt class=\"pt\"><code>SPSR</code></dt>\n<dd><div class=\"p\">on any processor except ARMv7-M and ARMv6-M, in\nprivileged software execution only.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Mpsr</code></span></dt>\n<dd><div class=\"p\">on ARMv7-M and ARMv6-M processors only.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Mpsr</code></span></dt>\n<dd><div class=\"p\">can be any of: <code>IPSR</code>, <code>EPSR</code>, <code>IEPSR</code>, <code>IAPSR</code>, <code>EAPSR</code>, <code>MSP</code>, <code>PSP</code>, <code>XPSR</code>, <code>PRIMASK</code>, <code>BASEPRI</code>, <code>BASEPRI_MAX</code>, <code>FAULTMASK</code>,\nor <code>CONTROL</code>.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289881054.htm"
  },
  {
    "Mnemonic": "MRS (system coprocessor register to ARM register)",
    "Description": "Move to ARM register from system coprocessor register.",
    "Syntax": "MRS{cond}\n              Rn,\n            coproc_register\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc_register</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>special_register</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor register that can\nbe written to APSR_nzcv. This is only possible for the coprocessor\nregister DBGDSCRint.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the ARM destination register. <code>R<span class=\"var\"><code>n</code></span></code> must\nnot be PC.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    <code>MRS R1, SCTLR</code> ; writes the contents of the CP15 coprocessor\n                  ; register SCTLR into R1\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289881374.htm"
  },
  {
    "Mnemonic": "MSR (ARM register to system coprocessor register)",
    "Description": "Move to system coprocessor register from ARM register.",
    "Syntax": "MSR{cond}\n              coproc_register,\n            Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc_register</code></span></dt>\n<dd><div class=\"p\">is the name of the coprocessor register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the ARM source register. <code>R<span class=\"var\"><code>n</code></span></code> must\nnot be PC.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n<code>    MSR SCTLR, R1</code> ; writes the contents of R1 into the CP15\n                  ;  coprocessor register SCTLR\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289881714.htm"
  },
  {
    "Mnemonic": "MSR (general-purpose register to PSR)",
    "Description": "Load an immediate value, or the contents of a general-purpose register, into the         specified fields of a Program Status Register (PSR).",
    "Syntax": "MSR{cond}\n                            APSR_flags,\n                            Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>flags</code></span></dt>\n<dd><div class=\"p\">specifies the APSR flags to be moved. <span class=\"var\"><code>flags</code></span> can\nbe one or more of:</div>\n<dl>\n<dt class=\"pt\"><code>nzcvq</code></dt>\n<dd><div class=\"p\">ALU flags field mask, PSR[31:27] (User mode)</div>\n</dd>\n<dt class=\"pt\"><code>g</code></dt>\n<dd><div class=\"p\">SIMD GE flags field mask, PSR[19:16] (User mode).</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the source register. <code>R<span class=\"var\"><code>m</code></span></code> must\nnot be PC.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289882044.htm"
  },
  {
    "Mnemonic": "MUL",
    "Description": "Multiply with signed or unsigned 32-bit operands, giving the least significant 32 bits         of the result.",
    "Syntax": "MUL{S}{cond}\n                            {Rd},\n                        Rn,\n                        Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are registers holding the values to be multiplied.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    MUL     r10, r2, r5\n    MULS    r0, r2, r2\n    MULLT   r2, r3, r2\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289882394.htm"
  },
  {
    "Mnemonic": "MVN",
    "Description": "Move Not.",
    "Syntax": "MVN{S}{cond}\n                            Rd,\n                            Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    MVNNE   r11, #0xF000000B ; ARM only. This immediate value is not available in Thumb.\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289882734.htm"
  },
  {
    "Mnemonic": "NEG pseudo-instruction",
    "Description": "Negate the value in a register.",
    "Syntax": "NEG{cond}\n              Rd, Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register containing the value that is subtracted\nfrom zero.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289883063.htm"
  },
  {
    "Mnemonic": "NOP",
    "Description": "No Operation.",
    "Syntax": "NOP{cond}<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289883473.htm"
  },
  {
    "Mnemonic": "ORN (Thumb only)",
    "Description": "Logical OR NOT.",
    "Syntax": "ORN{S}{cond}\n              Rd, Rn,\n              Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n              the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    ORN     r7, r11, lr, ROR #4\n    ORNS    r7, r11, lr, ASR #32\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289883823.htm"
  },
  {
    "Mnemonic": "ORR",
    "Description": "Logical OR.",
    "Syntax": "ORR{S}{cond}\n              Rd, Rn,\n              Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    ORREQ   r2,r0,r5\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289884183.htm"
  },
  {
    "Mnemonic": "PKHBT and PKHTB",
    "Description": "Halfword Packing instructions that combine a halfword from one register with a halfword     from another register. One of the operands can be shifted before extraction of the     halfword.",
    "Syntax": "PKHBT{cond}\n              {Rd}, Rn,\n              Rm{, LSL\n            #leftshift} <dl>\n<dt class=\"pt\"><code>PKHBT</code></dt>\n<dd><div class=\"p\">Combines bits[15:0] of <code><span class=\"var\"><code>Rn</code></span></code> with\nbits[31:16] of the shifted value from <code><span class=\"var\"><code>Rm</code></span></code>.</div>\n</dd>\n<dt class=\"pt\"><code>PKHTB</code></dt>\n<dd><div class=\"p\">Combines bits[31:16] of <code><span class=\"var\"><code>Rn</code></span></code> with\nbits[15:0] of the shifted value from <code><span class=\"var\"><code>Rm</code></span></code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>leftshift</code></span></dt>\n<dd><div class=\"p\">is in the range 0 to 31.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rightshift</code></span></dt>\n<dd><div class=\"p\">is in the range 1 to 32.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    PKHBT   r0, r3, r5          ; combine the bottom halfword of R3 \n                                ; with the top halfword of R5\n    PKHBT   r0, r3, r5, LSL #16 ; combine the bottom halfword of R3\n                                ; with the bottom halfword of R5\n    PKHTB   r0, r3, r5, ASR #16 ; combine the top halfword of R3  \n                                ; with the top halfword of R5\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289884513.htm"
  },
  {
    "Mnemonic": "PLD and PLI",
    "Description": "Preload Data and Preload Instruction allow the processor to signal the memory system     that a data or instruction load from an address is likely in the near future.",
    "Syntax": "PLtype{cond}\n              [Rn {,\n          #offset}] <dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>D</code></dt>\n<dd><div class=\"p\">Data address.</div>\n</dd>\n<dt class=\"normaldt\"><code>I</code></dt>\n<dd><div class=\"p\">Instruction address.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n<div class=\"note\"><h3 class=\"note\">Note</h3><code><span class=\"var\"><code>cond</code></span></code> is permitted only in\nThumb code, using a preceding <code>IT</code> instruction.\nThis is an unconditional instruction in ARM code and you must not\nuse <code><span class=\"var\"><code>cond</code></span></code>.\n</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd><div class=\"p\">is an immediate offset. If offset is omitted, the\naddress is the value in <code><span class=\"var\"><code>Rn</code></span></code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing a value to be used as the\noffset.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional shift.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>label</code></span></dt>\n<dd><div class=\"p\">is a PC-relative expression.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289884863.htm"
  },
  {
    "Mnemonic": "POP",
    "Description": "Pop registers off a full descending stack.",
    "Syntax": "POP{cond}\n              reglist\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>reglist</code></span></dt>\n<dd><div class=\"p\">is a non-empty list of registers, enclosed in braces.\nIt can contain register ranges. It must be comma separated if it\ncontains more than one register or register range.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n        POP     {r0,r10,pc} ; no 16-bit version available\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289885303.htm"
  },
  {
    "Mnemonic": "PUSH",
    "Description": "Push registers onto a full descending stack.",
    "Syntax": "PUSH{cond}\n              reglist\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>reglist</code></span></dt>\n<dd><div class=\"p\">is a non-empty list of registers, enclosed in braces.\nIt can contain register ranges. It must be comma separated if it\ncontains more than one register or register range.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    PUSH    {r0,r4-r7}\n    PUSH    {r2,lr}\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289885653.htm"
  },
  {
    "Mnemonic": "QADD",
    "Description": "Signed saturating addition.",
    "Syntax": "QADD{cond}\n                            {Rd},\n                        Rm,\n                        Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    QADD    r0, r1, r9\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289885963.htm"
  },
  {
    "Mnemonic": "QADD8",
    "Description": "Signed saturating parallel byte-wise addition.",
    "Syntax": "QADD8{cond}\n              {Rd}, Rn,\n              Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289886293.htm"
  },
  {
    "Mnemonic": "QADD16",
    "Description": "Signed saturating parallel halfword-wise addition.",
    "Syntax": "QADD16{cond}\n              {Rd}, Rn,\n              Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289886623.htm"
  },
  {
    "Mnemonic": "QASX",
    "Description": "Signed saturating parallel add and subtract halfwords with exchange.",
    "Syntax": "QASX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289886933.htm"
  },
  {
    "Mnemonic": "QDADD",
    "Description": "Signed saturating Double and Add.",
    "Syntax": "QDADD{cond}\n                            {Rd},\n                        Rm,\n                        Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289887263.htm"
  },
  {
    "Mnemonic": "QDSUB",
    "Description": "Signed saturating Double and Subtract.",
    "Syntax": "QDSUB{cond}\n                            {Rd},\n                        Rm,\n                        Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\"> QDSUBLT r9, r0, r1</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289887583.htm"
  },
  {
    "Mnemonic": "QSAX",
    "Description": "Signed saturating parallel subtract and add halfwords with exchange.",
    "Syntax": "QSAX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289887943.htm"
  },
  {
    "Mnemonic": "QSUB",
    "Description": "Signed saturating Subtract.",
    "Syntax": "QSUB{cond}\n              {Rd}, Rm,\n              Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289888283.htm"
  },
  {
    "Mnemonic": "QSUB8",
    "Description": "Signed saturating parallel byte-wise subtraction.",
    "Syntax": "QSUB8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289888653.htm"
  },
  {
    "Mnemonic": "QSUB16",
    "Description": "Signed saturating parallel halfword-wise subtraction.",
    "Syntax": "QSUB16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289889003.htm"
  },
  {
    "Mnemonic": "RBIT",
    "Description": "Reverse the bit order in a 32-bit word.",
    "Syntax": "RBIT{cond} Rd, Rn<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    RBIT    r7, r8\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289889382.htm"
  },
  {
    "Mnemonic": "REV",
    "Description": "Reverse the byte order in a word.",
    "Syntax": "REV{cond}\n                            Rd,\n                        Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    REV     r3, r7\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289889712.htm"
  },
  {
    "Mnemonic": "REV16",
    "Description": "Reverse the byte order in each halfword independently.",
    "Syntax": "REV16{cond}\n              Rd,\n        Rn<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n REV16   r0, r0\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289890072.htm"
  },
  {
    "Mnemonic": "REVSH",
    "Description": "Reverse the byte order in the bottom halfword, and sign extend to 32 bits.",
    "Syntax": "REVSH{cond}\n                            Rd,\n                        Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    REVSH   r0, r5       ; Reverse Signed Halfword\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289890492.htm"
  },
  {
    "Mnemonic": "RFE",
    "Description": "Return From Exception.",
    "Syntax": "RFE{addr_mode}{cond}\n                            Rn{!}<dl>\n<dt class=\"code\"><span class=\"var\"><code>addr_mode</code></span></dt>\n<dd><div class=\"p\">is any one of the following:</div>\n<dl><dt class=\"pt\"><code>IA</code></dt>\n<dd><div class=\"p\">Increment address After each transfer (Full Descending\nstack)</div>\n</dd>\n<dt class=\"pt\"><code>IB</code></dt>\n<dd><div class=\"p\">Increment address Before each transfer (ARM only)</div>\n</dd>\n<dt class=\"pt\"><code>DA</code></dt>\n<dd><div class=\"p\">Decrement address After each transfer (ARM only)</div>\n</dd>\n<dt class=\"pt\"><code>DB</code></dt>\n<dd><div class=\"p\">Decrement address Before each transfer.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>addr_mode</code></span></code> is omitted, it\ndefaults to Increment After.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n<div class=\"note\"><h3 class=\"note\">Note</h3>\n<div class=\"p\"><code><span class=\"var\"><code>cond</code></span></code> is permitted only in\nThumb code, using a preceding <code>IT</code> instruction.\nThis is an unconditional instruction in ARM code.</div>\n</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">specifies the base register. <code><span class=\"var\"><code>Rn</code></span></code> must\nnot be PC.</div>\n</dd>\n<dt class=\"pt\"><code>!</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">!</span> is\npresent, the final address is written back into <code><span class=\"var\"><code>Rn</code></span></code>.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    RFE sp!\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289890882.htm"
  },
  {
    "Mnemonic": "ROR",
    "Description": "Rotate Right. This instruction is a preferred synonym for MOV         instructions with shifted register operands.",
    "Syntax": "ROR{S}{cond}\n                            Rd,\n                        Rm,\n                        Rs\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand. This\noperand is shifted right.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rs</code></span></dt>\n<dd><div class=\"p\">is a register holding a shift value to apply to\nthe value in <code><span class=\"var\"><code>Rm</code></span></code>. Only the least significant\nbyte is used.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sh</code></span></dt>\n<dd><div class=\"p\">is a constant shift. The range of values is 1-31.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    ROR     r4, r5, r6\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289891242.htm"
  },
  {
    "Mnemonic": "RRX",
    "Description": "Rotate Right with Extend. This instruction is a preferred synonym for             MOV instructions with shifted register operands.",
    "Syntax": "RRX{S}{cond}\n                            Rd,\n                        Rm\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n              the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand. This\noperand is shifted right.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289891582.htm"
  },
  {
    "Mnemonic": "RSB",
    "Description": "Reverse Subtract without carry.",
    "Syntax": "RSB{S}{cond}\n                            {Rd},\n                        Rn,\n                        Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    RSB     r4, r4, #1280       ; subtracts contents of R4 from 1280\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289891932.htm"
  },
  {
    "Mnemonic": "RSC",
    "Description": "Reverse Subtract with Carry.",
    "Syntax": "RSC{S}{cond} {Rd}, Rn, Operand2\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd>\n<div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on the\n                            result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd>\n<div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd>\n<div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    RSCSLE  r0,r5,r0,LSL r4     ; conditional, flags set\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289892272.htm"
  },
  {
    "Mnemonic": "SADD8",
    "Description": "Signed parallel byte-wise addition.",
    "Syntax": "SADD8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289892652.htm"
  },
  {
    "Mnemonic": "SADD16",
    "Description": "Signed parallel halfword-wise addition.",
    "Syntax": "SADD16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289893012.htm"
  },
  {
    "Mnemonic": "SASX",
    "Description": "Signed parallel add and subtract halfwords with exchange.",
    "Syntax": "SASX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289893352.htm"
  },
  {
    "Mnemonic": "SBC",
    "Description": "Subtract with Carry.",
    "Syntax": "SBC{S}{cond}\n                            {Rd},\n                        Rn,\n                        Operand2<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SUBS    r3, r6, r9\n    SBCS    r4, r7, r10\n    SBC     r5, r8, r11\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289893722.htm"
  },
  {
    "Mnemonic": "SBFX",
    "Description": "Signed Bit Field Extract.",
    "Syntax": "SBFX{cond}\n              Rd, Rn,\n              #lsb, #width\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the source register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>lsb</code></span></dt>\n<dd><div class=\"p\">is the bit number of the least significant bit in\nthe bitfield, in the range 0 to 31.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>width</code></span></dt>\n<dd><div class=\"p\">is the width of the bitfield, in the range 1 to\n(32\u00e2\u0080\u0093<code><span class=\"var\"><code>lsb</code></span></code>).</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289894042.htm"
  },
  {
    "Mnemonic": "SDIV",
    "Description": "Signed Divide.",
    "Syntax": "SDIV{cond}\n              {Rd}, Rn,\n              Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to be divided.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register holding the divisor.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289894402.htm"
  },
  {
    "Mnemonic": "SEL",
    "Description": "Select bytes from each operand according to the state of the APSR GE flags.",
    "Syntax": "SEL{cond}\n                            {Rd},\n                        Rn,\n                        Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SEL     r0, r4, r5\n    SELLT   r4, r0, r4\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289894732.htm"
  },
  {
    "Mnemonic": "SETEND",
    "Description": "Set the endianness bit in the CPSR, without affecting any other bits in the     CPSR.",
    "Syntax": "SETEND\nspecifier<dl>\n<dt class=\"code\"><span class=\"var\"><code>specifier</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>BE</code></dt>\n<dd><div class=\"p\">Big-endian.</div>\n</dd>\n<dt class=\"normaldt\"><code>LE</code></dt>\n<dd><div class=\"p\">Little-endian.</div>\n</dd>\n</dl>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SETEND  BE       ; Set the CPSR E bit for big-endian accesses\n    LDR     r0, [r2, #header]\n    LDR     r1, [r2, #CRC32]\n    SETEND  le       ; Set the CPSR E bit for little-endian accesses\n                     ; for the rest of the application\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289895072.htm"
  },
  {
    "Mnemonic": "SEV",
    "Description": "Set Event.",
    "Syntax": "SEV{cond} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289895451.htm"
  },
  {
    "Mnemonic": "SHADD8",
    "Description": "Signed halving parallel byte-wise addition.",
    "Syntax": "SHADD8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289895801.htm"
  },
  {
    "Mnemonic": "SHADD16",
    "Description": "Signed halving parallel halfword-wise addition.",
    "Syntax": "SHADD16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289896191.htm"
  },
  {
    "Mnemonic": "SHASX",
    "Description": "Signed halving parallel add and subtract halfwords with exchange.",
    "Syntax": "SHASX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289896561.htm"
  },
  {
    "Mnemonic": "SHSAX",
    "Description": "Signed halving parallel subtract and add halfwords with exchange.",
    "Syntax": "SHSAX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289896931.htm"
  },
  {
    "Mnemonic": "SHSUB8",
    "Description": "Signed halving parallel byte-wise subtraction.",
    "Syntax": "SHSUB8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289897271.htm"
  },
  {
    "Mnemonic": "SHSUB16",
    "Description": "Signed halving parallel halfword-wise subtraction.",
    "Syntax": "SHSUB16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289897611.htm"
  },
  {
    "Mnemonic": "SMC",
    "Description": "Secure Monitor Call.",
    "Syntax": "SMC{cond}\n              #imm4\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>imm4</code></span></dt>\n<dd><div class=\"p\">is a 4-bit immediate value. This is ignored by the\nARM processor, but can be used by the SMC exception handler to determine\nwhat service is being requested.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289897931.htm"
  },
  {
    "Mnemonic": "SMLAxy",
    "Description": "Signed Multiply Accumulate, with 16-bit operands and a 32-bit result and     accumulator.",
    "Syntax": "SMLA<x><y>{cond}\n              Rd, Rn,\n              Rm, Ra\n<dl>\n<dt class=\"code\">&lt;<span class=\"var\"><code>x</code></span>&gt;</dt>\n<dd><div class=\"p\">is either <span class=\"codeph\">B</span> or <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means\nuse the bottom half (bits [15:0]) of <span class=\"var\"><code>Rn</code></span>, <span class=\"codeph\">T</span> means\nuse the top half (bits [31:16]) of <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\">&lt;<span class=\"var\"><code>y</code></span>&gt;</dt>\n<dd><div class=\"p\">is either <span class=\"codeph\">B</span> or <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means\nuse the bottom half (bits [15:0]) of <span class=\"var\"><code>Rm</code></span>, <span class=\"codeph\">T</span> means\nuse the top half (bits [31:16]) of <span class=\"var\"><code>Rm</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the values to be multiplied.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to be added.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMLABBNE    r0, r2, r1, r10\n    SMLABT      r0, r0, r3, r5\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289898261.htm"
  },
  {
    "Mnemonic": "SMLAD",
    "Description": "Dual 16-bit Signed Multiply with Addition of products and 32-bit     accumulation.",
    "Syntax": "SMLAD{X}{cond}\n              Rd, Rn,\n              Rm, Ra\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>X</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">X</span> is\npresent, the most and least significant halfwords of the second\noperand are exchanged before the multiplications occur.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is the register holding the accumulate operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n         SMLADLT     r1, r2, r4, r1\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289898631.htm"
  },
  {
    "Mnemonic": "SMLAL",
    "Description": "Signed Long Multiply, with optional Accumulate, with 32-bit operands, and 64-bit result     and accumulator.",
    "Syntax": "SMLAL{S}{cond}\n              RdLo, RdHi,\n              Rn, Rm\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix available in ARM state only. If <span class=\"codeph\">S</span> is specified, the\n              condition flags are updated on the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo</code></span>, <span class=\"var\"><code>RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers. They also hold the\naccumulating value. <span class=\"var\"><code>RdLo</code></span> and <span class=\"var\"><code>RdHi</code></span> must\nbe different registers</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289898991.htm"
  },
  {
    "Mnemonic": "SMLALD",
    "Description": "Dual 16-bit Signed Multiply with Addition of products and 64-bit     Accumulation.",
    "Syntax": "SMLALD{X}{cond}\n              RdLo, RdHi,\n              Rn, Rm\n<dl>\n<dt class=\"pt\"><code>X</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">X</span> is\npresent, the most and least significant halfwords of the second\noperand are exchanged before the multiplications occur.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo</code></span>, <span class=\"var\"><code>RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers for the 64-bit result.\nThey also hold the 64-bit accumulate operand. <span class=\"var\"><code>RdHi</code></span> and <span class=\"var\"><code>RdLo</code></span> must\nbe different registers.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMLALD      r10, r11, r5, r1\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289899351.htm"
  },
  {
    "Mnemonic": "SMLALxy",
    "Description": "Signed Multiply-Accumulate with 16-bit operands and a 64-bit accumulator.",
    "Syntax": "SMLAL<x><y>{cond}\n              RdLo, RdHi,\n              Rn, Rm\n<dl>\n<dt class=\"code\">&lt;<span class=\"var\"><code>x</code></span>&gt;</dt>\n<dd><div class=\"p\">is either <span class=\"codeph\">B</span> or <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means\nuse the bottom half (bits [15:0]) of <span class=\"var\"><code>Rn</code></span>, <span class=\"codeph\">T</span> means\nuse the top half (bits [31:16]) of <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\">&lt;<span class=\"var\"><code>y</code></span>&gt;</dt>\n<dd><div class=\"p\">is either <span class=\"codeph\">B</span> or <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means\nuse the bottom half (bits [15:0]) of <span class=\"var\"><code>Rm</code></span>, <span class=\"codeph\">T</span> means\nuse the top half (bits [31:16]) of <span class=\"var\"><code>Rm</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo, RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers. They also hold the\naccumulate value. <span class=\"var\"><code>RdHi</code></span> and <span class=\"var\"><code>RdLo</code></span> must\nbe different registers.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the values to be multiplied.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMLALTB     r2, r3, r7, r1\n    SMLALBTVS   r0, r1, r9, r2\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289899701.htm"
  },
  {
    "Mnemonic": "SMLAWy",
    "Description": "Signed Multiply-Accumulate Wide, with one 32-bit operand and one 16-bit     operand, and a 32-bit accumulate value, providing the top 32 bits of the result.",
    "Syntax": "SMLAW<y>{cond}\n              Rd, Rn,\n              Rm, Ra\n<dl>\n<dt class=\"code\">&lt;<span class=\"var\"><code>y</code></span>&gt;</dt>\n<dd><div class=\"p\">is either <span class=\"codeph\">B</span> or <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means\nuse the bottom half (bits [15:0]) of <span class=\"var\"><code>Rm</code></span>, <span class=\"codeph\">T</span> means\nuse the top half (bits [31:16]) of <span class=\"var\"><code>Rm</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the values to be multiplied.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to be added.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289900041.htm"
  },
  {
    "Mnemonic": "SMLSD",
    "Description": "Dual 16-bit Signed Multiply with Subtraction of products and 32-bit     accumulation.",
    "Syntax": "SMLSD{X}{cond}\n              Rd, Rn,\n              Rm, Ra\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>X</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">X</span> is\npresent, the most and least significant halfwords of the second\noperand are exchanged before the multiplications occur.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is the register holding the accumulate operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMLSD       r1, r2, r0, r7\n    SMLSDX      r11, r10, r2, r3\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289900371.htm"
  },
  {
    "Mnemonic": "SMLSLD",
    "Description": "Dual 16-bit Signed Multiply with Subtraction of products and 64-bit         accumulation.",
    "Syntax": "SMLSD{X}{cond}\n                            RdLo,\n                            RdHi,\n                        Rn,\n                        Rm\n<dl>\n<dt class=\"pt\"><code>X</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">X</span> is\npresent, the most and least significant halfwords of the second\noperand are exchanged before the multiplications occur.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo</code></span>, <span class=\"var\"><code>RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers for the 64-bit result.\nThey also hold the 64-bit accumulate operand. <span class=\"var\"><code>RdHi</code></span> and <span class=\"var\"><code>RdLo</code></span> must\nbe different registers.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMLSLD      r3, r0, r5, r1\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289900721.htm"
  },
  {
    "Mnemonic": "SMMLA",
    "Description": "Signed Most significant word Multiply with Accumulation.",
    "Syntax": "SMMLA{R}{cond}\n              Rd, Rn,\n              Rm,\n        Ra<dl>\n<dt class=\"pt\"><code>R</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">R</span> is\npresent, the result is rounded, otherwise it is truncated.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is a register holding the value to be added or subtracted\nfrom.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289901101.htm"
  },
  {
    "Mnemonic": "SMMLS",
    "Description": "Signed Most significant word Multiply with Subtraction.",
    "Syntax": "SMMLS{R}{cond}\n              Rd, Rn,\n              Rm, Ra\n<dl>\n<dt class=\"pt\"><code>R</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">R</span> is\npresent, the result is rounded, otherwise it is truncated.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is a register holding the value to be added or subtracted\nfrom.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289901461.htm"
  },
  {
    "Mnemonic": "SMMUL",
    "Description": "Signed Most significant word Multiply.",
    "Syntax": "SMMUL{R}{cond}\n                            {Rd},\n                        Rn,\n                        Rm\n<dl>\n<dt class=\"pt\"><code>R</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">R</span> is\npresent, the result is rounded, otherwise it is truncated.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is a register holding the value to be added or subtracted\nfrom.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMMULGE     r6, r4, r3\n    SMMULR      r2, r2, r2\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289901780.htm"
  },
  {
    "Mnemonic": "SMUAD",
    "Description": "Dual 16-bit Signed Multiply with Addition of products, and optional exchange of operand         halves.",
    "Syntax": "SMUAD{X}{cond}\n                            {Rd},\n                        Rn,\n                        Rm\n<dl>\n<dt class=\"pt\"><code>X</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">X</span> is\npresent, the most and least significant halfwords of the second\noperand are exchanged before the multiplications occur.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMUAD       r2, r3, r2\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289902130.htm"
  },
  {
    "Mnemonic": "SMULxy",
    "Description": "Signed Multiply, with 16-bit operands and a 32-bit result.",
    "Syntax": "SMUL<x><y>{cond}\n              {Rd}, Rn,\n              Rm\n<dl>\n<dt class=\"code\">&lt;<span class=\"var\"><code>x</code></span>&gt;</dt>\n<dd>\n<div class=\"p\">is either <span class=\"codeph\">B</span> or\n                                <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means use the bottom half (bits [15:0]) of <span class=\"var\"><code>Rn</code></span>, <span class=\"codeph\">T</span>\n                            means use the top half (bits [31:16]) of <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\">&lt;<span class=\"var\"><code>y</code></span>&gt;</dt>\n<dd>\n<div class=\"p\">is either <span class=\"codeph\">B</span> or\n                                <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means use the bottom half (bits [15:0]) of <span class=\"var\"><code>Rm</code></span>, <span class=\"codeph\">T</span>\n                            means use the top half (bits [31:16]) of <span class=\"var\"><code>Rm</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd>\n<div class=\"p\">are the registers holding the values to be\n                            multiplied.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMULTBEQ    r8, r7, r9\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289902460.htm"
  },
  {
    "Mnemonic": "SMULL",
    "Description": "Signed Long Multiply, with 32-bit operands and 64-bit result.",
    "Syntax": "SMULL{S}{cond}\n              RdLo, RdHi,\n              Rn, Rm\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix available in ARM state only. If <span class=\"codeph\">S</span> is specified, the\n              condition flags are updated on the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo</code></span>, <span class=\"var\"><code>RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers. <span class=\"var\"><code>RdLo</code></span> and <span class=\"var\"><code>RdHi</code></span> must\nbe different registers</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289902800.htm"
  },
  {
    "Mnemonic": "SMULWy",
    "Description": "Signed Multiply Wide, with one 32-bit and one 16-bit operand, providing the top 32 bits     of the result.",
    "Syntax": "SMULW<y>{cond}\n              {Rd}, Rn,\n              Rm\n<dl>\n<dt class=\"code\">&lt;<span class=\"var\"><code>y</code></span>&gt;</dt>\n<dd>\n<div class=\"p\">is either <span class=\"codeph\">B</span> or <span class=\"codeph\">T</span>. <span class=\"codeph\">B</span> means use the\n              bottom half (bits [15:0]) of <span class=\"var\"><code>Rm</code></span>, <span class=\"codeph\">T</span> means use the top half (bits [31:16]) of <span class=\"var\"><code>Rm</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd>\n<div class=\"p\">are the registers holding the values to be multiplied.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289903150.htm"
  },
  {
    "Mnemonic": "SMUSD",
    "Description": "Dual 16-bit Signed Multiply with Subtraction of products, and optional exchange of         operand halves.",
    "Syntax": "SMUSD{X}{cond}\n                            {Rd},\n                        Rn,\n                        Rm\n<dl>\n<dt class=\"pt\"><code>X</code></dt>\n<dd><div class=\"p\">is an optional parameter. If <span class=\"codeph\">X</span> is\npresent, the most and least significant halfwords of the second\noperand are exchanged before the multiplications occur.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SMUSDXNE    r0, r1, r2\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289903540.htm"
  },
  {
    "Mnemonic": "SRS",
    "Description": "Store Return State onto a stack.",
    "Syntax": "SRS{addr_mode}{cond}\n          sp{!}, #modenum\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>addr_mode</code></span></dt>\n<dd><div class=\"p\">is any one of the following:</div>\n<dl>\n<dt class=\"pt\"><code>IA</code></dt>\n<dd><div class=\"p\">Increment address After each transfer</div>\n</dd>\n<dt class=\"pt\"><code>IB</code></dt>\n<dd><div class=\"p\">Increment address Before each transfer (ARM only)</div>\n</dd>\n<dt class=\"pt\"><code>DA</code></dt>\n<dd><div class=\"p\">Decrement address After each transfer (ARM only)</div>\n</dd>\n<dt class=\"pt\"><code>DB</code></dt>\n<dd><div class=\"p\">Decrement address Before each transfer (Full Descending\nstack).</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>addr_mode</code></span></code> is omitted, it\ndefaults to Increment After. You can also use stack oriented addressing\nmode suffixes, for example, when implementing stacks.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n<div class=\"note\"><h3 class=\"note\">Note</h3>\n<div class=\"p\"><code><span class=\"var\"><code>cond</code></span></code> is permitted only in\nThumb code, using a preceding <code>IT</code> instruction.\nThis is an unconditional instruction in ARM.</div>\n</div>\n</dd>\n<dt class=\"pt\"><code>!</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">!</span> is\npresent, the final address is written back into the SP of the mode\nspecified by <code><span class=\"var\"><code>modenum</code></span></code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>modenum</code></span></dt>\n<dd><div class=\"p\">specifies the number of the mode whose banked SP\nis used as the base register. You must use only the defined mode\nnumbers.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\nR13_usr  EQU     16\n         SRSFD   sp,#R13_usr\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289903910.htm"
  },
  {
    "Mnemonic": "SSAT",
    "Description": "Signed Saturate to any bit position, with optional shift before saturating.",
    "Syntax": "SSAT{cond}\n                            Rd,\n                        #sat,\n                        Rm{,\n                        shift} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sat</code></span></dt>\n<dd><div class=\"p\">specifies the bit position to saturate to, in the\nrange 1 to 32.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register containing the operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional shift. It must be one of the following:</div>\n<dl>\n<dt class=\"normaldt\"><code>ASR #<span class=\"var\"><code>n</code></span></code></dt>\n<dd><div class=\"p\">where <code><span class=\"var\"><code>n</code></span></code> is in the\nrange 1-32 (ARM) or 1-31 (Thumb)</div>\n</dd>\n<dt class=\"normaldt\"><code>LSL #<span class=\"var\"><code>n</code></span></code></dt>\n<dd><div class=\"p\">where <code><span class=\"var\"><code>n</code></span></code> is in the\nrange 0-31.</div>\n</dd>\n</dl>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SSAT    r7, #16, r7, LSL #4\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289904320.htm"
  },
  {
    "Mnemonic": "SSAT16",
    "Description": "Parallel halfword Saturate.",
    "Syntax": "SSAT16{cond}\n                            Rd,\n                        #sat,\n                        Rn\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sat</code></span></dt>\n<dd><div class=\"p\">specifies the bit position to saturate to, in the range 1 to 16.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SSAT16  r7, #12, r7\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289904690.htm"
  },
  {
    "Mnemonic": "SSAX",
    "Description": "Signed parallel subtract and add halfwords with exchange.",
    "Syntax": "SSAX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289905040.htm"
  },
  {
    "Mnemonic": "SSUB8",
    "Description": "Signed parallel byte-wise subtraction.",
    "Syntax": "SSUB8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289905380.htm"
  },
  {
    "Mnemonic": "SSUB16",
    "Description": "Signed parallel halfword-wise subtraction.",
    "Syntax": "SSUB16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289905720.htm"
  },
  {
    "Mnemonic": "STC and STC2",
    "Description": "Transfer Data between memory and Coprocessor.",
    "Syntax": "op{L}{cond} coproc, CRd, [Rn]<dl>\n<dt class=\"code\"><span class=\"var\"><code>op</code></span></dt>\n<dd>\n<div class=\"p\">is one of <code>STC</code> or <code>STC2</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n<div class=\"p\">In ARM code, <code><span class=\"var\"><code>cond</code></span></code> is not permitted for <code>STC2</code>.</div>\n</dd>\n<dt class=\"pt\"><code>L</code></dt>\n<dd>\n<div class=\"p\">is an optional suffix specifying a long transfer.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>coproc</code></span></dt>\n<dd>\n<div class=\"p\">is the name of the coprocessor the instruction is for. The standard\n              name is p<span class=\"var\"><code>n</code></span>, where <span class=\"var\"><code>n</code></span> is an integer in the range 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>CRd</code></span></dt>\n<dd>\n<div class=\"p\">is the coprocessor register to store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd>\n<div class=\"p\">is the register on which the memory address is based. If PC is\n              specified, the value used is the address of the current instruction plus eight.</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd>\n<div class=\"p\">is an optional minus sign. If <span class=\"codeph\">-</span> is present, the offset is subtracted from <span class=\"var\"><code>Rn</code></span>. Otherwise, the offset is added to <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd>\n<div class=\"p\">is an expression evaluating to a multiple of 4, in the range 0 to\n              1020.</div>\n</dd>\n<dt class=\"pt\"><code>!</code></dt>\n<dd>\n<div class=\"p\">is an optional suffix. If ! is present, the address including the\n              offset is written back into <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>option</code></span></dt>\n<dd>\n<div class=\"p\">is a coprocessor option in the range 0-255, enclosed in braces.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289906120.htm"
  },
  {
    "Mnemonic": "STM",
    "Description": "Store Multiple registers.",
    "Syntax": "STM{addr_mode}{cond}\n                            Rn{!},\n                            reglist{^} <dl>\n<dt class=\"code\"><span class=\"var\"><code>addr_mode</code></span></dt>\n<dd><div class=\"p\">is any one of the following:</div>\n<dl>\n<dt class=\"pt\"><code>IA</code></dt>\n<dd><div class=\"p\">Increment address After each transfer. This is the\ndefault, and can be omitted.</div>\n</dd>\n<dt class=\"pt\"><code>IB</code></dt>\n<dd><div class=\"p\">Increment address Before each transfer (ARM only).</div>\n</dd>\n<dt class=\"pt\"><code>DA</code></dt>\n<dd><div class=\"p\">Decrement address After each transfer (ARM only).</div>\n</dd>\n<dt class=\"pt\"><code>DB</code></dt>\n<dd><div class=\"p\">Decrement address Before each transfer.</div>\n</dd>\n</dl>\n<div class=\"p\">You can also use the stack-oriented addressing mode suffixes, for example\n                            when implementing stacks.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the <dfn class=\"term\">base register</dfn>, the ARM\nregister holding the initial address for the transfer. <span class=\"var\"><code>Rn</code></span> must\nnot be PC.</div>\n</dd>\n<dt class=\"pt\"><code>!</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">!</span> is\npresent, the final address is written back into <span class=\"var\"><code>Rn</code></span>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>reglist</code></span></dt>\n<dd><div class=\"p\">is a list of one or more registers to be stored, enclosed in braces. It can contain register\n                            ranges. It must be comma-separated if it contains more than one register\n                            or register range. Any combination of registers <code>R0</code> to\n                                <code>R15</code> (PC) can be transferred in ARM state, but there\n                            are some restrictions in Thumb state.</div>\n</dd>\n<dt class=\"pt\"><code>^</code></dt>\n<dd><div class=\"p\">is an optional suffix, available in ARM state only.\nYou must not use it in User mode or System mode. Data is transferred\ninto or out of the User mode registers instead of the current mode\nregisters.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    STMDB   r1!,{r3-r6,r11,r12}\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289906470.htm"
  },
  {
    "Mnemonic": "STR (immediate offset)",
    "Description": "Store with immediate offset, pre-indexed immediate offset, or post-indexed immediate offset.",
    "Syntax": "STR{type}{cond}\nRt, [Rn {,\n#offset}] ; immediate offset<dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl><dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">Byte.</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">Halfword.</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd><div class=\"p\">is an offset. If <code><span class=\"var\"><code>offset</code></span></code> is\nomitted, the address is the contents of <code><span class=\"var\"><code>Rn</code></span></code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the additional register to store for doubleword\noperations.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    STR     r2,[r9,#consta-struc]   ; consta-struc is an expression\n                                    ; evaluating to a constant in \n                                    ; the range 0-4095.\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289906890.htm"
  },
  {
    "Mnemonic": "STR (register offset)",
    "Description": "Store with register offset, pre-indexed register offset, or post-indexed register offset.",
    "Syntax": "STR{type}{cond}\nRt, [Rn,\n\u00c2\u00b1Rm {, shift}] ;\nregister offset<dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl><dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">Byte.</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">Halfword.</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing a value to be used as the\noffset. <code><span class=\"var\"><code>\u00e2\u0080\u0093Rm</code></span></code> is not permitted in Thumb\ncode.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional shift.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the additional register to store for doubleword\noperations.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289907270.htm"
  },
  {
    "Mnemonic": "STR, unprivileged",
    "Description": "Unprivileged Store, byte, halfword, or word.",
    "Syntax": "STR{type}T{cond}\nRt, [Rn {,\n#offset}] ; immediate offset (Thumb, 32-bit encoding only)\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>type</code></span></dt>\n<dd><div class=\"p\">can be any one of:</div>\n<dl><dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">Byte.</div>\n</dd>\n<dt class=\"pt\"><code>H</code></dt>\n<dd><div class=\"p\">Halfword.</div>\n</dd>\n<dt class=\"pt\"><code>-</code></dt>\n<dd><div class=\"p\">omitted, for Word.</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to load or store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd><div class=\"p\">is an offset. If offset is omitted, the address\nis the value in <code><span class=\"var\"><code>Rn</code></span></code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register containing a value to be used as the\noffset. <code><span class=\"var\"><code>Rm</code></span></code> must not be PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional shift.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289907680.htm"
  },
  {
    "Mnemonic": "STREX",
    "Description": "Store Register Exclusive.",
    "Syntax": "STREX{cond}\n                            Rd,\n                        Rt,\n                        [Rn {,\n                            #offset}]<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register for the returned status.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the register to store.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the second register for doubleword stores.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register on which the memory address is based.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>offset</code></span></dt>\n<dd><div class=\"p\">is an optional offset applied to the value in <span class=\"var\"><code>Rn</code></span>. <code><span class=\"var\"><code>offset</code></span></code> is\npermitted only in Thumb instructions. If <code><span class=\"var\"><code>offset</code></span></code> is\nomitted, an offset of 0 is assumed.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    MOV r1, #0x1                ; load the \u00e2\u0080\u0098lock taken\u00e2\u0080\u0099 value\ntry\n    LDREX r0, [LockAddr]        ; load the lock value\n    CMP r0, #0                  ; is the lock free?\n    STREXEQ r0, r1, [LockAddr]  ; try and claim the lock\n    CMPEQ r0, #0                ; did this succeed?\n    BNE try                     ; no \u00e2\u0080\u0093 try again\n    ....                        ; yes \u00e2\u0080\u0093 we have the lock\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289908049.htm"
  },
  {
    "Mnemonic": "SUB",
    "Description": "Subtract without carry.",
    "Syntax": "SUB{S}{cond}\n                            {Rd},\n                        Rn,\n                        Operand2<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">S</span> is specified, the condition flags are updated on\n                            the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>imm12</code></span></dt>\n<dd><div class=\"p\">is any value in the range 0-4095.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SUBS    r8, r6, #240        ; sets the flags based on the result\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289908389.htm"
  },
  {
    "Mnemonic": "SUBS pc, lr",
    "Description": "Exception return, without popping anything from the stack.",
    "Syntax": "SUBS{cond} pc, lr,\n              #imm ; ARM and Thumb code <dl>\n<dt class=\"code\"><span class=\"var\"><code>op1</code></span></dt>\n<dd><div class=\"p\">is one of <code>ADC</code>, <code>ADD</code>, <code>AND</code>, <code>BIC</code>, <code>EOR</code>, <code>ORN</code>, <code>ORR</code>, <code>RSB</code>, <code>RSC</code>, <code>SBC</code>,\nand <code>SUB</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>op2</code></span></dt>\n<dd><div class=\"p\">is one of <code>MOV</code> and <code>MVN</code>.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>imm</code></span></dt>\n<dd><div class=\"p\">is an immediate value. In Thumb code, it is limited\nto the range 0-255. In ARM code, it is a flexible second operand.</div>\n</dd>\n<dt class=\"code\">R<span class=\"var\"><code>n</code></span></dt>\n<dd><div class=\"p\">is the first operand register. ARM deprecates the\nuse of any register except <code>LR</code>.</div>\n</dd>\n<dt class=\"code\">R<span class=\"var\"><code>m</code></span></dt>\n<dd><div class=\"p\">is the optionally shifted second or only operand\nregister.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289908769.htm"
  },
  {
    "Mnemonic": "SVC",
    "Description": "SuperVisor Call.",
    "Syntax": "SVC{cond}\n              #imm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>imm</code></span></dt>\n<dd><div class=\"p\">is an expression evaluating to an integer in the\nrange:</div>\n<ul><li><div class=\"p\">0 to 2<sup>24</sup>\u00e2\u0080\u00931 (a 24-bit value) in an ARM instruction.</div>\n</li>\n<li><div class=\"p\">0-255 (an 8-bit value) in a Thumb instruction.</div>\n</li>\n</ul>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289909139.htm"
  },
  {
    "Mnemonic": "SWP and SWPB",
    "Description": "Swap data between registers and memory.",
    "Syntax": "SWP{B}{cond}\n              Rt, Rt2,\n              [Rn] <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>B</code></dt>\n<dd><div class=\"p\">is an optional suffix. If <span class=\"codeph\">B</span> is\npresent, a byte is swapped. Otherwise, a 32-bit word is swapped.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt</code></span></dt>\n<dd><div class=\"p\">is the destination register. <span class=\"var\"><code>Rt</code></span> must\nnot be PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rt2</code></span></dt>\n<dd><div class=\"p\">is the source register. <span class=\"var\"><code>Rt2</code></span> can\nbe the same register as <span class=\"var\"><code>Rt</code></span>. <span class=\"var\"><code>Rt2</code></span> must\nnot be PC.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">contains the address in memory. <span class=\"var\"><code>Rn</code></span> must\nbe a different register from both <span class=\"var\"><code>Rt</code></span> and <span class=\"var\"><code>Rt2</code></span>. <span class=\"var\"><code>Rn</code></span> must\nnot be PC.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289909499.htm"
  },
  {
    "Mnemonic": "SXTAB",
    "Description": "Sign extend Byte with Add, to extend an 8-bit value to a 32-bit value.",
    "Syntax": "SXTAB{cond}\n              {Rd}, Rn,\n              Rm {,rotation}\n        <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the number to add.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289909889.htm"
  },
  {
    "Mnemonic": "SXTAB16",
    "Description": "Sign extend two Bytes with Add, to extend two 8-bit values to two 16-bit     values.",
    "Syntax": "SXTAB16{cond}\n              {Rd}, Rn,\n              Rm\n          {,rotation}<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the number to add.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289910259.htm"
  },
  {
    "Mnemonic": "SXTAH",
    "Description": "Sign extend Halfword with Add, to extend a 16-bit value to a 32-bit value.",
    "Syntax": "SXTAH{cond}\n              {Rd}, Rn,\n              Rm {,rotation}\n        <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the number to add.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289910609.htm"
  },
  {
    "Mnemonic": "SXTB",
    "Description": "Sign extend Byte, to extend an 8-bit value to a 32-bit value.",
    "Syntax": "SXTB{cond}\n              {Rd}, Rm\n              {,rotation} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289911009.htm"
  },
  {
    "Mnemonic": "SXTB16",
    "Description": "Sign extend two bytes.",
    "Syntax": "SXTB16{cond}\n              {Rd}, Rm\n              {,rotation} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289911349.htm"
  },
  {
    "Mnemonic": "SXTH",
    "Description": "Sign extend Halfword.",
    "Syntax": "SXTH{cond}\n                            {Rd}, Rm\n                        {,rotation}\n                <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SXTH         r3, r9, r4\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289911659.htm"
  },
  {
    "Mnemonic": "SYS",
    "Description": "Execute system coprocessor instruction.",
    "Syntax": "SYS{cond}\n              instruction{,\n            Rn}\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>instruction</code></span></dt>\n<dd><div class=\"p\">is the coprocessor instruction to execute.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is an operand to the instruction. For instructions that take an argument, <span class=\"var\"><code>Rn</code></span>\n              is compulsory. For instructions that do not take an argument, <span class=\"var\"><code>Rn</code></span> is\n              optional and if it is not specified, <code>R0</code> is used.\n                <span class=\"var\"><code>Rn</code></span> must not be PC.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    SYS<code> ICIALLUIS</code> ; invalidates all instruction caches Inner Shareable\n                  ; to Point of Unification and also flushes branch\n                  ; target cache. \n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289912019.htm"
  },
  {
    "Mnemonic": "TBB and TBH",
    "Description": "Table Branch Byte and Table Branch Halfword.",
    "Syntax": "TBB [Rn, Rm]<dl>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the base register. This contains the address of the table of branch lengths.\n                <span class=\"var\"><code>Rn</code></span> must not be SP.</div>\n<div class=\"p\">If PC is specified for <span class=\"var\"><code>Rn</code></span>,\nthe value used is the address of the instruction plus 4.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the index register. This contains an index into\nthe table.</div>\n<div class=\"p\"><span class=\"var\"><code>Rm</code></span> must not be PC or SP.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289912399.htm"
  },
  {
    "Mnemonic": "TEQ",
    "Description": "Test Equivalence.",
    "Syntax": "TEQ{cond}\n              Rn, Operand2\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the ARM register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    TEQEQ   r10, r9\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289912729.htm"
  },
  {
    "Mnemonic": "TST",
    "Description": "Test bits.",
    "Syntax": "TST{cond}\n              Rn, Operand2\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the ARM register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Operand2</code></span></dt>\n<dd><div class=\"p\">is a flexible second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    TST     r0, #0x3F8\n    TSTNE   r1, r5, ASR r1\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289913099.htm"
  },
  {
    "Mnemonic": "UADD8",
    "Description": "Unsigned parallel byte-wise addition.",
    "Syntax": "UADD8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289913539.htm"
  },
  {
    "Mnemonic": "UADD16",
    "Description": "Unsigned parallel halfword-wise addition.",
    "Syntax": "UADD16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289913919.htm"
  },
  {
    "Mnemonic": "UASX",
    "Description": "Unsigned parallel add and subtract halfwords with exchange.",
    "Syntax": "UASX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289914278.htm"
  },
  {
    "Mnemonic": "UBFX",
    "Description": "Unsigned Bit Field Extract.",
    "Syntax": "UBFX{cond}\n              Rd, Rn,\n              #lsb, #width\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the source register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>lsb</code></span></dt>\n<dd><div class=\"p\">is the bit number of the least significant bit in\nthe bitfield, in the range 0 to 31.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>width</code></span></dt>\n<dd><div class=\"p\">is the width of the bitfield, in the range 1 to\n(32\u00e2\u0080\u0093<code><span class=\"var\"><code>lsb</code></span></code>).</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289914598.htm"
  },
  {
    "Mnemonic": "UDIV",
    "Description": "Unsigned Divide.",
    "Syntax": "UDIV{cond} {Rd},\n              Rn, Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to be divided.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is a register holding the divisor.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289914938.htm"
  },
  {
    "Mnemonic": "UHADD8",
    "Description": "Unsigned halving parallel byte-wise addition.",
    "Syntax": "UHADD8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289915268.htm"
  },
  {
    "Mnemonic": "UHADD16",
    "Description": "Unsigned halving parallel halfword-wise addition.",
    "Syntax": "UHADD16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289916088.htm"
  },
  {
    "Mnemonic": "UHASX",
    "Description": "Unsigned halving parallel add and subtract halfwords with exchange.",
    "Syntax": "UHASX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289916448.htm"
  },
  {
    "Mnemonic": "UHSAX",
    "Description": "Unsigned halving parallel subtract and add halfwords with exchange.",
    "Syntax": "UHSAX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289916798.htm"
  },
  {
    "Mnemonic": "UHSUB8",
    "Description": "Unsigned halving parallel byte-wise subtraction.",
    "Syntax": "UHSUB8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289917158.htm"
  },
  {
    "Mnemonic": "UHSUB16",
    "Description": "Unsigned halving parallel halfword-wise subtraction.",
    "Syntax": "UHSUB16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289917498.htm"
  },
  {
    "Mnemonic": "UMAAL",
    "Description": "Unsigned Multiply Accumulate Accumulate Long.",
    "Syntax": "UMAAL{cond}\n              RdLo, RdHi,\n              Rn, Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo</code></span>, <span class=\"var\"><code>RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers for the 64-bit result.\nThey also hold the two 32-bit accumulate operands. <span class=\"var\"><code>RdLo</code></span> and <span class=\"var\"><code>RdHi</code></span> must\nbe different registers.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are the registers holding the multiply operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    UMAAL       r8, r9, r2, r3\n    UMAALGE     r2, r0, r5, r3\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289917828.htm"
  },
  {
    "Mnemonic": "UMLAL",
    "Description": "Unsigned Long Multiply, with optional Accumulate, with 32-bit operands and 64-bit     result and accumulator.",
    "Syntax": "UMLAL{S}{cond}\n              RdLo, RdHi,\n              Rn, Rm\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix available in ARM state only. If <span class=\"codeph\">S</span> is specified, the\n              condition flags are updated based on the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo</code></span>, <span class=\"var\"><code>RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers. They also hold the accumulating value. <span class=\"var\"><code>RdLo</code></span> and\n                <span class=\"var\"><code>RdHi</code></span> must be different registers.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    UMLALS      r4, r5, r3, r8\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289918178.htm"
  },
  {
    "Mnemonic": "UMULL",
    "Description": "Unsigned Long Multiply, with 32-bit operands, and 64-bit result.",
    "Syntax": "UMULL{S}{cond}\n              RdLo, RdHi,\n              Rn, Rm\n<dl>\n<dt class=\"pt\"><code>S</code></dt>\n<dd><div class=\"p\">is an optional suffix available in ARM state only. If <span class=\"codeph\">S</span> is specified, the\n              condition flags are updated based on the result of the operation.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>RdLo</code></span>, <span class=\"var\"><code>RdHi</code></span></dt>\n<dd><div class=\"p\">are the destination registers. <span class=\"var\"><code>RdLo</code></span> and <span class=\"var\"><code>RdHi</code></span> must be\n              different registers.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn, Rm</code></span></dt>\n<dd><div class=\"p\">are ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    UMULL       r0, r4, r5, r6\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289918548.htm"
  },
  {
    "Mnemonic": "UND pseudo-instruction",
    "Description": "Generate an architecturally undefined instruction.",
    "Syntax": "UND{cond}{.W}\n              {#expr} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"pt\"><code>.W</code></dt>\n<dd><div class=\"p\">is an optional instruction width specifier.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>expr</code></span></dt>\n<dd><div class=\"p\">evaluates to a numeric value. The following table shows the range and encoding of <span class=\"var\"><code>expr</code></span> in the\ninstruction, where Y shows the locations of the bits that encode\nfor <span class=\"var\"><code>expr</code></span> and V is the 4 bits\nthat encode for the condition code.</div>\n<div class=\"p\">If <code><span class=\"var\"><code>expr</code></span></code> is omitted, the value\n0 is used.</div>\n<div class=\"TABLE\"><p id=\"tableCount-1-tid-unique_451\"><b>Table 10-18 Range and encoding of expr</b></p><div><table border=\"0\" frame=\"hsides\" rules=\"\">\n<thead align=\"left\">\n<tr>\n<th class=\"row-nocellborder\" id=\"d180311e109\" valign=\"top\"><div class=\"p\">Instruction</div>\n</th>\n<th class=\"row-nocellborder\" id=\"d180311e113\" valign=\"top\"><div class=\"p\">Encoding</div>\n</th>\n<th class=\"row-nocellborder\" id=\"d180311e117\" valign=\"top\"><div class=\"p\">Number of bits for <span class=\"var\"><code>expr</code></span></div>\n</th>\n<th class=\"row-nocellborder\" id=\"d180311e123\" valign=\"top\"><div class=\"p\">Range</div>\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"row-nocellborder\" headers=\"d180311e109\" valign=\"top\"><div class=\"p\">ARM</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e113\" valign=\"top\"><div class=\"p\">0xV7FYYYFY</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e117\" valign=\"top\"><div class=\"p\">16</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e123\" valign=\"top\"><div class=\"p\">0-65535</div>\n</td>\n</tr>\n<tr>\n<td class=\"row-nocellborder\" headers=\"d180311e109\" valign=\"top\"><div class=\"p\">Thumb 32-bit encoding</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e113\" valign=\"top\"><div class=\"p\">0xF7FYAYFY</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e117\" valign=\"top\"><div class=\"p\">12</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e123\" valign=\"top\"><div class=\"p\">0-4095</div>\n</td>\n</tr>\n<tr>\n<td class=\"row-nocellborder\" headers=\"d180311e109\" valign=\"top\"><div class=\"p\">Thumb16-bit encoding</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e113\" valign=\"top\"><div class=\"p\">0xDEYY</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e117\" valign=\"top\"><div class=\"p\">8</div>\n</td>\n<td class=\"row-nocellborder\" headers=\"d180311e123\" valign=\"top\"><div class=\"p\">0-255</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div></div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289918908.htm"
  },
  {
    "Mnemonic": "UQADD8",
    "Description": "Unsigned saturating parallel byte-wise addition.",
    "Syntax": "UQADD8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289919288.htm"
  },
  {
    "Mnemonic": "UQADD16",
    "Description": "Unsigned saturating parallel halfword-wise addition.",
    "Syntax": "UQADD16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289919618.htm"
  },
  {
    "Mnemonic": "UQASX",
    "Description": "Unsigned saturating parallel add and subtract halfwords with exchange.",
    "Syntax": "UQASX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289919958.htm"
  },
  {
    "Mnemonic": "UQSAX",
    "Description": "Unsigned saturating parallel subtract and add halfwords with exchange.",
    "Syntax": "UQSAX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289920278.htm"
  },
  {
    "Mnemonic": "UQSUB8",
    "Description": "Unsigned saturating parallel byte-wise subtraction.",
    "Syntax": "UQSUB8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289920727.htm"
  },
  {
    "Mnemonic": "UQSUB16",
    "Description": "Unsigned saturating parallel halfword-wise subtraction.",
    "Syntax": "UQSUB16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289921077.htm"
  },
  {
    "Mnemonic": "USAD8",
    "Description": "Unsigned Sum of Absolute Differences.",
    "Syntax": "\nUSAD8{cond}\n              {Rd}, Rn,\n              Rm\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the second operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    USAD8       r2, r4, r6\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289921417.htm"
  },
  {
    "Mnemonic": "USADA8",
    "Description": "Unsigned Sum of Absolute Differences and Accumulate.",
    "Syntax": "USADA8{cond}\n                            Rd,\n                        Rn,\n                        Rm,\n                        Ra\n<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the first operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the second operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Ra</code></span></dt>\n<dd><div class=\"p\">is the register holding the accumulate operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    USADA8      r0, r3, r5, r2\n    USADA8VS    r0, r4, r0, r1\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289921757.htm"
  },
  {
    "Mnemonic": "USAT",
    "Description": "Unsigned Saturate to any bit position, with optional shift before     saturating.",
    "Syntax": "USAT{cond}\n              Rd, #sat,\n              Rm{, shift}\n        <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sat</code></span></dt>\n<dd><div class=\"p\">specifies the bit position to saturate to, in the\nrange 0 to 31.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register containing the operand.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>shift</code></span></dt>\n<dd><div class=\"p\">is an optional shift. It must be one of the following:</div>\n<dl>\n<dt class=\"normaldt\"><code>ASR #<span class=\"var\"><code>n</code></span></code></dt>\n<dd><div class=\"p\">where <code><span class=\"var\"><code>n</code></span></code> is in the range 1-32 (ARM) or 1-31 (Thumb).</div>\n</dd>\n<dt class=\"normaldt\"><code>LSL #<span class=\"var\"><code>n</code></span></code></dt>\n<dd><div class=\"p\">where <code><span class=\"var\"><code>n</code></span></code> is in the\nrange 0-31.</div>\n</dd>\n</dl>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n USATNE  r0, #7, r5\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289922077.htm"
  },
  {
    "Mnemonic": "USAT16",
    "Description": "Parallel halfword Saturate.",
    "Syntax": "USAT16{cond}\n                            Rd,\n                        #sat,\n                        Rn<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>sat</code></span></dt>\n<dd><div class=\"p\">specifies the bit position to saturate to, in the\nrange 0 to 15.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the operand.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    USAT16  r0, #7, r5\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289922427.htm"
  },
  {
    "Mnemonic": "USAX",
    "Description": "Unsigned parallel subtract and add halfwords with exchange.",
    "Syntax": "USAX{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd><div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289922797.htm"
  },
  {
    "Mnemonic": "USUB8",
    "Description": "Unsigned parallel byte-wise subtraction.",
    "Syntax": "USUB8{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289923147.htm"
  },
  {
    "Mnemonic": "USUB16",
    "Description": "Unsigned parallel halfword-wise subtraction.",
    "Syntax": "USUB16{cond}\n              {Rd}, Rn,\n              Rm<dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd>\n<div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd>\n<div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm, Rn</code></span></dt>\n<dd>\n<div class=\"p\">are the ARM registers holding the operands.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289923497.htm"
  },
  {
    "Mnemonic": "UXTAB",
    "Description": "Zero extend Byte and Add.",
    "Syntax": "UXTAB{cond}\n              {Rd}, Rn,\n              Rm {,rotation}\n        <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the number to add.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289923867.htm"
  },
  {
    "Mnemonic": "UXTAB16",
    "Description": "Zero extend two Bytes and Add.",
    "Syntax": "UXTAB16{cond}\n              {Rd}, Rn,\n              Rm {,rotation}\n        <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the number to add.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "<pre class=\"codeblock\">\n    UXTAB16EQ    r0, r0, r4, ROR #16\n</pre>",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289924207.htm"
  },
  {
    "Mnemonic": "UXTAH",
    "Description": "Zero extend Halfword and Add.",
    "Syntax": "UXTAH{cond}\n              {Rd}, Rn,\n              Rm {,rotation}\n        <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rn</code></span></dt>\n<dd><div class=\"p\">is the register holding the number to add.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289924617.htm"
  },
  {
    "Mnemonic": "UXTB",
    "Description": "Zero extend Byte.",
    "Syntax": "UXTB{cond}\n              {Rd}, Rm\n              {,rotation} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289924987.htm"
  },
  {
    "Mnemonic": "UXTB16",
    "Description": "Zero extend two Bytes.",
    "Syntax": "UXTB16{cond}\n              {Rd}, Rm\n              {,rotation} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289925377.htm"
  },
  {
    "Mnemonic": "UXTH",
    "Description": "Zero extend Halfword.",
    "Syntax": "UXTH{cond}\n              {Rd}, Rm\n              {,rotation} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rd</code></span></dt>\n<dd><div class=\"p\">is the destination register.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>Rm</code></span></dt>\n<dd><div class=\"p\">is the register holding the value to extend.</div>\n</dd>\n<dt class=\"code\"><span class=\"var\"><code>rotation</code></span></dt>\n<dd><div class=\"p\">is one of:</div>\n<dl>\n<dt class=\"normaldt\"><code>ROR #8</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 8 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #16</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 16 bits.</div>\n</dd>\n<dt class=\"normaldt\"><code>ROR #24</code></dt>\n<dd><div class=\"p\">Value from <code><span class=\"var\"><code>Rm</code></span></code> is\nrotated right 24 bits.</div>\n</dd>\n</dl>\n<div class=\"p\">If <code><span class=\"var\"><code>rotation</code></span></code> is omitted, no\nrotation is performed.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289925707.htm"
  },
  {
    "Mnemonic": "WFE",
    "Description": "Wait For Event.",
    "Syntax": "WFE{cond} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289926047.htm"
  },
  {
    "Mnemonic": "WFI",
    "Description": "Wait for Interrupt.",
    "Syntax": "WFI{cond} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289926427.htm"
  },
  {
    "Mnemonic": "YIELD",
    "Description": "Yield.",
    "Syntax": "YIELD{cond} <dl>\n<dt class=\"code\"><span class=\"var\"><code>cond</code></span></dt>\n<dd><div class=\"p\">is an optional condition code.</div>\n</dd>\n</dl>",
    "Example": "",
    "Know More": "https://www.keil.com/support/man/docs/armasm/armasm_dom1361289926796.htm"
  }
]