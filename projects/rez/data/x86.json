[
  {
    "Mnemonic": "AAA",
    "Opcode": "37",
    "64-bit Mode": "Invalid",
    "Description": "ASCII adjust AL after addition.",
    "Know More": "https://www.felixcloutier.com/x86/AAA.html"
  },
  {
    "Mnemonic": "AAD",
    "Opcode": "D5 0A",
    "64-bit Mode": "Invalid",
    "Description": "ASCII adjust AX before division.",
    "Know More": "https://www.felixcloutier.com/x86/AAD.html"
  },
  {
    "Mnemonic": "AAM",
    "Opcode": "D4 0A",
    "64-bit Mode": "Invalid",
    "Description": "ASCII adjust AX after multiply.",
    "Know More": "https://www.felixcloutier.com/x86/AAM.html"
  },
  {
    "Mnemonic": "AAS",
    "Opcode": "3F",
    "64-bit Mode": "Invalid",
    "Description": "ASCII adjust AL after subtraction.",
    "Know More": "https://www.felixcloutier.com/x86/AAS.html"
  },
  {
    "Mnemonic": "ADC",
    "Opcode": "14 ib",
    "64-bit Mode": "Invalid",
    "Description": "Add with carry imm8 to AL.",
    "Know More": "https://www.felixcloutier.com/x86/ADC.html"
  },
  {
    "Mnemonic": "ADCX",
    "Opcode": "66 0F 38 F6 /r ADCX r32, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Unsigned addition of r32 with CF, r/m32 to r32, writes CF.",
    "Know More": "https://www.felixcloutier.com/x86/ADCX.html"
  },
  {
    "Mnemonic": "ADD",
    "Opcode": "04 ib",
    "64-bit Mode": "Invalid",
    "Description": "Add imm8 to AL.",
    "Know More": "https://www.felixcloutier.com/x86/ADD.html"
  },
  {
    "Mnemonic": "ADDPD",
    "Opcode": "66 0F 58 /r ADDPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Add packed double-precision floating-point values from xmm2/mem to xmm1 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ADDPD.html"
  },
  {
    "Mnemonic": "ADDPS",
    "Opcode": "NP 0F 58 /r ADDPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Add packed single-precision floating-point values from xmm2/m128 to xmm1 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ADDPS.html"
  },
  {
    "Mnemonic": "ADDSD",
    "Opcode": "F2 0F 58 /r ADDSD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Add the low double-precision floating-point value from xmm2/mem to xmm1 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ADDSD.html"
  },
  {
    "Mnemonic": "ADDSS",
    "Opcode": "F3 0F 58 /r ADDSS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Add the low single-precision floating-point value from xmm2/mem to xmm1 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ADDSS.html"
  },
  {
    "Mnemonic": "ADDSUBPD",
    "Opcode": "66 0F D0 /r ADDSUBPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Add/subtract double-precision floating-point values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ADDSUBPD.html"
  },
  {
    "Mnemonic": "ADDSUBPS",
    "Opcode": "F2 0F D0 /r ADDSUBPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Add/subtract single-precision floating-point values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ADDSUBPS.html"
  },
  {
    "Mnemonic": "ADOX",
    "Opcode": "F3 0F 38 F6 /r ADOX r32, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Unsigned addition of r32 with OF, r/m32 to r32, writes OF.",
    "Know More": "https://www.felixcloutier.com/x86/ADOX.html"
  },
  {
    "Mnemonic": "AESDEC",
    "Opcode": "66 0F 38 DE /r AESDEC xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/AESDEC.html"
  },
  {
    "Mnemonic": "AESDECLAST",
    "Opcode": "66 0F 38 DF /r AESDECLAST xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/AESDECLAST.html"
  },
  {
    "Mnemonic": "AESENC",
    "Opcode": "66 0F 38 DC /r AESENC xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Perform one round of an AES encryption flow, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/AESENC.html"
  },
  {
    "Mnemonic": "AESENCLAST",
    "Opcode": "66 0F 38 DD /r AESENCLAST xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Perform the last round of an AES encryption flow, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/AESENCLAST.html"
  },
  {
    "Mnemonic": "AESIMC",
    "Opcode": "66 0F 38 DB /r AESIMC xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/AESIMC.html"
  },
  {
    "Mnemonic": "AESKEYGENASSIST",
    "Opcode": "66 0F 3A DF /r ib AESKEYGENASSIST xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Assist in AES round key generation using an 8 bits Round Constant (RCON) specified in the immediate byte, operating on 128 bits of data specified in xmm2/m128 and stores the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/AESKEYGENASSIST.html"
  },
  {
    "Mnemonic": "AND",
    "Opcode": "24 ib",
    "64-bit Mode": "Invalid",
    "Description": "AL AND imm8.",
    "Know More": "https://www.felixcloutier.com/x86/AND.html"
  },
  {
    "Mnemonic": "ANDN",
    "Opcode": "VEX.LZ.0F38.W0 F2 /r ANDN r32a, r32b, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND of inverted r32b with r/m32, store result in r32a.",
    "Know More": "https://www.felixcloutier.com/x86/ANDN.html"
  },
  {
    "Mnemonic": "ANDNPD",
    "Opcode": "66 0F 55 /r ANDNPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical AND NOT of packed double-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/ANDNPD.html"
  },
  {
    "Mnemonic": "ANDNPS",
    "Opcode": "NP 0F 55 /r ANDNPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical AND NOT of packed single-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/ANDNPS.html"
  },
  {
    "Mnemonic": "ANDPD",
    "Opcode": "66 0F 54 /r ANDPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical AND of packed double-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/ANDPD.html"
  },
  {
    "Mnemonic": "ANDPS",
    "Opcode": "NP 0F 54 /r ANDPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical AND of packed single-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/ANDPS.html"
  },
  {
    "Mnemonic": "ARPL",
    "Opcode": "63 /r",
    "64-bit Mode": "Invalid",
    "Description": "Adjust RPL of r/m16 to not less than RPL of r16.",
    "Know More": "https://www.felixcloutier.com/x86/ARPL.html"
  },
  {
    "Mnemonic": "BEXTR",
    "Opcode": "VEX.LZ.0F38.W0 F7 /r BEXTR r32a, r/m32, r32b",
    "64-bit Mode": "Valid",
    "Description": "Contiguous bitwise extract from r/m32 using r32b as control; store result in r32a.",
    "Know More": "https://www.felixcloutier.com/x86/BEXTR.html"
  },
  {
    "Mnemonic": "BLENDPD",
    "Opcode": "66 0F 3A 0D /r ib BLENDPD xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Select packed DP-FP values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/BLENDPD.html"
  },
  {
    "Mnemonic": "BLENDPS",
    "Opcode": "66 0F 3A 0C /r ib BLENDPS xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/BLENDPS.html"
  },
  {
    "Mnemonic": "BLENDVPD",
    "Opcode": "66 0F 38 15 /r BLENDVPD xmm1, xmm2/m128 , <XMM0>",
    "64-bit Mode": "Valid",
    "Description": "Select packed DP FP values from xmm1 and xmm2 from mask specified in XMM0 and store the values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/BLENDVPD.html"
  },
  {
    "Mnemonic": "BLENDVPS",
    "Opcode": "66 0F 38 14 /r BLENDVPS xmm1, xmm2/m128, <XMM0>",
    "64-bit Mode": "Valid",
    "Description": "Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in XMM0 and store the values into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/BLENDVPS.html"
  },
  {
    "Mnemonic": "BLSI",
    "Opcode": "VEX.LZ.0F38.W0 F3 /3 BLSI r32, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Extract lowest set bit from r/m32 and set that bit in r32.",
    "Know More": "https://www.felixcloutier.com/x86/BLSI.html"
  },
  {
    "Mnemonic": "BLSMSK",
    "Opcode": "VEX.LZ.0F38.W0 F3 /2 BLSMSK r32, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Set all lower bits in r32 to \u201c1\u201d starting from bit 0 to lowest set bit in r/m32.",
    "Know More": "https://www.felixcloutier.com/x86/BLSMSK.html"
  },
  {
    "Mnemonic": "BLSR",
    "Opcode": "VEX.LZ.0F38.W0 F3 /1 BLSR r32, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Reset lowest set bit of r/m32, keep all other bits of r/m32 and write result to r32.",
    "Know More": "https://www.felixcloutier.com/x86/BLSR.html"
  },
  {
    "Mnemonic": "BNDCL",
    "Opcode": "F3 0F 1A /r BNDCL bnd, r/m32",
    "64-bit Mode": "Invalid",
    "Description": "Generate a #BR if the address in r/m32 is lower than the lower bound in bnd.",
    "Know More": "https://www.felixcloutier.com/x86/BNDCL.html"
  },
  {
    "Mnemonic": "BNDCN",
    "Opcode": "F2 0F 1A /r BNDCU bnd, r/m32",
    "64-bit Mode": "Invalid",
    "Description": "Generate a #BR if the address in r/m32 is higher than the upper bound in bnd.",
    "Know More": "https://www.felixcloutier.com/x86/BNDCU:BNDCN.html"
  },
  {
    "Mnemonic": "BNDCU",
    "Opcode": "F2 0F 1A /r BNDCU bnd, r/m32",
    "64-bit Mode": "Invalid",
    "Description": "Generate a #BR if the address in r/m32 is higher than the upper bound in bnd.",
    "Know More": "https://www.felixcloutier.com/x86/BNDCU:BNDCN.html"
  },
  {
    "Mnemonic": "BNDLDX",
    "Opcode": "NP 0F 1A /r BNDLDX bnd, mib",
    "64-bit Mode": "Valid",
    "Description": "Load the bounds stored in a bound table entry (BTE) into bnd with address translation using the base of mib and conditional on the index of mib matching the pointer value in the BTE.",
    "Know More": "https://www.felixcloutier.com/x86/BNDLDX.html"
  },
  {
    "Mnemonic": "BNDMK",
    "Opcode": "F3 0F 1B /r BNDMK bnd, m32",
    "64-bit Mode": "Invalid",
    "Description": "Make lower and upper bounds from m32 and store them in bnd.",
    "Know More": "https://www.felixcloutier.com/x86/BNDMK.html"
  },
  {
    "Mnemonic": "BNDMOV",
    "Opcode": "66 0F 1A /r BNDMOV bnd1, bnd2/m64",
    "64-bit Mode": "Invalid",
    "Description": "Move lower and upper bound from bnd2/m64 to bound register bnd1.",
    "Know More": "https://www.felixcloutier.com/x86/BNDMOV.html"
  },
  {
    "Mnemonic": "BNDSTX",
    "Opcode": "NP 0F 1B /r BNDSTX mib, bnd",
    "64-bit Mode": "Valid",
    "Description": "Store the bounds in bnd and the pointer value in the index register of mib to a bound table entry (BTE) with address translation using the base of mib.",
    "Know More": "https://www.felixcloutier.com/x86/BNDSTX.html"
  },
  {
    "Mnemonic": "BOUND",
    "Opcode": "62 /r",
    "64-bit Mode": "Invalid",
    "Description": "Check if r16 (array index) is within bounds specified by m16&16.",
    "Know More": "https://www.felixcloutier.com/x86/BOUND.html"
  },
  {
    "Mnemonic": "BSF",
    "Opcode": "0F BC /r",
    "64-bit Mode": "Invalid",
    "Description": "Bit scan forward on r/m16.",
    "Know More": "https://www.felixcloutier.com/x86/BSF.html"
  },
  {
    "Mnemonic": "BSR",
    "Opcode": "0F BD /r",
    "64-bit Mode": "Invalid",
    "Description": "Bit scan reverse on r/m16.",
    "Know More": "https://www.felixcloutier.com/x86/BSR.html"
  },
  {
    "Mnemonic": "BSWAP",
    "Opcode": "0F C8+rd",
    "64-bit Mode": "Invalid",
    "Description": "Reverses the byte order of a 32-bit register.",
    "Know More": "https://www.felixcloutier.com/x86/BSWAP.html"
  },
  {
    "Mnemonic": "BT",
    "Opcode": "0F A3 /r",
    "64-bit Mode": "Invalid",
    "Description": "Store selected bit in CF flag.",
    "Know More": "https://www.felixcloutier.com/x86/BT.html"
  },
  {
    "Mnemonic": "BTC",
    "Opcode": "0F BB /r",
    "64-bit Mode": "Invalid",
    "Description": "Store selected bit in CF flag and complement.",
    "Know More": "https://www.felixcloutier.com/x86/BTC.html"
  },
  {
    "Mnemonic": "BTR",
    "Opcode": "0F B3 /r",
    "64-bit Mode": "Invalid",
    "Description": "Store selected bit in CF flag and clear.",
    "Know More": "https://www.felixcloutier.com/x86/BTR.html"
  },
  {
    "Mnemonic": "BTS",
    "Opcode": "0F AB /r",
    "64-bit Mode": "Invalid",
    "Description": "Store selected bit in CF flag and set.",
    "Know More": "https://www.felixcloutier.com/x86/BTS.html"
  },
  {
    "Mnemonic": "BZHI",
    "Opcode": "VEX.LZ.0F38.W0 F5 /r BZHI r32a, r/m32, r32b",
    "64-bit Mode": "Valid",
    "Description": "Zero bits in r/m32 starting with the position in r32b, write result to r32a.",
    "Know More": "https://www.felixcloutier.com/x86/BZHI.html"
  },
  {
    "Mnemonic": "CALL",
    "Opcode": "E8 cw",
    "64-bit Mode": "Invalid",
    "Description": "Call near, relative, displacement relative to next instruction.",
    "Know More": "https://www.felixcloutier.com/x86/CALL.html"
  },
  {
    "Mnemonic": "CBW",
    "Opcode": "98",
    "64-bit Mode": "Invalid",
    "Description": "AX \u2190 sign-extend of AL.",
    "Know More": "https://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html"
  },
  {
    "Mnemonic": "CDQE",
    "Opcode": "98",
    "64-bit Mode": "Invalid",
    "Description": "AX \u2190 sign-extend of AL.",
    "Know More": "https://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html"
  },
  {
    "Mnemonic": "CLAC",
    "Opcode": "NP 0F 01 CA CLAC",
    "64-bit Mode": "Valid",
    "Description": "Clear the AC flag in the EFLAGS register.",
    "Know More": "https://www.felixcloutier.com/x86/CLAC.html"
  },
  {
    "Mnemonic": "CLC",
    "Opcode": "F8",
    "64-bit Mode": "Invalid",
    "Description": "Clear CF flag.",
    "Know More": "https://www.felixcloutier.com/x86/CLC.html"
  },
  {
    "Mnemonic": "CLD",
    "Opcode": "FC",
    "64-bit Mode": "Invalid",
    "Description": "Clear DF flag.",
    "Know More": "https://www.felixcloutier.com/x86/CLD.html"
  },
  {
    "Mnemonic": "CLDEMOTE",
    "Opcode": "NP 0F 1C /0 CLDEMOTE m8",
    "64-bit Mode": "Valid",
    "Description": "Hint to hardware to move the cache line containing m8 to a more distant level of the cache without writing back to memory.",
    "Know More": "https://www.felixcloutier.com/x86/CLDEMOTE.html"
  },
  {
    "Mnemonic": "CLFLUSH",
    "Opcode": "NP 0F AE /7 CLFLUSH m8",
    "64-bit Mode": "Invalid",
    "Description": "Flushes cache line containing m8.",
    "Know More": "https://www.felixcloutier.com/x86/CLFLUSH.html"
  },
  {
    "Mnemonic": "CLFLUSHOPT",
    "Opcode": "NFx 66 0F AE /7 CLFLUSHOPT m8",
    "64-bit Mode": "Invalid",
    "Description": "Flushes cache line containing m8.",
    "Know More": "https://www.felixcloutier.com/x86/CLFLUSHOPT.html"
  },
  {
    "Mnemonic": "CLI",
    "Opcode": "FA",
    "64-bit Mode": "Invalid",
    "Description": "Clear interrupt flag; interrupts disabled when interrupt flag cleared.",
    "Know More": "https://www.felixcloutier.com/x86/CLI.html"
  },
  {
    "Mnemonic": "CLTS",
    "Opcode": "0F 06",
    "64-bit Mode": "Invalid",
    "Description": "Clears TS flag in CR0.",
    "Know More": "https://www.felixcloutier.com/x86/CLTS.html"
  },
  {
    "Mnemonic": "CLWB",
    "Opcode": "66 0F AE /6 CLWB m8",
    "64-bit Mode": "Valid",
    "Description": "Writes back modified cache line containing m8, and may retain the line in cache hierarchy in non-modified state.",
    "Know More": "https://www.felixcloutier.com/x86/CLWB.html"
  },
  {
    "Mnemonic": "CMC",
    "Opcode": "F5",
    "64-bit Mode": "Invalid",
    "Description": "Complement CF flag.",
    "Know More": "https://www.felixcloutier.com/x86/CMC.html"
  },
  {
    "Mnemonic": "CMPPD",
    "Opcode": "66 0F C2 /r ib CMPPD xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed double-precision floating-point values in xmm2/m128 and xmm1 using bits 2:0 of imm8 as a comparison predicate.",
    "Know More": "https://www.felixcloutier.com/x86/CMPPD.html"
  },
  {
    "Mnemonic": "CMPPS",
    "Opcode": "NP 0F C2 /r ib CMPPS xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed single-precision floating-point values in xmm2/m128 and xmm1 using bits 2:0 of imm8 as a comparison predicate.",
    "Know More": "https://www.felixcloutier.com/x86/CMPPS.html"
  },
  {
    "Mnemonic": "CMPSD",
    "Opcode": "F2 0F C2 /r ib CMPSD xmm1, xmm2/m64, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare low double-precision floating-point value in xmm2/m64 and xmm1 using bits 2:0 of imm8 as comparison predicate.",
    "Know More": "https://www.felixcloutier.com/x86/CMPSD.html"
  },
  {
    "Mnemonic": "CMPSS",
    "Opcode": "F3 0F C2 /r ib CMPSS xmm1, xmm2/m32, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare low single-precision floating-point value in xmm2/m32 and xmm1 using bits 2:0 of imm8 as comparison predicate.",
    "Know More": "https://www.felixcloutier.com/x86/CMPSS.html"
  },
  {
    "Mnemonic": "COMISD",
    "Opcode": "66 0F 2F /r COMISD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare low double-precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/COMISD.html"
  },
  {
    "Mnemonic": "COMISS",
    "Opcode": "NP 0F 2F /r COMISS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/COMISS.html"
  },
  {
    "Mnemonic": "CVTDQ2PD",
    "Opcode": "F3 0F E6 /r CVTDQ2PD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed signed doubleword integers from xmm2/mem to two packed double-precision floating-point values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTDQ2PD.html"
  },
  {
    "Mnemonic": "CVTDQ2PS",
    "Opcode": "NP 0F 5B /r CVTDQ2PS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed signed doubleword integers from xmm2/mem to four packed single-precision floating-point values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTDQ2PS.html"
  },
  {
    "Mnemonic": "CVTPD2DQ",
    "Opcode": "F2 0F E6 /r CVTPD2DQ xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values in xmm2/mem to two signed doubleword integers in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTPD2DQ.html"
  },
  {
    "Mnemonic": "CVTPD2PS",
    "Opcode": "66 0F 5A /r CVTPD2PS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values in xmm2/mem to two single-precision floating-point values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTPD2PS.html"
  },
  {
    "Mnemonic": "CVTPS2DQ",
    "Opcode": "66 0F 5B /r CVTPS2DQ xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed single-precision floating-point values from xmm2/mem to four packed signed doubleword values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTPS2DQ.html"
  },
  {
    "Mnemonic": "CVTPS2PD",
    "Opcode": "NP 0F 5A /r CVTPS2PD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed single-precision floating-point values in xmm2/m64 to two packed double-precision floating-point values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTPS2PD.html"
  },
  {
    "Mnemonic": "CVTSD2SI",
    "Opcode": "F2 0F 2D /r CVTSD2SI r32, xmm1/m64",
    "64-bit Mode": "Valid",
    "Description": "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer r32.",
    "Know More": "https://www.felixcloutier.com/x86/CVTSD2SI.html"
  },
  {
    "Mnemonic": "CVTSD2SS",
    "Opcode": "F2 0F 5A /r CVTSD2SS xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Convert one double-precision floating-point value in xmm2/m64 to one single-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTSD2SS.html"
  },
  {
    "Mnemonic": "CVTSI2SD",
    "Opcode": "F2 0F 2A /r CVTSI2SD xmm1, r32/m32",
    "64-bit Mode": "Valid",
    "Description": "Convert one signed doubleword integer from r32/m32 to one double-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTSI2SD.html"
  },
  {
    "Mnemonic": "CVTSI2SS",
    "Opcode": "F3 0F 2A /r CVTSI2SS xmm1, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Convert one signed doubleword integer from r/m32 to one single-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTSI2SS.html"
  },
  {
    "Mnemonic": "CVTSS2SD",
    "Opcode": "F3 0F 5A /r CVTSS2SD xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Convert one single-precision floating-point value in xmm2/m32 to one double-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/CVTSS2SD.html"
  },
  {
    "Mnemonic": "CVTSS2SI",
    "Opcode": "F3 0F 2D /r CVTSS2SI r32, xmm1/m32",
    "64-bit Mode": "Valid",
    "Description": "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32.",
    "Know More": "https://www.felixcloutier.com/x86/CVTSS2SI.html"
  },
  {
    "Mnemonic": "CVTTPD2DQ",
    "Opcode": "66 0F E6 /r CVTTPD2DQ xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values in xmm2/mem to two signed doubleword integers in xmm1 using truncation.",
    "Know More": "https://www.felixcloutier.com/x86/CVTTPD2DQ.html"
  },
  {
    "Mnemonic": "CVTTPS2DQ",
    "Opcode": "F3 0F 5B /r CVTTPS2DQ xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed single-precision floating-point values from xmm2/mem to four packed signed doubleword values in xmm1 using truncation.",
    "Know More": "https://www.felixcloutier.com/x86/CVTTPS2DQ.html"
  },
  {
    "Mnemonic": "CVTTSD2SI",
    "Opcode": "F2 0F 2C /r CVTTSD2SI r32, xmm1/m64",
    "64-bit Mode": "Valid",
    "Description": "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer in r32 using truncation.",
    "Know More": "https://www.felixcloutier.com/x86/CVTTSD2SI.html"
  },
  {
    "Mnemonic": "CVTTSS2SI",
    "Opcode": "F3 0F 2C /r CVTTSS2SI r32, xmm1/m32",
    "64-bit Mode": "Valid",
    "Description": "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32 using truncation.",
    "Know More": "https://www.felixcloutier.com/x86/CVTTSS2SI.html"
  },
  {
    "Mnemonic": "CWDE",
    "Opcode": "98",
    "64-bit Mode": "Invalid",
    "Description": "AX \u2190 sign-extend of AL.",
    "Know More": "https://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html"
  },
  {
    "Mnemonic": "DIVPD",
    "Opcode": "66 0F 5E /r DIVPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Divide packed double-precision floating-point values in xmm1 by packed double-precision floating-point values in xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/DIVPD.html"
  },
  {
    "Mnemonic": "DIVPS",
    "Opcode": "NP 0F 5E /r DIVPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Divide packed single-precision floating-point values in xmm1 by packed single-precision floating-point values in xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/DIVPS.html"
  },
  {
    "Mnemonic": "DIVSD",
    "Opcode": "F2 0F 5E /r DIVSD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Divide low double-precision floating-point value in xmm1 by low double-precision floating-point value in xmm2/m64.",
    "Know More": "https://www.felixcloutier.com/x86/DIVSD.html"
  },
  {
    "Mnemonic": "DIVSS",
    "Opcode": "F3 0F 5E /r DIVSS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Divide low single-precision floating-point value in xmm1 by low single-precision floating-point value in xmm2/m32.",
    "Know More": "https://www.felixcloutier.com/x86/DIVSS.html"
  },
  {
    "Mnemonic": "DPPD",
    "Opcode": "66 0F 3A 41 /r ib DPPD xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Selectively multiply packed DP floating-point values from xmm1 with packed DP floating-point values from xmm2, add and selectively store the packed DP floating-point values to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/DPPD.html"
  },
  {
    "Mnemonic": "DPPS",
    "Opcode": "66 0F 3A 40 /r ib DPPS xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Selectively multiply packed SP floating-point values from xmm1 with packed SP floating-point values from xmm2, add and selectively store the packed SP floating-point values or zero values to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/DPPS.html"
  },
  {
    "Mnemonic": "EXTRACTPS",
    "Opcode": "66 0F 3A 17 /r ib EXTRACTPS reg/m32, xmm1, imm8",
    "64-bit Mode": "Invalid",
    "Description": "Extract one single-precision floating-point value from xmm1 at the offset specified by imm8 and store the result in reg or m32.",
    "Know More": "https://www.felixcloutier.com/x86/EXTRACTPS.html"
  },
  {
    "Mnemonic": "FXSAVE",
    "Opcode": "NP 0F AE /0 FXSAVE m512byte",
    "64-bit Mode": "Invalid",
    "Description": "Save the x87 FPU, MMX, XMM, and MXCSR register state to m512byte.",
    "Know More": "https://www.felixcloutier.com/x86/FXSAVE.html"
  },
  {
    "Mnemonic": "GF2P8AFFINEINVQB",
    "Opcode": "66 0F3A CF /r /ib GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Computes inverse affine transformation in the finite field GF(2^8).",
    "Know More": "https://www.felixcloutier.com/x86/GF2P8AFFINEINVQB.html"
  },
  {
    "Mnemonic": "GF2P8AFFINEQB",
    "Opcode": "66 0F3A CE /r /ib GF2P8AFFINEQB xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Computes affine transformation in the finite field GF(2^8).",
    "Know More": "https://www.felixcloutier.com/x86/GF2P8AFFINEQB.html"
  },
  {
    "Mnemonic": "GF2P8MULB",
    "Opcode": "66 0F38 CF /r GF2P8MULB xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiplies elements in the finite field GF(2^8).",
    "Know More": "https://www.felixcloutier.com/x86/GF2P8MULB.html"
  },
  {
    "Mnemonic": "HADDPD",
    "Opcode": "66 0F 7C /r HADDPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Horizontal add packed double-precision floating-point values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/HADDPD.html"
  },
  {
    "Mnemonic": "HADDPS",
    "Opcode": "F2 0F 7C /r HADDPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Horizontal add packed single-precision floating-point values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/HADDPS.html"
  },
  {
    "Mnemonic": "HSUBPD",
    "Opcode": "66 0F 7D /r HSUBPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Horizontal subtract packed double-precision floating-point values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/HSUBPD.html"
  },
  {
    "Mnemonic": "HSUBPS",
    "Opcode": "F2 0F 7D /r HSUBPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Horizontal subtract packed single-precision floating-point values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/HSUBPS.html"
  },
  {
    "Mnemonic": "INSERTPS",
    "Opcode": "66 0F 3A 21 /r ib INSERTPS xmm1, xmm2/m32, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert a single-precision floating-point value selected by imm8 from xmm2/m32 into xmm1 at the specified destination element specified by imm8 and zero out destination elements in xmm1 as indicated in imm8.",
    "Know More": "https://www.felixcloutier.com/x86/INSERTPS.html"
  },
  {
    "Mnemonic": "INVPCID",
    "Opcode": "66 0F 38 82 /r INVPCID r32, m128",
    "64-bit Mode": "Invalid",
    "Description": "Invalidates entries in the TLBs and paging-structure caches based on invalidation type in r32 and descriptor in m128.",
    "Know More": "https://www.felixcloutier.com/x86/INVPCID.html"
  },
  {
    "Mnemonic": "KADDB",
    "Opcode": "VEX.L1.0F.W0 4A /r KADDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Add 16 bits masks in k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html"
  },
  {
    "Mnemonic": "KADDD",
    "Opcode": "VEX.L1.0F.W0 4A /r KADDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Add 16 bits masks in k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html"
  },
  {
    "Mnemonic": "KADDQ",
    "Opcode": "VEX.L1.0F.W0 4A /r KADDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Add 16 bits masks in k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html"
  },
  {
    "Mnemonic": "KADDW",
    "Opcode": "VEX.L1.0F.W0 4A /r KADDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Add 16 bits masks in k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html"
  },
  {
    "Mnemonic": "KANDB",
    "Opcode": "VEX.L1.0F.W0 41 /r KANDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html"
  },
  {
    "Mnemonic": "KANDD",
    "Opcode": "VEX.L1.0F.W0 41 /r KANDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html"
  },
  {
    "Mnemonic": "KANDNB",
    "Opcode": "VEX.L1.0F.W0 42 /r KANDNW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND NOT 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html"
  },
  {
    "Mnemonic": "KANDND",
    "Opcode": "VEX.L1.0F.W0 42 /r KANDNW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND NOT 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html"
  },
  {
    "Mnemonic": "KANDNQ",
    "Opcode": "VEX.L1.0F.W0 42 /r KANDNW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND NOT 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html"
  },
  {
    "Mnemonic": "KANDNW",
    "Opcode": "VEX.L1.0F.W0 42 /r KANDNW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND NOT 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html"
  },
  {
    "Mnemonic": "KANDQ",
    "Opcode": "VEX.L1.0F.W0 41 /r KANDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html"
  },
  {
    "Mnemonic": "KANDW",
    "Opcode": "VEX.L1.0F.W0 41 /r KANDW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html"
  },
  {
    "Mnemonic": "KMOVB",
    "Opcode": "VEX.L0.0F.W0 90 /r KMOVW k1, k2/m16",
    "64-bit Mode": "Valid",
    "Description": "Move 16 bits mask from k2/m16 and store the result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html"
  },
  {
    "Mnemonic": "KMOVD",
    "Opcode": "VEX.L0.0F.W0 90 /r KMOVW k1, k2/m16",
    "64-bit Mode": "Valid",
    "Description": "Move 16 bits mask from k2/m16 and store the result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html"
  },
  {
    "Mnemonic": "KMOVQ",
    "Opcode": "VEX.L0.0F.W0 90 /r KMOVW k1, k2/m16",
    "64-bit Mode": "Valid",
    "Description": "Move 16 bits mask from k2/m16 and store the result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html"
  },
  {
    "Mnemonic": "KMOVW",
    "Opcode": "VEX.L0.0F.W0 90 /r KMOVW k1, k2/m16",
    "64-bit Mode": "Valid",
    "Description": "Move 16 bits mask from k2/m16 and store the result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html"
  },
  {
    "Mnemonic": "KNOTB",
    "Opcode": "VEX.L0.0F.W0 44 /r KNOTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NOT of 16 bits mask k2.",
    "Know More": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html"
  },
  {
    "Mnemonic": "KNOTD",
    "Opcode": "VEX.L0.0F.W0 44 /r KNOTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NOT of 16 bits mask k2.",
    "Know More": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html"
  },
  {
    "Mnemonic": "KNOTQ",
    "Opcode": "VEX.L0.0F.W0 44 /r KNOTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NOT of 16 bits mask k2.",
    "Know More": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html"
  },
  {
    "Mnemonic": "KNOTW",
    "Opcode": "VEX.L0.0F.W0 44 /r KNOTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NOT of 16 bits mask k2.",
    "Know More": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html"
  },
  {
    "Mnemonic": "KORB",
    "Opcode": "VEX.L1.0F.W0 45 /r KORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html"
  },
  {
    "Mnemonic": "KORD",
    "Opcode": "VEX.L1.0F.W0 45 /r KORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html"
  },
  {
    "Mnemonic": "KORQ",
    "Opcode": "VEX.L1.0F.W0 45 /r KORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html"
  },
  {
    "Mnemonic": "KORTESTB",
    "Opcode": "VEX.L0.0F.W0 98 /r KORTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k1 and k2 and update ZF and CF accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html"
  },
  {
    "Mnemonic": "KORTESTD",
    "Opcode": "VEX.L0.0F.W0 98 /r KORTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k1 and k2 and update ZF and CF accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html"
  },
  {
    "Mnemonic": "KORTESTQ",
    "Opcode": "VEX.L0.0F.W0 98 /r KORTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k1 and k2 and update ZF and CF accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html"
  },
  {
    "Mnemonic": "KORTESTW",
    "Opcode": "VEX.L0.0F.W0 98 /r KORTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k1 and k2 and update ZF and CF accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html"
  },
  {
    "Mnemonic": "KORW",
    "Opcode": "VEX.L1.0F.W0 45 /r KORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR 16 bits masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html"
  },
  {
    "Mnemonic": "KSHIFTLB",
    "Opcode": "VEX.L0.66.0F3A.W1 32 /r KSHIFTLW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift left 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html"
  },
  {
    "Mnemonic": "KSHIFTLD",
    "Opcode": "VEX.L0.66.0F3A.W1 32 /r KSHIFTLW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift left 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html"
  },
  {
    "Mnemonic": "KSHIFTLQ",
    "Opcode": "VEX.L0.66.0F3A.W1 32 /r KSHIFTLW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift left 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html"
  },
  {
    "Mnemonic": "KSHIFTLW",
    "Opcode": "VEX.L0.66.0F3A.W1 32 /r KSHIFTLW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift left 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html"
  },
  {
    "Mnemonic": "KSHIFTRB",
    "Opcode": "VEX.L0.66.0F3A.W1 30 /r KSHIFTRW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift right 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html"
  },
  {
    "Mnemonic": "KSHIFTRD",
    "Opcode": "VEX.L0.66.0F3A.W1 30 /r KSHIFTRW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift right 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html"
  },
  {
    "Mnemonic": "KSHIFTRQ",
    "Opcode": "VEX.L0.66.0F3A.W1 30 /r KSHIFTRW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift right 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html"
  },
  {
    "Mnemonic": "KSHIFTRW",
    "Opcode": "VEX.L0.66.0F3A.W1 30 /r KSHIFTRW k1, k2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift right 16 bits in k2 by immediate and write result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html"
  },
  {
    "Mnemonic": "KTESTB",
    "Opcode": "VEX.L0.0F.W0 99 /r KTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Set ZF and CF depending on sign bit AND and ANDN of 16 bits mask register sources.",
    "Know More": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html"
  },
  {
    "Mnemonic": "KTESTD",
    "Opcode": "VEX.L0.0F.W0 99 /r KTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Set ZF and CF depending on sign bit AND and ANDN of 16 bits mask register sources.",
    "Know More": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html"
  },
  {
    "Mnemonic": "KTESTQ",
    "Opcode": "VEX.L0.0F.W0 99 /r KTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Set ZF and CF depending on sign bit AND and ANDN of 16 bits mask register sources.",
    "Know More": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html"
  },
  {
    "Mnemonic": "KTESTW",
    "Opcode": "VEX.L0.0F.W0 99 /r KTESTW k1, k2",
    "64-bit Mode": "Valid",
    "Description": "Set ZF and CF depending on sign bit AND and ANDN of 16 bits mask register sources.",
    "Know More": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html"
  },
  {
    "Mnemonic": "KUNPCKBW",
    "Opcode": "VEX.L1.66.0F.W0 4B /r KUNPCKBW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Unpack 8-bit masks in k2 and k3 and write word result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KUNPCKBW:KUNPCKWD:KUNPCKDQ.html"
  },
  {
    "Mnemonic": "KUNPCKDQ",
    "Opcode": "VEX.L1.66.0F.W0 4B /r KUNPCKBW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Unpack 8-bit masks in k2 and k3 and write word result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KUNPCKBW:KUNPCKWD:KUNPCKDQ.html"
  },
  {
    "Mnemonic": "KUNPCKWD",
    "Opcode": "VEX.L1.66.0F.W0 4B /r KUNPCKBW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Unpack 8-bit masks in k2 and k3 and write word result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KUNPCKBW:KUNPCKWD:KUNPCKDQ.html"
  },
  {
    "Mnemonic": "KXNORB",
    "Opcode": "VEX.L1.0F.W0 46 /r KXNORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XNOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html"
  },
  {
    "Mnemonic": "KXNORD",
    "Opcode": "VEX.L1.0F.W0 46 /r KXNORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XNOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html"
  },
  {
    "Mnemonic": "KXNORQ",
    "Opcode": "VEX.L1.0F.W0 46 /r KXNORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XNOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html"
  },
  {
    "Mnemonic": "KXNORW",
    "Opcode": "VEX.L1.0F.W0 46 /r KXNORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XNOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html"
  },
  {
    "Mnemonic": "KXORB",
    "Opcode": "VEX.L1.0F.W0 47 /r KXORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html"
  },
  {
    "Mnemonic": "KXORD",
    "Opcode": "VEX.L1.0F.W0 47 /r KXORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html"
  },
  {
    "Mnemonic": "KXORQ",
    "Opcode": "VEX.L1.0F.W0 47 /r KXORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html"
  },
  {
    "Mnemonic": "KXORW",
    "Opcode": "VEX.L1.0F.W0 47 /r KXORW k1, k2, k3",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XOR 16-bit masks k2 and k3 and place result in k1.",
    "Know More": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html"
  },
  {
    "Mnemonic": "LDDQU",
    "Opcode": "F2 0F F0 /r LDDQU xmm1, mem",
    "64-bit Mode": "Valid",
    "Description": "Load unaligned data from mem and return double quadword in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/LDDQU.html"
  },
  {
    "Mnemonic": "LDMXCSR",
    "Opcode": "NP 0F AE /2 LDMXCSR m32",
    "64-bit Mode": "Valid",
    "Description": "Load MXCSR register from m32.",
    "Know More": "https://www.felixcloutier.com/x86/LDMXCSR.html"
  },
  {
    "Mnemonic": "LZCNT",
    "Opcode": "F3 0F BD /r",
    "64-bit Mode": "Valid",
    "Description": "Count the number of leading zero bits in r/m16, return result in r16.",
    "Know More": "https://www.felixcloutier.com/x86/LZCNT.html"
  },
  {
    "Mnemonic": "MASKMOVDQU",
    "Opcode": "66 0F F7 /r MASKMOVDQU xmm1, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Selectively write bytes from xmm1 to memory location using the byte mask in xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/MASKMOVDQU.html"
  },
  {
    "Mnemonic": "MAXPD",
    "Opcode": "66 0F 5F /r MAXPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the maximum double-precision floating-point values between xmm1 and xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/MAXPD.html"
  },
  {
    "Mnemonic": "MAXPS",
    "Opcode": "NP 0F 5F /r MAXPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the maximum single-precision floating-point values between xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/MAXPS.html"
  },
  {
    "Mnemonic": "MAXSD",
    "Opcode": "F2 0F 5F /r MAXSD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Return the maximum scalar double-precision floating-point value between xmm2/m64 and xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MAXSD.html"
  },
  {
    "Mnemonic": "MAXSS",
    "Opcode": "F3 0F 5F /r MAXSS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Return the maximum scalar single-precision floating-point value between xmm2/m32 and xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MAXSS.html"
  },
  {
    "Mnemonic": "MINPD",
    "Opcode": "66 0F 5D /r MINPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the minimum double-precision floating-point values between xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/MINPD.html"
  },
  {
    "Mnemonic": "MINPS",
    "Opcode": "NP 0F 5D /r MINPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the minimum single-precision floating-point values between xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/MINPS.html"
  },
  {
    "Mnemonic": "MINSD",
    "Opcode": "F2 0F 5D /r MINSD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Return the minimum scalar double-precision floating-point value between xmm2/m64 and xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MINSD.html"
  },
  {
    "Mnemonic": "MINSS",
    "Opcode": "F3 0F 5D /r MINSS xmm1,xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Return the minimum scalar single-precision floating-point value between xmm2/m32 and xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MINSS.html"
  },
  {
    "Mnemonic": "MOVAPD",
    "Opcode": "66 0F 28 /r MOVAPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move aligned packed double-precision floating-point values from xmm2/mem to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVAPD.html"
  },
  {
    "Mnemonic": "MOVAPS",
    "Opcode": "NP 0F 28 /r MOVAPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move aligned packed single-precision floating-point values from xmm2/mem to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVAPS.html"
  },
  {
    "Mnemonic": "MOVD",
    "Opcode": "NP 0F 6E /r MOVD mm, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Move doubleword from r/m32 to mm.",
    "Know More": "https://www.felixcloutier.com/x86/MOVD:MOVQ.html"
  },
  {
    "Mnemonic": "MOVDDUP",
    "Opcode": "F2 0F 12 /r MOVDDUP xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Move double-precision floating-point value from xmm2/m64 and duplicate into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDDUP.html"
  },
  {
    "Mnemonic": "MOVDIR64B",
    "Opcode": "66 0F 38 F8 /r MOVDIR64B r16/r32/r64, m512",
    "64-bit Mode": "Valid",
    "Description": "Move 64-bytes as direct-store with guaranteed 64-byte write atomicity from the source memory operand address to destination memory address specified as offset to ES segment in the register operand.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDIR64B.html"
  },
  {
    "Mnemonic": "MOVDIRI",
    "Opcode": "NP 0F 38 F9 /r MOVDIRI m32, r32",
    "64-bit Mode": "Valid",
    "Description": "Move doubleword from r32 to m32 using direct store.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDIRI.html"
  },
  {
    "Mnemonic": "MOVDQA",
    "Opcode": "66 0F 6F /r MOVDQA xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move aligned packed integer values from xmm2/mem to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQA:VMOVDQA32:VMOVDQA64.html"
  },
  {
    "Mnemonic": "MOVDQU",
    "Opcode": "F3 0F 6F /r MOVDQU xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move unaligned packed integer values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
  },
  {
    "Mnemonic": "MOVHLPS",
    "Opcode": "NP 0F 12 /r MOVHLPS xmm1, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Move two packed single-precision floating-point values from high quadword of xmm2 to low quadword of xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVHLPS.html"
  },
  {
    "Mnemonic": "MOVHPD",
    "Opcode": "66 0F 16 /r MOVHPD xmm1, m64",
    "64-bit Mode": "Valid",
    "Description": "Move double-precision floating-point value from m64 to high quadword of xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVHPD.html"
  },
  {
    "Mnemonic": "MOVHPS",
    "Opcode": "NP 0F 16 /r MOVHPS xmm1, m64",
    "64-bit Mode": "Valid",
    "Description": "Move two packed single-precision floating-point values from m64 to high quadword of xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVHPS.html"
  },
  {
    "Mnemonic": "MOVLHPS",
    "Opcode": "NP 0F 16 /r MOVLHPS xmm1, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Move two packed single-precision floating-point values from low quadword of xmm2 to high quadword of xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVLHPS.html"
  },
  {
    "Mnemonic": "MOVLPD",
    "Opcode": "66 0F 12 /r MOVLPD xmm1, m64",
    "64-bit Mode": "Valid",
    "Description": "Move double-precision floating-point value from m64 to low quadword of xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVLPD.html"
  },
  {
    "Mnemonic": "MOVLPS",
    "Opcode": "NP 0F 12 /r MOVLPS xmm1, m64",
    "64-bit Mode": "Valid",
    "Description": "Move two packed single-precision floating-point values from m64 to low quadword of xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVLPS.html"
  },
  {
    "Mnemonic": "MOVMSKPD",
    "Opcode": "66 0F 50 /r MOVMSKPD reg, xmm",
    "64-bit Mode": "Valid",
    "Description": "Extract 2-bit sign mask from xmm and store in reg.",
    "Know More": "https://www.felixcloutier.com/x86/MOVMSKPD.html"
  },
  {
    "Mnemonic": "MOVMSKPS",
    "Opcode": "NP 0F 50 /r MOVMSKPS reg, xmm",
    "64-bit Mode": "Valid",
    "Description": "Extract 4-bit sign mask from xmm and store in reg.",
    "Know More": "https://www.felixcloutier.com/x86/MOVMSKPS.html"
  },
  {
    "Mnemonic": "MOVNTDQ",
    "Opcode": "66 0F E7 /r MOVNTDQ m128, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Move packed integer values in xmm1 to m128 using non-temporal hint.",
    "Know More": "https://www.felixcloutier.com/x86/MOVNTDQ.html"
  },
  {
    "Mnemonic": "MOVNTDQA",
    "Opcode": "66 0F 38 2A /r MOVNTDQA xmm1, m128",
    "64-bit Mode": "Valid",
    "Description": "Move double quadword from m128 to xmm1 using non-temporal hint if WC memory type.",
    "Know More": "https://www.felixcloutier.com/x86/MOVNTDQA.html"
  },
  {
    "Mnemonic": "MOVNTPD",
    "Opcode": "66 0F 2B /r MOVNTPD m128, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Move packed double-precision values in xmm1 to m128 using non-temporal hint.",
    "Know More": "https://www.felixcloutier.com/x86/MOVNTPD.html"
  },
  {
    "Mnemonic": "MOVNTPS",
    "Opcode": "NP 0F 2B /r MOVNTPS m128, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Move packed single-precision values xmm1 to mem using non-temporal hint.",
    "Know More": "https://www.felixcloutier.com/x86/MOVNTPS.html"
  },
  {
    "Mnemonic": "MOVQ",
    "Opcode": "NP 0F 6E /r MOVD mm, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Move doubleword from r/m32 to mm.",
    "Know More": "https://www.felixcloutier.com/x86/MOVD:MOVQ.html"
  },
  {
    "Mnemonic": "MOVQ",
    "Opcode": "NP 0F 6F /r MOVQ mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Move quadword from mm/m64 to mm.",
    "Know More": "https://www.felixcloutier.com/x86/MOVQ.html"
  },
  {
    "Mnemonic": "MOVSD",
    "Opcode": "F2 0F 10 /r MOVSD xmm1, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Move scalar double-precision floating-point value from xmm2 to xmm1 register.",
    "Know More": "https://www.felixcloutier.com/x86/MOVSD.html"
  },
  {
    "Mnemonic": "MOVSHDUP",
    "Opcode": "F3 0F 16 /r MOVSHDUP xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move odd index single-precision floating-point values from xmm2/mem and duplicate each element into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVSHDUP.html"
  },
  {
    "Mnemonic": "MOVSLDUP",
    "Opcode": "F3 0F 12 /r MOVSLDUP xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move even index single-precision floating-point values from xmm2/mem and duplicate each element into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVSLDUP.html"
  },
  {
    "Mnemonic": "MOVSS",
    "Opcode": "F3 0F 10 /r MOVSS xmm1, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Merge scalar single-precision floating-point value from xmm2 to xmm1 register.",
    "Know More": "https://www.felixcloutier.com/x86/MOVSS.html"
  },
  {
    "Mnemonic": "MOVUPD",
    "Opcode": "66 0F 10 /r MOVUPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move unaligned packed double-precision floating-point from xmm2/mem to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVUPD.html"
  },
  {
    "Mnemonic": "MOVUPS",
    "Opcode": "NP 0F 10 /r MOVUPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move unaligned packed single-precision floating-point from xmm2/mem to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVUPS.html"
  },
  {
    "Mnemonic": "MPSADBW",
    "Opcode": "66 0F 3A 42 /r ib MPSADBW xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in xmm1 and xmm2/m128 and writes the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MPSADBW.html"
  },
  {
    "Mnemonic": "MULPD",
    "Opcode": "66 0F 59 /r MULPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values in xmm2/m128 with xmm1 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MULPD.html"
  },
  {
    "Mnemonic": "MULPS",
    "Opcode": "NP 0F 59 /r MULPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values in xmm2/m128 with xmm1 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MULPS.html"
  },
  {
    "Mnemonic": "MULSD",
    "Opcode": "F2 0F 59 /r MULSD xmm1,xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply the low double-precision floating-point value in xmm2/m64 by low double-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MULSD.html"
  },
  {
    "Mnemonic": "MULSS",
    "Opcode": "F3 0F 59 /r MULSS xmm1,xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply the low single-precision floating-point value in xmm2/m32 by the low single-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MULSS.html"
  },
  {
    "Mnemonic": "MULX",
    "Opcode": "VEX.LZ.F2.0F38.W0 F6 /r MULX r32a, r32b, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Unsigned multiply of r/m32 with EDX without affecting arithmetic flags.",
    "Know More": "https://www.felixcloutier.com/x86/MULX.html"
  },
  {
    "Mnemonic": "ORPD",
    "Opcode": "66 0F 56/r ORPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical OR of packed double-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/ORPD.html"
  },
  {
    "Mnemonic": "ORPS",
    "Opcode": "NP 0F 56 /r ORPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical OR of packed single-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/ORPS.html"
  },
  {
    "Mnemonic": "PABSB",
    "Opcode": "NP 0F 38 1C /r1 PABSB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
  },
  {
    "Mnemonic": "PABSD",
    "Opcode": "NP 0F 38 1C /r1 PABSB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
  },
  {
    "Mnemonic": "PABSQ",
    "Opcode": "NP 0F 38 1C /r1 PABSB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
  },
  {
    "Mnemonic": "PABSW",
    "Opcode": "NP 0F 38 1C /r1 PABSB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
  },
  {
    "Mnemonic": "PACKSSDW",
    "Opcode": "NP 0F 63 /r1 PACKSSWB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed signed word integers from mm1 and from mm2/m64 into 8 packed signed byte integers in mm1 using signed saturation.",
    "Know More": "https://www.felixcloutier.com/x86/PACKSSWB:PACKSSDW.html"
  },
  {
    "Mnemonic": "PACKSSWB",
    "Opcode": "NP 0F 63 /r1 PACKSSWB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed signed word integers from mm1 and from mm2/m64 into 8 packed signed byte integers in mm1 using signed saturation.",
    "Know More": "https://www.felixcloutier.com/x86/PACKSSWB:PACKSSDW.html"
  },
  {
    "Mnemonic": "PACKUSDW",
    "Opcode": "66 0F 38 2B /r PACKUSDW xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Convert 4 packed signed doubleword integers from xmm1 and 4 packed signed doubleword integers from xmm2/m128 into 8 packed unsigned word integers in xmm1 using unsigned saturation.",
    "Know More": "https://www.felixcloutier.com/x86/PACKUSDW.html"
  },
  {
    "Mnemonic": "PACKUSWB",
    "Opcode": "NP 0F 67 /r1 PACKUSWB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 signed word integers from mm and 4 signed word integers from mm/m64 into 8 unsigned byte integers in mm using unsigned saturation.",
    "Know More": "https://www.felixcloutier.com/x86/PACKUSWB.html"
  },
  {
    "Mnemonic": "PADDB",
    "Opcode": "NP 0F FC /r1 PADDB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed byte integers from mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
  },
  {
    "Mnemonic": "PADDD",
    "Opcode": "NP 0F FC /r1 PADDB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed byte integers from mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
  },
  {
    "Mnemonic": "PADDQ",
    "Opcode": "NP 0F FC /r1 PADDB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed byte integers from mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
  },
  {
    "Mnemonic": "PADDSB",
    "Opcode": "NP 0F EC /r1 PADDSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed signed byte integers from mm/m64 and mm and saturate the results.",
    "Know More": "https://www.felixcloutier.com/x86/PADDSB:PADDSW.html"
  },
  {
    "Mnemonic": "PADDSW",
    "Opcode": "NP 0F EC /r1 PADDSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed signed byte integers from mm/m64 and mm and saturate the results.",
    "Know More": "https://www.felixcloutier.com/x86/PADDSB:PADDSW.html"
  },
  {
    "Mnemonic": "PADDUSB",
    "Opcode": "NP 0F DC /r1 PADDUSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed unsigned byte integers from mm/m64 and mm and saturate the results.",
    "Know More": "https://www.felixcloutier.com/x86/PADDUSB:PADDUSW.html"
  },
  {
    "Mnemonic": "PADDUSW",
    "Opcode": "NP 0F DC /r1 PADDUSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed unsigned byte integers from mm/m64 and mm and saturate the results.",
    "Know More": "https://www.felixcloutier.com/x86/PADDUSB:PADDUSW.html"
  },
  {
    "Mnemonic": "PADDW",
    "Opcode": "NP 0F FC /r1 PADDB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Add packed byte integers from mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
  },
  {
    "Mnemonic": "PALIGNR",
    "Opcode": "NP 0F 3A 0F /r ib1 PALIGNR mm1, mm2/m64, imm8",
    "64-bit Mode": "Valid",
    "Description": "Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PALIGNR.html"
  },
  {
    "Mnemonic": "PAND",
    "Opcode": "NP 0F DB /r1 PAND mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/PAND.html"
  },
  {
    "Mnemonic": "PANDN",
    "Opcode": "NP 0F DF /r1 PANDN mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND NOT of mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/PANDN.html"
  },
  {
    "Mnemonic": "PAVGB",
    "Opcode": "NP 0F E0 /r1 PAVGB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Average packed unsigned byte integers from mm2/m64 and mm1 with rounding.",
    "Know More": "https://www.felixcloutier.com/x86/PAVGB:PAVGW.html"
  },
  {
    "Mnemonic": "PAVGW",
    "Opcode": "NP 0F E0 /r1 PAVGB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Average packed unsigned byte integers from mm2/m64 and mm1 with rounding.",
    "Know More": "https://www.felixcloutier.com/x86/PAVGB:PAVGW.html"
  },
  {
    "Mnemonic": "PBLENDVB",
    "Opcode": "66 0F 38 10 /r PBLENDVB xmm1, xmm2/m128, <XMM0>",
    "64-bit Mode": "Valid",
    "Description": "Select byte values from xmm1 and xmm2/m128 from mask specified in the high bit of each byte in XMM0 and store the values into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PBLENDVB.html"
  },
  {
    "Mnemonic": "PBLENDW",
    "Opcode": "66 0F 3A 0E /r ib PBLENDW xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Select words from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PBLENDW.html"
  },
  {
    "Mnemonic": "PCLMULQDQ",
    "Opcode": "66 0F 3A 44 /r ib PCLMULQDQ xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Carry-less multiplication of one quadword of xmm1 by one quadword of xmm2/m128, stores the 128-bit result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PCLMULQDQ.html"
  },
  {
    "Mnemonic": "PCMPEQB",
    "Opcode": "NP 0F 74 /r1 PCMPEQB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare packed bytes in mm/m64 and mm for equality.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPEQB:PCMPEQW:PCMPEQD.html"
  },
  {
    "Mnemonic": "PCMPEQD",
    "Opcode": "NP 0F 74 /r1 PCMPEQB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare packed bytes in mm/m64 and mm for equality.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPEQB:PCMPEQW:PCMPEQD.html"
  },
  {
    "Mnemonic": "PCMPEQQ",
    "Opcode": "66 0F 38 29 /r PCMPEQQ xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed qwords in xmm2/m128 and xmm1 for equality.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPEQQ.html"
  },
  {
    "Mnemonic": "PCMPEQW",
    "Opcode": "NP 0F 74 /r1 PCMPEQB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare packed bytes in mm/m64 and mm for equality.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPEQB:PCMPEQW:PCMPEQD.html"
  },
  {
    "Mnemonic": "PCMPESTRI",
    "Opcode": "66 0F 3A 61 /r imm8 PCMPESTRI xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in ECX.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPESTRI.html"
  },
  {
    "Mnemonic": "PCMPESTRM",
    "Opcode": "66 0F 3A 60 /r imm8 PCMPESTRM xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in XMM0.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPESTRM.html"
  },
  {
    "Mnemonic": "PCMPGTB",
    "Opcode": "NP 0F 64 /r1 PCMPGTB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed byte integers in mm and mm/m64 for greater than.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPGTB:PCMPGTW:PCMPGTD.html"
  },
  {
    "Mnemonic": "PCMPGTD",
    "Opcode": "NP 0F 64 /r1 PCMPGTB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed byte integers in mm and mm/m64 for greater than.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPGTB:PCMPGTW:PCMPGTD.html"
  },
  {
    "Mnemonic": "PCMPGTQ",
    "Opcode": "66 0F 38 37 /r PCMPGTQ xmm1,xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed qwords in xmm2/m128 and xmm1 for greater than.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPGTQ.html"
  },
  {
    "Mnemonic": "PCMPGTW",
    "Opcode": "NP 0F 64 /r1 PCMPGTB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed byte integers in mm and mm/m64 for greater than.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPGTB:PCMPGTW:PCMPGTD.html"
  },
  {
    "Mnemonic": "PCMPISTRI",
    "Opcode": "66 0F 3A 63 /r imm8 PCMPISTRI xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in ECX.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPISTRI.html"
  },
  {
    "Mnemonic": "PCMPISTRM",
    "Opcode": "66 0F 3A 62 /r imm8 PCMPISTRM xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Perform a packed comparison of string data with implicit lengths, generating a mask, and storing the result in XMM0.",
    "Know More": "https://www.felixcloutier.com/x86/PCMPISTRM.html"
  },
  {
    "Mnemonic": "PDEP",
    "Opcode": "VEX.LZ.F2.0F38.W0 F5 /r PDEP r32a, r32b, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Parallel deposit of bits from r32b using mask in r/m32, result is written to r32a.",
    "Know More": "https://www.felixcloutier.com/x86/PDEP.html"
  },
  {
    "Mnemonic": "PEXT",
    "Opcode": "VEX.LZ.F3.0F38.W0 F5 /r PEXT r32a, r32b, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Parallel extract of bits from r32b using mask in r/m32, result is written to r32a.",
    "Know More": "https://www.felixcloutier.com/x86/PEXT.html"
  },
  {
    "Mnemonic": "PEXTRB",
    "Opcode": "66 0F 3A 14 /r ib PEXTRB reg/m8, xmm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into reg or m8.",
    "Know More": "https://www.felixcloutier.com/x86/PEXTRB:PEXTRD:PEXTRQ.html"
  },
  {
    "Mnemonic": "PEXTRD",
    "Opcode": "66 0F 3A 14 /r ib PEXTRB reg/m8, xmm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into reg or m8.",
    "Know More": "https://www.felixcloutier.com/x86/PEXTRB:PEXTRD:PEXTRQ.html"
  },
  {
    "Mnemonic": "PEXTRQ",
    "Opcode": "66 0F 3A 14 /r ib PEXTRB reg/m8, xmm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into reg or m8.",
    "Know More": "https://www.felixcloutier.com/x86/PEXTRB:PEXTRD:PEXTRQ.html"
  },
  {
    "Mnemonic": "PEXTRW",
    "Opcode": "NP 0F C5 /r ib1 PEXTRW reg, mm, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract the word specified by imm8 from mm and move it to reg, bits 15-0.",
    "Know More": "https://www.felixcloutier.com/x86/PEXTRW.html"
  },
  {
    "Mnemonic": "PHADDD",
    "Opcode": "NP 0F 38 01 /r1 PHADDW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Add 16-bit integers horizontally, pack to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PHADDW:PHADDD.html"
  },
  {
    "Mnemonic": "PHADDSW",
    "Opcode": "NP 0F 38 03 /r1 PHADDSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Add 16-bit signed integers horizontally, pack saturated integers to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PHADDSW.html"
  },
  {
    "Mnemonic": "PHADDW",
    "Opcode": "NP 0F 38 01 /r1 PHADDW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Add 16-bit integers horizontally, pack to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PHADDW:PHADDD.html"
  },
  {
    "Mnemonic": "PHMINPOSUW",
    "Opcode": "66 0F 38 41 /r PHMINPOSUW xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the second-lowest word of xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PHMINPOSUW.html"
  },
  {
    "Mnemonic": "PHSUBD",
    "Opcode": "NP 0F 38 05 /r1 PHSUBW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract 16-bit signed integers horizontally, pack to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PHSUBW:PHSUBD.html"
  },
  {
    "Mnemonic": "PHSUBSW",
    "Opcode": "NP 0F 38 07 /r1 PHSUBSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract 16-bit signed integer horizontally, pack saturated integers to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PHSUBSW.html"
  },
  {
    "Mnemonic": "PHSUBW",
    "Opcode": "NP 0F 38 05 /r1 PHSUBW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract 16-bit signed integers horizontally, pack to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PHSUBW:PHSUBD.html"
  },
  {
    "Mnemonic": "PINSRB",
    "Opcode": "66 0F 3A 20 /r ib PINSRB xmm1, r32/m8, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert a byte integer value from r32/m8 into xmm1 at the destination element in xmm1 specified by imm8.",
    "Know More": "https://www.felixcloutier.com/x86/PINSRB:PINSRD:PINSRQ.html"
  },
  {
    "Mnemonic": "PINSRD",
    "Opcode": "66 0F 3A 20 /r ib PINSRB xmm1, r32/m8, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert a byte integer value from r32/m8 into xmm1 at the destination element in xmm1 specified by imm8.",
    "Know More": "https://www.felixcloutier.com/x86/PINSRB:PINSRD:PINSRQ.html"
  },
  {
    "Mnemonic": "PINSRQ",
    "Opcode": "66 0F 3A 20 /r ib PINSRB xmm1, r32/m8, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert a byte integer value from r32/m8 into xmm1 at the destination element in xmm1 specified by imm8.",
    "Know More": "https://www.felixcloutier.com/x86/PINSRB:PINSRD:PINSRQ.html"
  },
  {
    "Mnemonic": "PINSRW",
    "Opcode": "NP 0F C4 /r ib1 PINSRW mm, r32/m16, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert the low word from r32 or from m16 into mm at the word position specified by imm8.",
    "Know More": "https://www.felixcloutier.com/x86/PINSRW.html"
  },
  {
    "Mnemonic": "PMADDUBSW",
    "Opcode": "NP 0F 38 04 /r1 PMADDUBSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMADDUBSW.html"
  },
  {
    "Mnemonic": "PMADDWD",
    "Opcode": "NP 0F F5 /r1 PMADDWD mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply the packed words in mm by the packed words in mm/m64, add adjacent doubleword results, and store in mm.",
    "Know More": "https://www.felixcloutier.com/x86/PMADDWD.html"
  },
  {
    "Mnemonic": "PMAXSB",
    "Opcode": "NP 0F EE /r1 PMAXSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare signed word integers in mm2/m64 and mm1 and return maximum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
  },
  {
    "Mnemonic": "PMAXSD",
    "Opcode": "NP 0F EE /r1 PMAXSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare signed word integers in mm2/m64 and mm1 and return maximum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
  },
  {
    "Mnemonic": "PMAXSQ",
    "Opcode": "NP 0F EE /r1 PMAXSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare signed word integers in mm2/m64 and mm1 and return maximum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
  },
  {
    "Mnemonic": "PMAXSW",
    "Opcode": "NP 0F EE /r1 PMAXSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare signed word integers in mm2/m64 and mm1 and return maximum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
  },
  {
    "Mnemonic": "PMAXUB",
    "Opcode": "NP 0F DE /r1 PMAXUB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare unsigned byte integers in mm2/m64 and mm1 and returns maximum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXUB:PMAXUW.html"
  },
  {
    "Mnemonic": "PMAXUD",
    "Opcode": "66 0F 38 3F /r PMAXUD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXUD:PMAXUQ.html"
  },
  {
    "Mnemonic": "PMAXUQ",
    "Opcode": "66 0F 38 3F /r PMAXUD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXUD:PMAXUQ.html"
  },
  {
    "Mnemonic": "PMAXUW",
    "Opcode": "NP 0F DE /r1 PMAXUB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare unsigned byte integers in mm2/m64 and mm1 and returns maximum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMAXUB:PMAXUW.html"
  },
  {
    "Mnemonic": "PMINSB",
    "Opcode": "NP 0F EA /r1 PMINSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare signed word integers in mm2/m64 and mm1 and return minimum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMINSB:PMINSW.html"
  },
  {
    "Mnemonic": "PMINSD",
    "Opcode": "66 0F 38 39 /r PMINSD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMINSD:PMINSQ.html"
  },
  {
    "Mnemonic": "PMINSQ",
    "Opcode": "66 0F 38 39 /r PMINSD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMINSD:PMINSQ.html"
  },
  {
    "Mnemonic": "PMINSW",
    "Opcode": "NP 0F EA /r1 PMINSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare signed word integers in mm2/m64 and mm1 and return minimum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMINSB:PMINSW.html"
  },
  {
    "Mnemonic": "PMINUB",
    "Opcode": "NP 0F DA /r1 PMINUB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare unsigned byte integers in mm2/m64 and mm1 and returns minimum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMINUB:PMINUW.html"
  },
  {
    "Mnemonic": "PMINUD",
    "Opcode": "66 0F 38 3B /r PMINUD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMINUD:PMINUQ.html"
  },
  {
    "Mnemonic": "PMINUQ",
    "Opcode": "66 0F 38 3B /r PMINUD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMINUD:PMINUQ.html"
  },
  {
    "Mnemonic": "PMINUW",
    "Opcode": "NP 0F DA /r1 PMINUB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare unsigned byte integers in mm2/m64 and mm1 and returns minimum values.",
    "Know More": "https://www.felixcloutier.com/x86/PMINUB:PMINUW.html"
  },
  {
    "Mnemonic": "PMOVMSKB",
    "Opcode": "NP 0F D7 /r1 PMOVMSKB reg, mm",
    "64-bit Mode": "Valid",
    "Description": "Move a byte mask of mm to reg.",
    "Know More": "https://www.felixcloutier.com/x86/PMOVMSKB.html"
  },
  {
    "Mnemonic": "PMOVSX",
    "Opcode": "66 0f 38 20 /r PMOVSXBW xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Sign extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMOVSX.html"
  },
  {
    "Mnemonic": "PMOVZX",
    "Opcode": "66 0f 38 30 /r PMOVZXBW xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMOVZX.html"
  },
  {
    "Mnemonic": "PMULDQ",
    "Opcode": "66 0F 38 28 /r PMULDQ xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed signed doubleword integers in xmm1 by packed signed doubleword integers in xmm2/m128, and store the quadword results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULDQ.html"
  },
  {
    "Mnemonic": "PMULHRSW",
    "Opcode": "NP 0F 38 0B /r1 PMULHRSW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULHRSW.html"
  },
  {
    "Mnemonic": "PMULHUW",
    "Opcode": "NP 0F E4 /r1 PMULHUW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply the packed unsigned word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULHUW.html"
  },
  {
    "Mnemonic": "PMULHW",
    "Opcode": "NP 0F E5 /r1 PMULHW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply the packed signed word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULHW.html"
  },
  {
    "Mnemonic": "PMULLD",
    "Opcode": "66 0F 38 40 /r PMULLD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply the packed dword signed integers in xmm1 and xmm2/m128 and store the low 32 bits of each product in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULLD:PMULLQ.html"
  },
  {
    "Mnemonic": "PMULLQ",
    "Opcode": "66 0F 38 40 /r PMULLD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply the packed dword signed integers in xmm1 and xmm2/m128 and store the low 32 bits of each product in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULLD:PMULLQ.html"
  },
  {
    "Mnemonic": "PMULLW",
    "Opcode": "NP 0F D5 /r1 PMULLW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply the packed signed word integers in mm1 register and mm2/m64, and store the low 16 bits of the results in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULLW.html"
  },
  {
    "Mnemonic": "PMULUDQ",
    "Opcode": "NP 0F F4 /r1 PMULUDQ mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply unsigned doubleword integer in mm1 by unsigned doubleword integer in mm2/m64, and store the quadword result in mm1.",
    "Know More": "https://www.felixcloutier.com/x86/PMULUDQ.html"
  },
  {
    "Mnemonic": "POR",
    "Opcode": "NP 0F EB /r1 POR mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Bitwise OR of mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/POR.html"
  },
  {
    "Mnemonic": "PREFETCHW",
    "Opcode": "0F 0D /1 PREFETCHW m8",
    "64-bit Mode": "Valid",
    "Description": "Move data from m8 closer to the processor in anticipation of a write.",
    "Know More": "https://www.felixcloutier.com/x86/PREFETCHW.html"
  },
  {
    "Mnemonic": "PSADBW",
    "Opcode": "NP 0F F6 /r1 PSADBW mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Computes the absolute differences of the packed unsigned byte integers from mm2 /m64 and mm1; differences are then summed to produce an unsigned word integer result.",
    "Know More": "https://www.felixcloutier.com/x86/PSADBW.html"
  },
  {
    "Mnemonic": "PSHUFB",
    "Opcode": "NP 0F 38 00 /r1 PSHUFB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Shuffle bytes in mm1 according to contents of mm2/m64.",
    "Know More": "https://www.felixcloutier.com/x86/PSHUFB.html"
  },
  {
    "Mnemonic": "PSHUFD",
    "Opcode": "66 0F 70 /r ib PSHUFD xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle the doublewords in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PSHUFD.html"
  },
  {
    "Mnemonic": "PSHUFHW",
    "Opcode": "F3 0F 70 /r ib PSHUFHW xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PSHUFHW.html"
  },
  {
    "Mnemonic": "PSHUFLW",
    "Opcode": "F2 0F 70 /r ib PSHUFLW xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/PSHUFLW.html"
  },
  {
    "Mnemonic": "PSIGNB",
    "Opcode": "NP 0F 38 08 /r1 PSIGNB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Negate/zero/preserve packed byte integers in mm1 depending on the corresponding sign in mm2/m64.",
    "Know More": "https://www.felixcloutier.com/x86/PSIGNB:PSIGNW:PSIGND.html"
  },
  {
    "Mnemonic": "PSIGND",
    "Opcode": "NP 0F 38 08 /r1 PSIGNB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Negate/zero/preserve packed byte integers in mm1 depending on the corresponding sign in mm2/m64.",
    "Know More": "https://www.felixcloutier.com/x86/PSIGNB:PSIGNW:PSIGND.html"
  },
  {
    "Mnemonic": "PSIGNW",
    "Opcode": "NP 0F 38 08 /r1 PSIGNB mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Negate/zero/preserve packed byte integers in mm1 depending on the corresponding sign in mm2/m64.",
    "Know More": "https://www.felixcloutier.com/x86/PSIGNB:PSIGNW:PSIGND.html"
  },
  {
    "Mnemonic": "PSLLD",
    "Opcode": "NP 0F F1 /r1 PSLLW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm left mm/m64 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSLLW:PSLLD:PSLLQ.html"
  },
  {
    "Mnemonic": "PSLLDQ",
    "Opcode": "66 0F 73 /7 ib PSLLDQ xmm1, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift xmm1 left by imm8 bytes while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSLLDQ.html"
  },
  {
    "Mnemonic": "PSLLQ",
    "Opcode": "NP 0F F1 /r1 PSLLW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm left mm/m64 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSLLW:PSLLD:PSLLQ.html"
  },
  {
    "Mnemonic": "PSLLW",
    "Opcode": "NP 0F F1 /r1 PSLLW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm left mm/m64 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSLLW:PSLLD:PSLLQ.html"
  },
  {
    "Mnemonic": "PSRAD",
    "Opcode": "NP 0F E1 /r1 PSRAW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm right by mm/m64 while shifting in sign bits.",
    "Know More": "https://www.felixcloutier.com/x86/PSRAW:PSRAD:PSRAQ.html"
  },
  {
    "Mnemonic": "PSRAQ",
    "Opcode": "NP 0F E1 /r1 PSRAW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm right by mm/m64 while shifting in sign bits.",
    "Know More": "https://www.felixcloutier.com/x86/PSRAW:PSRAD:PSRAQ.html"
  },
  {
    "Mnemonic": "PSRAW",
    "Opcode": "NP 0F E1 /r1 PSRAW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm right by mm/m64 while shifting in sign bits.",
    "Know More": "https://www.felixcloutier.com/x86/PSRAW:PSRAD:PSRAQ.html"
  },
  {
    "Mnemonic": "PSRLD",
    "Opcode": "NP 0F D1 /r1 PSRLW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm right by amount specified in mm/m64 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSRLW:PSRLD:PSRLQ.html"
  },
  {
    "Mnemonic": "PSRLDQ",
    "Opcode": "66 0F 73 /3 ib PSRLDQ xmm1, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift xmm1 right by imm8 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSRLDQ.html"
  },
  {
    "Mnemonic": "PSRLQ",
    "Opcode": "NP 0F D1 /r1 PSRLW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm right by amount specified in mm/m64 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSRLW:PSRLD:PSRLQ.html"
  },
  {
    "Mnemonic": "PSRLW",
    "Opcode": "NP 0F D1 /r1 PSRLW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Shift words in mm right by amount specified in mm/m64 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PSRLW:PSRLD:PSRLQ.html"
  },
  {
    "Mnemonic": "PSUBB",
    "Opcode": "NP 0F F8 /r1 PSUBB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract packed byte integers in mm/m64 from packed byte integers in mm.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBB:PSUBW:PSUBD.html"
  },
  {
    "Mnemonic": "PSUBD",
    "Opcode": "NP 0F F8 /r1 PSUBB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract packed byte integers in mm/m64 from packed byte integers in mm.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBB:PSUBW:PSUBD.html"
  },
  {
    "Mnemonic": "PSUBQ",
    "Opcode": "NP 0F FB /r1 PSUBQ mm1, mm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract quadword integer in mm1 from mm2 /m64.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBQ.html"
  },
  {
    "Mnemonic": "PSUBSB",
    "Opcode": "NP 0F E8 /r1 PSUBSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract signed packed bytes in mm/m64 from signed packed bytes in mm and saturate results.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBSB:PSUBSW.html"
  },
  {
    "Mnemonic": "PSUBSW",
    "Opcode": "NP 0F E8 /r1 PSUBSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract signed packed bytes in mm/m64 from signed packed bytes in mm and saturate results.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBSB:PSUBSW.html"
  },
  {
    "Mnemonic": "PSUBUSB",
    "Opcode": "NP 0F D8 /r1 PSUBUSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract unsigned packed bytes in mm/m64 from unsigned packed bytes in mm and saturate result.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBUSB:PSUBUSW.html"
  },
  {
    "Mnemonic": "PSUBUSW",
    "Opcode": "NP 0F D8 /r1 PSUBUSB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract unsigned packed bytes in mm/m64 from unsigned packed bytes in mm and saturate result.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBUSB:PSUBUSW.html"
  },
  {
    "Mnemonic": "PSUBW",
    "Opcode": "NP 0F F8 /r1 PSUBB mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract packed byte integers in mm/m64 from packed byte integers in mm.",
    "Know More": "https://www.felixcloutier.com/x86/PSUBB:PSUBW:PSUBD.html"
  },
  {
    "Mnemonic": "PTEST",
    "Opcode": "66 0F 38 17 /r PTEST xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Set ZF if xmm2/m128 AND xmm1 result is all 0s.",
    "Know More": "https://www.felixcloutier.com/x86/PTEST.html"
  },
  {
    "Mnemonic": "PTWRITE",
    "Opcode": "F3 REX.W 0F AE /4 PTWRITE r64/m64",
    "64-bit Mode": "Valid",
    "Description": "Reads the data from r64/m64 to encode into a PTW packet if dependencies are met (see details below).",
    "Know More": "https://www.felixcloutier.com/x86/PTWRITE.html"
  },
  {
    "Mnemonic": "PUNPCKHBW",
    "Opcode": "NP 0F 68 /r1 PUNPCKHBW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Unpack and interleave high-order bytes from mm and mm/m64 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
  },
  {
    "Mnemonic": "PUNPCKHDQ",
    "Opcode": "NP 0F 68 /r1 PUNPCKHBW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Unpack and interleave high-order bytes from mm and mm/m64 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
  },
  {
    "Mnemonic": "PUNPCKHQDQ",
    "Opcode": "NP 0F 68 /r1 PUNPCKHBW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Unpack and interleave high-order bytes from mm and mm/m64 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
  },
  {
    "Mnemonic": "PUNPCKHWD",
    "Opcode": "NP 0F 68 /r1 PUNPCKHBW mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Unpack and interleave high-order bytes from mm and mm/m64 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
  },
  {
    "Mnemonic": "PUNPCKLBW",
    "Opcode": "NP 0F 60 /r1 PUNPCKLBW mm, mm/m32",
    "64-bit Mode": "Valid",
    "Description": "Interleave low-order bytes from mm and mm/m32 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
  },
  {
    "Mnemonic": "PUNPCKLDQ",
    "Opcode": "NP 0F 60 /r1 PUNPCKLBW mm, mm/m32",
    "64-bit Mode": "Valid",
    "Description": "Interleave low-order bytes from mm and mm/m32 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
  },
  {
    "Mnemonic": "PUNPCKLQDQ",
    "Opcode": "NP 0F 60 /r1 PUNPCKLBW mm, mm/m32",
    "64-bit Mode": "Valid",
    "Description": "Interleave low-order bytes from mm and mm/m32 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
  },
  {
    "Mnemonic": "PUNPCKLWD",
    "Opcode": "NP 0F 60 /r1 PUNPCKLBW mm, mm/m32",
    "64-bit Mode": "Valid",
    "Description": "Interleave low-order bytes from mm and mm/m32 into mm.",
    "Know More": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
  },
  {
    "Mnemonic": "PXOR",
    "Opcode": "NP 0F EF /r1 PXOR mm, mm/m64",
    "64-bit Mode": "Valid",
    "Description": "Bitwise XOR of mm/m64 and mm.",
    "Know More": "https://www.felixcloutier.com/x86/PXOR.html"
  },
  {
    "Mnemonic": "RCPPS",
    "Opcode": "NP 0F 53 /r RCPPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocals of the packed single-precision floating-point values in xmm2/m128 and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/RCPPS.html"
  },
  {
    "Mnemonic": "RCPSS",
    "Opcode": "F3 0F 53 /r RCPSS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal of the scalar single-precision floating-point value in xmm2/m32 and stores the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/RCPSS.html"
  },
  {
    "Mnemonic": "RDFSBASE",
    "Opcode": "F3 0F AE /0 RDFSBASE r32",
    "64-bit Mode": "Valid",
    "Description": "Load the 32-bit destination register with the FS base address.",
    "Know More": "https://www.felixcloutier.com/x86/RDFSBASE:RDGSBASE.html"
  },
  {
    "Mnemonic": "RDGSBASE",
    "Opcode": "F3 0F AE /0 RDFSBASE r32",
    "64-bit Mode": "Valid",
    "Description": "Load the 32-bit destination register with the FS base address.",
    "Know More": "https://www.felixcloutier.com/x86/RDFSBASE:RDGSBASE.html"
  },
  {
    "Mnemonic": "RDPID",
    "Opcode": "F3 0F C7 /7 RDPID r32",
    "64-bit Mode": "Invalid",
    "Description": "Read IA32_TSC_AUX into r32.",
    "Know More": "https://www.felixcloutier.com/x86/RDPID.html"
  },
  {
    "Mnemonic": "RDPKRU",
    "Opcode": "NP 0F 01 EE",
    "64-bit Mode": "Valid",
    "Description": "Reads PKRU into EAX.",
    "Know More": "https://www.felixcloutier.com/x86/RDPKRU.html"
  },
  {
    "Mnemonic": "RDRAND",
    "Opcode": "NFx 0F C7 /6 RDRAND r16",
    "64-bit Mode": "Valid",
    "Description": "Read a 16-bit random number and store in the destination register.",
    "Know More": "https://www.felixcloutier.com/x86/RDRAND.html"
  },
  {
    "Mnemonic": "RDSEED",
    "Opcode": "NFx 0F C7 /7 RDSEED r16",
    "64-bit Mode": "Valid",
    "Description": "Read a 16-bit NIST SP800-90B & C compliant random value and store in the destination register.",
    "Know More": "https://www.felixcloutier.com/x86/RDSEED.html"
  },
  {
    "Mnemonic": "RORX",
    "Opcode": "VEX.LZ.F2.0F3A.W0 F0 /r ib RORX r32, r/m32, imm8",
    "64-bit Mode": "Valid",
    "Description": "Rotate 32-bit r/m32 right imm8 times without affecting arithmetic flags.",
    "Know More": "https://www.felixcloutier.com/x86/RORX.html"
  },
  {
    "Mnemonic": "ROUNDPD",
    "Opcode": "66 0F 3A 09 /r ib ROUNDPD xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Round packed double precision floating-point values in xmm2/m128 and place the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ROUNDPD.html"
  },
  {
    "Mnemonic": "ROUNDPS",
    "Opcode": "66 0F 3A 08 /r ib ROUNDPS xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Round packed single precision floating-point values in xmm2/m128 and place the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ROUNDPS.html"
  },
  {
    "Mnemonic": "ROUNDSD",
    "Opcode": "66 0F 3A 0B /r ib ROUNDSD xmm1, xmm2/m64, imm8",
    "64-bit Mode": "Valid",
    "Description": "Round the low packed double precision floating-point value in xmm2/m64 and place the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ROUNDSD.html"
  },
  {
    "Mnemonic": "ROUNDSS",
    "Opcode": "66 0F 3A 0A /r ib ROUNDSS xmm1, xmm2/m32, imm8",
    "64-bit Mode": "Valid",
    "Description": "Round the low packed single precision floating-point value in xmm2/m32 and place the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/ROUNDSS.html"
  },
  {
    "Mnemonic": "RSQRTPS",
    "Opcode": "NP 0F 52 /r RSQRTPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocals of the square roots of the packed single-precision floating-point values in xmm2/m128 and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/RSQRTPS.html"
  },
  {
    "Mnemonic": "RSQRTSS",
    "Opcode": "F3 0F 52 /r RSQRTSS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal of the square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/RSQRTSS.html"
  },
  {
    "Mnemonic": "SARX",
    "Opcode": "VEX.LZ.F3.0F38.W0 F7 /r SARX r32a, r/m32, r32b",
    "64-bit Mode": "Valid",
    "Description": "Shift r/m32 arithmetically right with count specified in r32b.",
    "Know More": "https://www.felixcloutier.com/x86/SARX:SHLX:SHRX.html"
  },
  {
    "Mnemonic": "SHA1MSG1",
    "Opcode": "NP 0F 38 C9 /r SHA1MSG1 xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Performs an intermediate calculation for the next four SHA1 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHA1MSG1.html"
  },
  {
    "Mnemonic": "SHA1MSG2",
    "Opcode": "NP 0F 38 CA /r SHA1MSG2 xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Performs the final calculation for the next four SHA1 message dwords using intermediate results from xmm1 and the previous message dwords from xmm2/m128, storing the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHA1MSG2.html"
  },
  {
    "Mnemonic": "SHA1NEXTE",
    "Opcode": "NP 0F 38 C8 /r SHA1NEXTE xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Calculates SHA1 state variable E after four rounds of operation from the current SHA1 state variable A in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHA1NEXTE.html"
  },
  {
    "Mnemonic": "SHA1RNDS4",
    "Opcode": "NP 0F 3A CC /r ib SHA1RNDS4 xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Performs four rounds of SHA1 operation operating on SHA1 state (A,B,C,D) from xmm1, with a pre-computed sum of the next 4 round message dwords and state variable E from xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/SHA1RNDS4.html"
  },
  {
    "Mnemonic": "SHA256MSG1",
    "Opcode": "NP 0F 38 CC /r SHA256MSG1 xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Performs an intermediate calculation for the next four SHA256 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHA256MSG1.html"
  },
  {
    "Mnemonic": "SHA256MSG2",
    "Opcode": "NP 0F 38 CD /r SHA256MSG2 xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Performs the final calculation for the next four SHA256 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHA256MSG2.html"
  },
  {
    "Mnemonic": "SHA256RNDS2",
    "Opcode": "NP 0F 38 CB /r SHA256RNDS2 xmm1, xmm2/m128, <XMM0>",
    "64-bit Mode": "Valid",
    "Description": "Perform 2 rounds of SHA256 operation using an initial SHA256 state (C,D,G,H) from xmm1, an initial SHA256 state (A,B,E,F) from xmm2/m128, and a pre-computed sum of the next 2 round message dwords and the corresponding round constants from the implicit operand XMM0, storing the updated SHA256 state (A,B,E,F) result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHA256RNDS2.html"
  },
  {
    "Mnemonic": "SHLX",
    "Opcode": "VEX.LZ.F3.0F38.W0 F7 /r SARX r32a, r/m32, r32b",
    "64-bit Mode": "Valid",
    "Description": "Shift r/m32 arithmetically right with count specified in r32b.",
    "Know More": "https://www.felixcloutier.com/x86/SARX:SHLX:SHRX.html"
  },
  {
    "Mnemonic": "SHRX",
    "Opcode": "VEX.LZ.F3.0F38.W0 F7 /r SARX r32a, r/m32, r32b",
    "64-bit Mode": "Valid",
    "Description": "Shift r/m32 arithmetically right with count specified in r32b.",
    "Know More": "https://www.felixcloutier.com/x86/SARX:SHLX:SHRX.html"
  },
  {
    "Mnemonic": "SHUFPD",
    "Opcode": "66 0F C6 /r ib SHUFPD xmm1, xmm2/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle two pairs of double-precision floating-point values from xmm1 and xmm2/m128 using imm8 to select from each pair, interleaved result is stored in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHUFPD.html"
  },
  {
    "Mnemonic": "SHUFPS",
    "Opcode": "NP 0F C6 /r ib SHUFPS xmm1, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Select from quadruplet of single-precision floating-point values in xmm1 and xmm2/m128 using imm8, interleaved result pairs are stored in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SHUFPS.html"
  },
  {
    "Mnemonic": "SQRTPD",
    "Opcode": "66 0F 51 /r SQRTPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Computes Square Roots of the packed double-precision floating-point values in xmm2/m128 and stores the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SQRTPD.html"
  },
  {
    "Mnemonic": "SQRTPS",
    "Opcode": "NP 0F 51 /r SQRTPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Computes Square Roots of the packed single-precision floating-point values in xmm2/m128 and stores the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SQRTPS.html"
  },
  {
    "Mnemonic": "SQRTSD",
    "Opcode": "F2 0F 51/r SQRTSD xmm1,xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Computes square root of the low double-precision floating-point value in xmm2/m64 and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SQRTSD.html"
  },
  {
    "Mnemonic": "SQRTSS",
    "Opcode": "F3 0F 51 /r SQRTSS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Computes square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SQRTSS.html"
  },
  {
    "Mnemonic": "STAC",
    "Opcode": "NP 0F 01 CB STAC",
    "64-bit Mode": "Valid",
    "Description": "Set the AC flag in the EFLAGS register.",
    "Know More": "https://www.felixcloutier.com/x86/STAC.html"
  },
  {
    "Mnemonic": "STD",
    "Opcode": "FD",
    "64-bit Mode": "Invalid",
    "Description": "Set DF flag.",
    "Know More": "https://www.felixcloutier.com/x86/STD.html"
  },
  {
    "Mnemonic": "STMXCSR",
    "Opcode": "NP 0F AE /3 STMXCSR m32",
    "64-bit Mode": "Valid",
    "Description": "Store contents of MXCSR register to m32.",
    "Know More": "https://www.felixcloutier.com/x86/STMXCSR.html"
  },
  {
    "Mnemonic": "SUBPD",
    "Opcode": "66 0F 5C /r SUBPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Subtract packed double-precision floating-point values in xmm2/mem from xmm1 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SUBPD.html"
  },
  {
    "Mnemonic": "SUBPS",
    "Opcode": "NP 0F 5C /r SUBPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Subtract packed single-precision floating-point values in xmm2/mem from xmm1 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SUBPS.html"
  },
  {
    "Mnemonic": "SUBSD",
    "Opcode": "F2 0F 5C /r SUBSD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Subtract the low double-precision floating-point value in xmm2/m64 from xmm1 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SUBSD.html"
  },
  {
    "Mnemonic": "SUBSS",
    "Opcode": "F3 0F 5C /r SUBSS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Subtract the low single-precision floating-point value in xmm2/m32 from xmm1 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/SUBSS.html"
  },
  {
    "Mnemonic": "TPAUSE",
    "Opcode": "66 0F AE /6 TPAUSE r32, <edx>, <eax>",
    "64-bit Mode": "Valid",
    "Description": "Directs the processor to enter an implementation-dependent optimized state until the TSC reaches the value in EDX:EAX.",
    "Know More": "https://www.felixcloutier.com/x86/TPAUSE.html"
  },
  {
    "Mnemonic": "TZCNT",
    "Opcode": "F3 0F BC /r TZCNT r16, r/m16",
    "64-bit Mode": "Valid",
    "Description": "Count the number of trailing zero bits in r/m16, return result in r16.",
    "Know More": "https://www.felixcloutier.com/x86/TZCNT.html"
  },
  {
    "Mnemonic": "UCOMISD",
    "Opcode": "66 0F 2E /r UCOMISD xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Compare low double-precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/UCOMISD.html"
  },
  {
    "Mnemonic": "UCOMISS",
    "Opcode": "NP 0F 2E /r UCOMISS xmm1, xmm2/m32",
    "64-bit Mode": "Valid",
    "Description": "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.",
    "Know More": "https://www.felixcloutier.com/x86/UCOMISS.html"
  },
  {
    "Mnemonic": "UMONITOR",
    "Opcode": "F3 0F AE /6 UMONITOR r16/r32/r64",
    "64-bit Mode": "Valid",
    "Description": "Sets up a linear address range to be monitored by hardware and activates the monitor.",
    "Know More": "https://www.felixcloutier.com/x86/UMONITOR.html"
  },
  {
    "Mnemonic": "UMWAIT",
    "Opcode": "F2 0F AE /6 UMWAIT r32, <edx>, <eax>",
    "64-bit Mode": "Valid",
    "Description": "A hint that allows the processor to stop instruction execution and enter an implementation-dependent optimized state until occurrence of a class of events.",
    "Know More": "https://www.felixcloutier.com/x86/UMWAIT.html"
  },
  {
    "Mnemonic": "UNPCKHPD",
    "Opcode": "66 0F 15 /r UNPCKHPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Unpacks and Interleaves double-precision floating-point values from high quadwords of xmm1 and xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/UNPCKHPD.html"
  },
  {
    "Mnemonic": "UNPCKHPS",
    "Opcode": "NP 0F 15 /r UNPCKHPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Unpacks and Interleaves single-precision floating-point values from high quadwords of xmm1 and xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/UNPCKHPS.html"
  },
  {
    "Mnemonic": "UNPCKLPD",
    "Opcode": "66 0F 14 /r UNPCKLPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Unpacks and Interleaves double-precision floating-point values from low quadwords of xmm1 and xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/UNPCKLPD.html"
  },
  {
    "Mnemonic": "UNPCKLPS",
    "Opcode": "NP 0F 14 /r UNPCKLPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Unpacks and Interleaves single-precision floating-point values from low quadwords of xmm1 and xmm2/m128.",
    "Know More": "https://www.felixcloutier.com/x86/UNPCKLPS.html"
  },
  {
    "Mnemonic": "VALIGND",
    "Opcode": "EVEX.128.66.0F3A.W0 03 /r ib VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift right and merge vectors xmm2 and xmm3/m128/m32bcst with double-word granularity using imm8 as number of elements to shift, and store the final result in xmm1, under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VALIGND:VALIGNQ.html"
  },
  {
    "Mnemonic": "VALIGNQ",
    "Opcode": "EVEX.128.66.0F3A.W0 03 /r ib VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shift right and merge vectors xmm2 and xmm3/m128/m32bcst with double-word granularity using imm8 as number of elements to shift, and store the final result in xmm1, under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VALIGND:VALIGNQ.html"
  },
  {
    "Mnemonic": "VBLENDMPD",
    "Opcode": "EVEX.128.66.0F38.W1 65 /r VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Blend double-precision vector xmm2 and double-precision vector xmm3/m128/m64bcst and store the result in xmm1, under control mask.",
    "Know More": "https://www.felixcloutier.com/x86/VBLENDMPD:VBLENDMPS.html"
  },
  {
    "Mnemonic": "VBLENDMPS",
    "Opcode": "EVEX.128.66.0F38.W1 65 /r VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Blend double-precision vector xmm2 and double-precision vector xmm3/m128/m64bcst and store the result in xmm1, under control mask.",
    "Know More": "https://www.felixcloutier.com/x86/VBLENDMPD:VBLENDMPS.html"
  },
  {
    "Mnemonic": "VBROADCAST",
    "Opcode": "VEX.128.66.0F38.W0 18 /r VBROADCASTSS xmm1, m32",
    "64-bit Mode": "Valid",
    "Description": "Broadcast single-precision floating-point element in mem to four locations in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VBROADCAST.html"
  },
  {
    "Mnemonic": "VCOMPRESSPD",
    "Opcode": "EVEX.128.66.0F38.W1 8A /r VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Compress packed double-precision floating-point values from xmm2 to xmm1/m128 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCOMPRESSPD.html"
  },
  {
    "Mnemonic": "VCOMPRESSPS",
    "Opcode": "EVEX.128.66.0F38.W0 8A /r VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Compress packed single-precision floating-point values from xmm2 to xmm1/m128 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCOMPRESSPS.html"
  },
  {
    "Mnemonic": "VCVTPD2QQ",
    "Opcode": "EVEX.128.66.0F.W1 7B /r VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values from xmm2/m128/m64bcst to two packed quadword integers in xmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPD2QQ.html"
  },
  {
    "Mnemonic": "VCVTPD2UDQ",
    "Opcode": "EVEX.128.0F.W1 79 /r VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two unsigned doubleword integers in xmm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPD2UDQ.html"
  },
  {
    "Mnemonic": "VCVTPD2UQQ",
    "Opcode": "EVEX.128.66.0F.W1 79 /r VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values from xmm2/mem to two packed unsigned quadword integers in xmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPD2UQQ.html"
  },
  {
    "Mnemonic": "VCVTPH2PS",
    "Opcode": "VEX.128.66.0F38.W0 13 /r VCVTPH2PS xmm1, xmm2/m64",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed half precision (16-bit) floating-point values in xmm2/m64 to packed single-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPH2PS.html"
  },
  {
    "Mnemonic": "VCVTPS2PH",
    "Opcode": "VEX.128.66.0F3A.W0 1D /r ib VCVTPS2PH xmm1/m64, xmm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed single-precision floating-point values in xmm2 to packed half-precision (16-bit) floating-point values in xmm1/m64.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPS2PH.html"
  },
  {
    "Mnemonic": "VCVTPS2QQ",
    "Opcode": "EVEX.128.66.0F.W0 7B /r VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed single precision floating-point values from xmm2/m64/m32bcst to two packed signed quadword values in xmm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPS2QQ.html"
  },
  {
    "Mnemonic": "VCVTPS2UDQ",
    "Opcode": "EVEX.128.0F.W0 79 /r VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed unsigned doubleword values in xmm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPS2UDQ.html"
  },
  {
    "Mnemonic": "VCVTPS2UQQ",
    "Opcode": "EVEX.128.66.0F.W0 79 /r VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed single precision floating-point values from zmm2/m64/m32bcst to two packed unsigned quadword values in zmm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTPS2UQQ.html"
  },
  {
    "Mnemonic": "VCVTQQ2PD",
    "Opcode": "EVEX.128.F3.0F.W1 E6 /r VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed quadword integers from xmm2/m128/m64bcst to packed double-precision floating-point values in xmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTQQ2PD.html"
  },
  {
    "Mnemonic": "VCVTQQ2PS",
    "Opcode": "EVEX.128.0F.W1 5B /r VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed quadword integers from xmm2/mem to packed single-precision floating-point values in xmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTQQ2PS.html"
  },
  {
    "Mnemonic": "VCVTSD2USI",
    "Opcode": "EVEX.LIG.F2.0F.W0 79 /r VCVTSD2USI r32, xmm1/m64{er}",
    "64-bit Mode": "Valid",
    "Description": "Convert one double-precision floating-point value from xmm1/m64 to one unsigned doubleword integer r32.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTSD2USI.html"
  },
  {
    "Mnemonic": "VCVTSS2USI",
    "Opcode": "EVEX.LIG.F3.0F.W0 79 /r VCVTSS2USI r32, xmm1/m32{er}",
    "64-bit Mode": "Valid",
    "Description": "Convert one single-precision floating-point value from xmm1/m32 to one unsigned doubleword integer in r32.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTSS2USI.html"
  },
  {
    "Mnemonic": "VCVTTPD2QQ",
    "Opcode": "EVEX.128.66.0F.W1 7A /r VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values from zmm2/m128/m64bcst to two packed quadword integers in zmm1 using truncation with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTPD2QQ.html"
  },
  {
    "Mnemonic": "VCVTTPD2UDQ",
    "Opcode": "EVEX.128.0F.W1 78 /r VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two unsigned doubleword integers in xmm1 using truncation subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTPD2UDQ.html"
  },
  {
    "Mnemonic": "VCVTTPD2UQQ",
    "Opcode": "EVEX.128.66.0F.W1 78 /r VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed double-precision floating-point values from xmm2/m128/m64bcst to two packed unsigned quadword integers in xmm1 using truncation with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTPD2UQQ.html"
  },
  {
    "Mnemonic": "VCVTTPS2QQ",
    "Opcode": "EVEX.128.66.0F.W0 7A /r VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed single precision floating-point values from xmm2/m64/m32bcst to two packed signed quadword values in xmm1 using truncation subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTPS2QQ.html"
  },
  {
    "Mnemonic": "VCVTTPS2UDQ",
    "Opcode": "EVEX.128.0F.W0 78 /r VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed unsigned doubleword values in xmm1 using truncation subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTPS2UDQ.html"
  },
  {
    "Mnemonic": "VCVTTPS2UQQ",
    "Opcode": "EVEX.128.66.0F.W0 78 /r VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed single precision floating-point values from xmm2/m64/m32bcst to two packed unsigned quadword values in xmm1 using truncation subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTPS2UQQ.html"
  },
  {
    "Mnemonic": "VCVTTSD2USI",
    "Opcode": "EVEX.LIG.F2.0F.W0 78 /r VCVTTSD2USI r32, xmm1/m64{sae}",
    "64-bit Mode": "Valid",
    "Description": "Convert one double-precision floating-point value from xmm1/m64 to one unsigned doubleword integer r32 using truncation.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTSD2USI.html"
  },
  {
    "Mnemonic": "VCVTTSS2USI",
    "Opcode": "EVEX.LIG.F3.0F.W0 78 /r VCVTTSS2USI r32, xmm1/m32{sae}",
    "64-bit Mode": "Valid",
    "Description": "Convert one single-precision floating-point value from xmm1/m32 to one unsigned doubleword integer in r32 using truncation.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTTSS2USI.html"
  },
  {
    "Mnemonic": "VCVTUDQ2PD",
    "Opcode": "EVEX.128.F3.0F.W0 7A /r VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed unsigned doubleword integers from ymm2/m64/m32bcst to packed double-precision floating-point values in zmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTUDQ2PD.html"
  },
  {
    "Mnemonic": "VCVTUDQ2PS",
    "Opcode": "EVEX.128.F2.0F.W0 7A /r VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert four packed unsigned doubleword integers from xmm2/m128/m32bcst to packed single-precision floating-point values in xmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTUDQ2PS.html"
  },
  {
    "Mnemonic": "VCVTUQQ2PD",
    "Opcode": "EVEX.128.F3.0F.W1 7A /r VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed unsigned quadword integers from xmm2/m128/m64bcst to two packed double-precision floating-point values in xmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTUQQ2PD.html"
  },
  {
    "Mnemonic": "VCVTUQQ2PS",
    "Opcode": "EVEX.128.F2.0F.W1 7A /r VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert two packed unsigned quadword integers from xmm2/m128/m64bcst to packed single-precision floating-point values in zmm1 with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTUQQ2PS.html"
  },
  {
    "Mnemonic": "VCVTUSI2SD",
    "Opcode": "EVEX.LIG.F2.0F.W0 7B /r VCVTUSI2SD xmm1, xmm2, r/m32",
    "64-bit Mode": "Valid",
    "Description": "Convert one unsigned doubleword integer from r/m32 to one double-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTUSI2SD.html"
  },
  {
    "Mnemonic": "VCVTUSI2SS",
    "Opcode": "EVEX.LIG.F3.0F.W0 7B /r VCVTUSI2SS xmm1, xmm2, r/m32{er}",
    "64-bit Mode": "Valid",
    "Description": "Convert one signed doubleword integer from r/m32 to one single-precision floating-point value in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VCVTUSI2SS.html"
  },
  {
    "Mnemonic": "VDBPSADBW",
    "Opcode": "EVEX.128.66.0F3A.W0 42 /r ib VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compute packed SAD word results of unsigned bytes in dword block from xmm2 with unsigned bytes of dword blocks transformed from xmm3/m128 using the shuffle controls in imm8.",
    "Know More": "https://www.felixcloutier.com/x86/VDBPSADBW.html"
  },
  {
    "Mnemonic": "VEXPANDPD",
    "Opcode": "EVEX.128.66.0F38.W1 88 /r VEXPANDPD xmm1 {k1}{z}, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Expand packed double-precision floating-point values from xmm2/m128 to xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VEXPANDPD.html"
  },
  {
    "Mnemonic": "VEXPANDPS",
    "Opcode": "EVEX.128.66.0F38.W0 88 /r VEXPANDPS xmm1 {k1}{z}, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Expand packed single-precision floating-point values from xmm2/m128 to xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VEXPANDPS.html"
  },
  {
    "Mnemonic": "VEXTRACTF128",
    "Opcode": "VEX.256.66.0F3A.W0 19 /r ib VEXTRACTF128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of packed floating-point values from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTF32x4",
    "Opcode": "VEX.256.66.0F3A.W0 19 /r ib VEXTRACTF128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of packed floating-point values from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTF32x8",
    "Opcode": "VEX.256.66.0F3A.W0 19 /r ib VEXTRACTF128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of packed floating-point values from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTF64x2",
    "Opcode": "VEX.256.66.0F3A.W0 19 /r ib VEXTRACTF128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of packed floating-point values from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTF64x4",
    "Opcode": "VEX.256.66.0F3A.W0 19 /r ib VEXTRACTF128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of packed floating-point values from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTI128",
    "Opcode": "VEX.256.66.0F3A.W0 39 /r ib VEXTRACTI128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of integer data from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTI32x4",
    "Opcode": "VEX.256.66.0F3A.W0 39 /r ib VEXTRACTI128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of integer data from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTI32x8",
    "Opcode": "VEX.256.66.0F3A.W0 39 /r ib VEXTRACTI128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of integer data from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTI64x2",
    "Opcode": "VEX.256.66.0F3A.W0 39 /r ib VEXTRACTI128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of integer data from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
  },
  {
    "Mnemonic": "VEXTRACTI64x4",
    "Opcode": "VEX.256.66.0F3A.W0 39 /r ib VEXTRACTI128 xmm1/m128, ymm2, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract 128 bits of integer data from ymm2 and store results in xmm1/m128.",
    "Know More": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
  },
  {
    "Mnemonic": "VFIXUPIMMPD",
    "Opcode": "EVEX.128.66.0F3A.W1 54 /r ib VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Fix up special numbers in float64 vector xmm1, float64 vector xmm2 and int64 vector xmm3/m128/m64bcst and store the result in xmm1, under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VFIXUPIMMPD.html"
  },
  {
    "Mnemonic": "VFIXUPIMMPS",
    "Opcode": "EVEX.128.66.0F3A.W0 54 /r VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Fix up special numbers in float32 vector xmm1, float32 vector xmm2 and int32 vector xmm3/m128/m32bcst and store the result in xmm1, under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VFIXUPIMMPS.html"
  },
  {
    "Mnemonic": "VFIXUPIMMSD",
    "Opcode": "EVEX.LIG.66.0F3A.W1 55 /r ib VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Fix up a float64 number in the low quadword element of xmm2 using scalar int32 table in xmm3/m64 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFIXUPIMMSD.html"
  },
  {
    "Mnemonic": "VFIXUPIMMSS",
    "Opcode": "EVEX.LIG.66.0F3A.W0 55 /r ib VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Fix up a float32 number in the low doubleword element in xmm2 using scalar int32 table in xmm3/m32 and store the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFIXUPIMMSS.html"
  },
  {
    "Mnemonic": "VFMADD132PD",
    "Opcode": "VEX.128.66.0F38.W1 98 /r VFMADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132PD:VFMADD213PD:VFMADD231PD.html"
  },
  {
    "Mnemonic": "VFMADD132PS",
    "Opcode": "VEX.128.66.0F38.W0 98 /r VFMADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132PS:VFMADD213PS:VFMADD231PS.html"
  },
  {
    "Mnemonic": "VFMADD132SD",
    "Opcode": "VEX.LIG.66.0F38.W1 99 /r VFMADD132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132SD:VFMADD213SD:VFMADD231SD.html"
  },
  {
    "Mnemonic": "VFMADD132SS",
    "Opcode": "VEX.LIG.66.0F38.W0 99 /r VFMADD132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132SS:VFMADD213SS:VFMADD231SS.html"
  },
  {
    "Mnemonic": "VFMADD213PD",
    "Opcode": "VEX.128.66.0F38.W1 98 /r VFMADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132PD:VFMADD213PD:VFMADD231PD.html"
  },
  {
    "Mnemonic": "VFMADD213PS",
    "Opcode": "VEX.128.66.0F38.W0 98 /r VFMADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132PS:VFMADD213PS:VFMADD231PS.html"
  },
  {
    "Mnemonic": "VFMADD213SD",
    "Opcode": "VEX.LIG.66.0F38.W1 99 /r VFMADD132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132SD:VFMADD213SD:VFMADD231SD.html"
  },
  {
    "Mnemonic": "VFMADD213SS",
    "Opcode": "VEX.LIG.66.0F38.W0 99 /r VFMADD132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132SS:VFMADD213SS:VFMADD231SS.html"
  },
  {
    "Mnemonic": "VFMADD231PD",
    "Opcode": "VEX.128.66.0F38.W1 98 /r VFMADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132PD:VFMADD213PD:VFMADD231PD.html"
  },
  {
    "Mnemonic": "VFMADD231PS",
    "Opcode": "VEX.128.66.0F38.W0 98 /r VFMADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132PS:VFMADD213PS:VFMADD231PS.html"
  },
  {
    "Mnemonic": "VFMADD231SD",
    "Opcode": "VEX.LIG.66.0F38.W1 99 /r VFMADD132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132SD:VFMADD213SD:VFMADD231SD.html"
  },
  {
    "Mnemonic": "VFMADD231SS",
    "Opcode": "VEX.LIG.66.0F38.W0 99 /r VFMADD132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADD132SS:VFMADD213SS:VFMADD231SS.html"
  },
  {
    "Mnemonic": "VFMADDSUB132PD",
    "Opcode": "VEX.128.66.0F38.W1 96 /r VFMADDSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, add/subtract elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADDSUB132PD:VFMADDSUB213PD:VFMADDSUB231PD.html"
  },
  {
    "Mnemonic": "VFMADDSUB132PS",
    "Opcode": "VEX.128.66.0F38.W0 96 /r VFMADDSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, add/subtract elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADDSUB132PS:VFMADDSUB213PS:VFMADDSUB231PS.html"
  },
  {
    "Mnemonic": "VFMADDSUB213PD",
    "Opcode": "VEX.128.66.0F38.W1 96 /r VFMADDSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, add/subtract elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADDSUB132PD:VFMADDSUB213PD:VFMADDSUB231PD.html"
  },
  {
    "Mnemonic": "VFMADDSUB213PS",
    "Opcode": "VEX.128.66.0F38.W0 96 /r VFMADDSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, add/subtract elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADDSUB132PS:VFMADDSUB213PS:VFMADDSUB231PS.html"
  },
  {
    "Mnemonic": "VFMADDSUB231PD",
    "Opcode": "VEX.128.66.0F38.W1 96 /r VFMADDSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, add/subtract elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADDSUB132PD:VFMADDSUB213PD:VFMADDSUB231PD.html"
  },
  {
    "Mnemonic": "VFMADDSUB231PS",
    "Opcode": "VEX.128.66.0F38.W0 96 /r VFMADDSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, add/subtract elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMADDSUB132PS:VFMADDSUB213PS:VFMADDSUB231PS.html"
  },
  {
    "Mnemonic": "VFMSUB132PD",
    "Opcode": "VEX.128.66.0F38.W1 9A /r VFMSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132PD:VFMSUB213PD:VFMSUB231PD.html"
  },
  {
    "Mnemonic": "VFMSUB132PS",
    "Opcode": "VEX.128.66.0F38.W0 9A /r VFMSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132PS:VFMSUB213PS:VFMSUB231PS.html"
  },
  {
    "Mnemonic": "VFMSUB132SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9B /r VFMSUB132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132SD:VFMSUB213SD:VFMSUB231SD.html"
  },
  {
    "Mnemonic": "VFMSUB132SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9B /r VFMSUB132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132SS:VFMSUB213SS:VFMSUB231SS.html"
  },
  {
    "Mnemonic": "VFMSUB213PD",
    "Opcode": "VEX.128.66.0F38.W1 9A /r VFMSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132PD:VFMSUB213PD:VFMSUB231PD.html"
  },
  {
    "Mnemonic": "VFMSUB213PS",
    "Opcode": "VEX.128.66.0F38.W0 9A /r VFMSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132PS:VFMSUB213PS:VFMSUB231PS.html"
  },
  {
    "Mnemonic": "VFMSUB213SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9B /r VFMSUB132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132SD:VFMSUB213SD:VFMSUB231SD.html"
  },
  {
    "Mnemonic": "VFMSUB213SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9B /r VFMSUB132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132SS:VFMSUB213SS:VFMSUB231SS.html"
  },
  {
    "Mnemonic": "VFMSUB231PD",
    "Opcode": "VEX.128.66.0F38.W1 9A /r VFMSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132PD:VFMSUB213PD:VFMSUB231PD.html"
  },
  {
    "Mnemonic": "VFMSUB231PS",
    "Opcode": "VEX.128.66.0F38.W0 9A /r VFMSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132PS:VFMSUB213PS:VFMSUB231PS.html"
  },
  {
    "Mnemonic": "VFMSUB231SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9B /r VFMSUB132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132SD:VFMSUB213SD:VFMSUB231SD.html"
  },
  {
    "Mnemonic": "VFMSUB231SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9B /r VFMSUB132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUB132SS:VFMSUB213SS:VFMSUB231SS.html"
  },
  {
    "Mnemonic": "VFMSUBADD132PD",
    "Opcode": "VEX.128.66.0F38.W1 97 /r VFMSUBADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, subtract/add elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUBADD132PD:VFMSUBADD213PD:VFMSUBADD231PD.html"
  },
  {
    "Mnemonic": "VFMSUBADD132PS",
    "Opcode": "VEX.128.66.0F38.W0 97 /r VFMSUBADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, subtract/add elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUBADD132PS:VFMSUBADD213PS:VFMSUBADD231PS.html"
  },
  {
    "Mnemonic": "VFMSUBADD213PD",
    "Opcode": "VEX.128.66.0F38.W1 97 /r VFMSUBADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, subtract/add elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUBADD132PD:VFMSUBADD213PD:VFMSUBADD231PD.html"
  },
  {
    "Mnemonic": "VFMSUBADD213PS",
    "Opcode": "VEX.128.66.0F38.W0 97 /r VFMSUBADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, subtract/add elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUBADD132PS:VFMSUBADD213PS:VFMSUBADD231PS.html"
  },
  {
    "Mnemonic": "VFMSUBADD231PD",
    "Opcode": "VEX.128.66.0F38.W1 97 /r VFMSUBADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, subtract/add elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUBADD132PD:VFMSUBADD213PD:VFMSUBADD231PD.html"
  },
  {
    "Mnemonic": "VFMSUBADD231PS",
    "Opcode": "VEX.128.66.0F38.W0 97 /r VFMSUBADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, subtract/add elements in xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFMSUBADD132PS:VFMSUBADD213PS:VFMSUBADD231PS.html"
  },
  {
    "Mnemonic": "VFNMADD132PD",
    "Opcode": "VEX.128.66.0F38.W1 9C /r VFNMADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132PD:VFNMADD213PD:VFNMADD231PD.html"
  },
  {
    "Mnemonic": "VFNMADD132PS",
    "Opcode": "VEX.128.66.0F38.W0 9C /r VFNMADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132PS:VFNMADD213PS:VFNMADD231PS.html"
  },
  {
    "Mnemonic": "VFNMADD132SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9D /r VFNMADD132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132SD:VFNMADD213SD:VFNMADD231SD.html"
  },
  {
    "Mnemonic": "VFNMADD132SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9D /r VFNMADD132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132SS:VFNMADD213SS:VFNMADD231SS.html"
  },
  {
    "Mnemonic": "VFNMADD213PD",
    "Opcode": "VEX.128.66.0F38.W1 9C /r VFNMADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132PD:VFNMADD213PD:VFNMADD231PD.html"
  },
  {
    "Mnemonic": "VFNMADD213PS",
    "Opcode": "VEX.128.66.0F38.W0 9C /r VFNMADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132PS:VFNMADD213PS:VFNMADD231PS.html"
  },
  {
    "Mnemonic": "VFNMADD213SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9D /r VFNMADD132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132SD:VFNMADD213SD:VFNMADD231SD.html"
  },
  {
    "Mnemonic": "VFNMADD213SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9D /r VFNMADD132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132SS:VFNMADD213SS:VFNMADD231SS.html"
  },
  {
    "Mnemonic": "VFNMADD231PD",
    "Opcode": "VEX.128.66.0F38.W1 9C /r VFNMADD132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132PD:VFNMADD213PD:VFNMADD231PD.html"
  },
  {
    "Mnemonic": "VFNMADD231PS",
    "Opcode": "VEX.128.66.0F38.W0 9C /r VFNMADD132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132PS:VFNMADD213PS:VFNMADD231PS.html"
  },
  {
    "Mnemonic": "VFNMADD231SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9D /r VFNMADD132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/mem, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132SD:VFNMADD213SD:VFNMADD231SD.html"
  },
  {
    "Mnemonic": "VFNMADD231SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9D /r VFNMADD132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and add to xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMADD132SS:VFNMADD213SS:VFNMADD231SS.html"
  },
  {
    "Mnemonic": "VFNMSUB132PD",
    "Opcode": "VEX.128.66.0F38.W1 9E /r VFNMSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132PD:VFNMSUB213PD:VFNMSUB231PD.html"
  },
  {
    "Mnemonic": "VFNMSUB132PS",
    "Opcode": "VEX.128.66.0F38.W0 9E /r VFNMSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132PS:VFNMSUB213PS:VFNMSUB231PS.html"
  },
  {
    "Mnemonic": "VFNMSUB132SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9F /r VFNMSUB132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132SD:VFNMSUB213SD:VFNMSUB231SD.html"
  },
  {
    "Mnemonic": "VFNMSUB132SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9F /r VFNMSUB132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132SS:VFNMSUB213SS:VFNMSUB231SS.html"
  },
  {
    "Mnemonic": "VFNMSUB213PD",
    "Opcode": "VEX.128.66.0F38.W1 9E /r VFNMSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132PD:VFNMSUB213PD:VFNMSUB231PD.html"
  },
  {
    "Mnemonic": "VFNMSUB213PS",
    "Opcode": "VEX.128.66.0F38.W0 9E /r VFNMSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132PS:VFNMSUB213PS:VFNMSUB231PS.html"
  },
  {
    "Mnemonic": "VFNMSUB213SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9F /r VFNMSUB132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132SD:VFNMSUB213SD:VFNMSUB231SD.html"
  },
  {
    "Mnemonic": "VFNMSUB213SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9F /r VFNMSUB132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132SS:VFNMSUB213SS:VFNMSUB231SS.html"
  },
  {
    "Mnemonic": "VFNMSUB231PD",
    "Opcode": "VEX.128.66.0F38.W1 9E /r VFNMSUB132PD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed double-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132PD:VFNMSUB213PD:VFNMSUB231PD.html"
  },
  {
    "Mnemonic": "VFNMSUB231PS",
    "Opcode": "VEX.128.66.0F38.W0 9E /r VFNMSUB132PS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132PS:VFNMSUB213PS:VFNMSUB231PS.html"
  },
  {
    "Mnemonic": "VFNMSUB231SD",
    "Opcode": "VEX.LIG.66.0F38.W1 9F /r VFNMSUB132SD xmm1, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar double-precision floating-point value from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132SD:VFNMSUB213SD:VFNMSUB231SD.html"
  },
  {
    "Mnemonic": "VFNMSUB231SS",
    "Opcode": "VEX.LIG.66.0F38.W0 9F /r VFNMSUB132SS xmm1, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and subtract xmm2 and put result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VFNMSUB132SS:VFNMSUB213SS:VFNMSUB231SS.html"
  },
  {
    "Mnemonic": "VFPCLASSPD",
    "Opcode": "EVEX.128.66.0F3A.W1 66 /r ib VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Tests the input for the following categories: NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative.",
    "Know More": "https://www.felixcloutier.com/x86/VFPCLASSPD.html"
  },
  {
    "Mnemonic": "VFPCLASSPS",
    "Opcode": "EVEX.128.66.0F3A.W0 66 /r ib VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Tests the input for the following categories: NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative.",
    "Know More": "https://www.felixcloutier.com/x86/VFPCLASSPS.html"
  },
  {
    "Mnemonic": "VFPCLASSSD",
    "Opcode": "EVEX.LIG.66.0F3A.W1 67 /r ib VFPCLASSSD k2 {k1}, xmm2/m64, imm8",
    "64-bit Mode": "Valid",
    "Description": "Tests the input for the following categories: NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative.",
    "Know More": "https://www.felixcloutier.com/x86/VFPCLASSSD.html"
  },
  {
    "Mnemonic": "VFPCLASSSS",
    "Opcode": "EVEX.LIG.66.0F3A.W0 67 /r VFPCLASSSS k2 {k1}, xmm2/m32, imm8",
    "64-bit Mode": "Valid",
    "Description": "Tests the input for the following categories: NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative.",
    "Know More": "https://www.felixcloutier.com/x86/VFPCLASSSS.html"
  },
  {
    "Mnemonic": "VGATHERDPD",
    "Opcode": "VEX.128.66.0F38.W1 92 /r VGATHERDPD xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather double-precision FP values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERDPD:VGATHERQPD.html"
  },
  {
    "Mnemonic": "VGATHERDPD",
    "Opcode": "EVEX.128.66.0F38.W0 92 /vsib VGATHERDPS xmm1 {k1}, vm32x",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, gather single-precision floating-point values from memory using k1 as completion mask.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERDPD.html"
  },
  {
    "Mnemonic": "VGATHERDPS",
    "Opcode": "VEX.128.66.0F38.W0 92 /r VGATHERDPS xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather single-precision FP values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERQPS.html"
  },
  {
    "Mnemonic": "VGATHERDPS",
    "Opcode": "EVEX.128.66.0F38.W0 92 /vsib VGATHERDPS xmm1 {k1}, vm32x",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, gather single-precision floating-point values from memory using k1 as completion mask.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERDPD.html"
  },
  {
    "Mnemonic": "VGATHERQPD",
    "Opcode": "VEX.128.66.0F38.W1 92 /r VGATHERDPD xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather double-precision FP values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERDPD:VGATHERQPD.html"
  },
  {
    "Mnemonic": "VGATHERQPD",
    "Opcode": "EVEX.128.66.0F38.W0 93 /vsib VGATHERQPS xmm1 {k1}, vm64x",
    "64-bit Mode": "Valid",
    "Description": "Using signed qword indices, gather single-precision floating-point values from memory using k1 as completion mask.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERQPS:VGATHERQPD.html"
  },
  {
    "Mnemonic": "VGATHERQPS",
    "Opcode": "VEX.128.66.0F38.W0 92 /r VGATHERDPS xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather single-precision FP values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERQPS.html"
  },
  {
    "Mnemonic": "VGATHERQPS",
    "Opcode": "EVEX.128.66.0F38.W0 93 /vsib VGATHERQPS xmm1 {k1}, vm64x",
    "64-bit Mode": "Valid",
    "Description": "Using signed qword indices, gather single-precision floating-point values from memory using k1 as completion mask.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERQPS:VGATHERQPD.html"
  },
  {
    "Mnemonic": "VGETEXPPD",
    "Opcode": "EVEX.128.66.0F38.W1 42 /r VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert the exponent of packed double-precision floating-point values in the source operand to DP FP results representing unbiased integer exponents and stores the results in the destination register.",
    "Know More": "https://www.felixcloutier.com/x86/VGETEXPPD.html"
  },
  {
    "Mnemonic": "VGETEXPPS",
    "Opcode": "EVEX.128.66.0F38.W0 42 /r VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Convert the exponent of packed single-precision floating-point values in the source operand to SP FP results representing unbiased integer exponents and stores the results in the destination register.",
    "Know More": "https://www.felixcloutier.com/x86/VGETEXPPS.html"
  },
  {
    "Mnemonic": "VGETEXPSD",
    "Opcode": "EVEX.LIG.66.0F38.W1 43 /r VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}",
    "64-bit Mode": "Valid",
    "Description": "Convert the biased exponent (bits 62:52) of the low double-precision floating-point value in xmm3/m64 to a DP FP value representing unbiased integer exponent.",
    "Know More": "https://www.felixcloutier.com/x86/VGETEXPSD.html"
  },
  {
    "Mnemonic": "VGETEXPSS",
    "Opcode": "EVEX.LIG.66.0F38.W0 43 /r VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}",
    "64-bit Mode": "Valid",
    "Description": "Convert the biased exponent (bits 30:23) of the low single-precision floating-point value in xmm3/m32 to a SP FP value representing unbiased integer exponent.",
    "Know More": "https://www.felixcloutier.com/x86/VGETEXPSS.html"
  },
  {
    "Mnemonic": "VGETMANTPD",
    "Opcode": "EVEX.128.66.0F3A.W1 26 /r ib VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Get Normalized Mantissa from float64 vector xmm2/m128/m64bcst and store the result in xmm1, using imm8 for sign control and mantissa interval normalization, under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VGETMANTPD.html"
  },
  {
    "Mnemonic": "VGETMANTPS",
    "Opcode": "EVEX.128.66.0F3A.W0 26 /r ib VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Get normalized mantissa from float32 vector xmm2/m128/m32bcst and store the result in xmm1, using imm8 for sign control and mantissa interval normalization, under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VGETMANTPS.html"
  },
  {
    "Mnemonic": "VGETMANTSD",
    "Opcode": "EVEX.LIG.66.0F3A.W1 27 /r ib VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract the normalized mantissa of the low float64 element in xmm3/m64 using imm8 for sign control and mantissa interval normalization.",
    "Know More": "https://www.felixcloutier.com/x86/VGETMANTSD.html"
  },
  {
    "Mnemonic": "VGETMANTSS",
    "Opcode": "EVEX.LIG.66.0F3A.W0 27 /r ib VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Extract the normalized mantissa from the low float32 element of xmm3/m32 using imm8 for sign control and mantissa interval normalization, store the mantissa to xmm1 under the writemask k1 and merge with the other elements of xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VGETMANTSS.html"
  },
  {
    "Mnemonic": "VINSERTF128",
    "Opcode": "VEX.256.66.0F3A.W0 18 /r ib VINSERTF128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of packed floating-point values from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
  },
  {
    "Mnemonic": "VINSERTF32x4",
    "Opcode": "VEX.256.66.0F3A.W0 18 /r ib VINSERTF128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of packed floating-point values from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
  },
  {
    "Mnemonic": "VINSERTF32x8",
    "Opcode": "VEX.256.66.0F3A.W0 18 /r ib VINSERTF128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of packed floating-point values from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
  },
  {
    "Mnemonic": "VINSERTF64x2",
    "Opcode": "VEX.256.66.0F3A.W0 18 /r ib VINSERTF128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of packed floating-point values from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
  },
  {
    "Mnemonic": "VINSERTF64x4",
    "Opcode": "VEX.256.66.0F3A.W0 18 /r ib VINSERTF128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of packed floating-point values from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
  },
  {
    "Mnemonic": "VINSERTI128",
    "Opcode": "VEX.256.66.0F3A.W0 38 /r ib VINSERTI128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of integer data from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
  },
  {
    "Mnemonic": "VINSERTI32x4",
    "Opcode": "VEX.256.66.0F3A.W0 38 /r ib VINSERTI128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of integer data from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
  },
  {
    "Mnemonic": "VINSERTI32x8",
    "Opcode": "VEX.256.66.0F3A.W0 38 /r ib VINSERTI128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of integer data from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
  },
  {
    "Mnemonic": "VINSERTI64x2",
    "Opcode": "VEX.256.66.0F3A.W0 38 /r ib VINSERTI128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of integer data from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
  },
  {
    "Mnemonic": "VINSERTI64x4",
    "Opcode": "VEX.256.66.0F3A.W0 38 /r ib VINSERTI128 ymm1, ymm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Insert 128 bits of integer data from xmm3/m128 and the remaining values from ymm2 into ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
  },
  {
    "Mnemonic": "VMASKMOV",
    "Opcode": "VEX.128.66.0F38.W0 2C /r VMASKMOVPS xmm1, xmm2, m128",
    "64-bit Mode": "Valid",
    "Description": "Conditionally load packed single-precision values from m128 using mask in xmm2 and store in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VMASKMOV.html"
  },
  {
    "Mnemonic": "VMOVDQA32",
    "Opcode": "66 0F 6F /r MOVDQA xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move aligned packed integer values from xmm2/mem to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQA:VMOVDQA32:VMOVDQA64.html"
  },
  {
    "Mnemonic": "VMOVDQA64",
    "Opcode": "66 0F 6F /r MOVDQA xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move aligned packed integer values from xmm2/mem to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQA:VMOVDQA32:VMOVDQA64.html"
  },
  {
    "Mnemonic": "VMOVDQU16",
    "Opcode": "F3 0F 6F /r MOVDQU xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move unaligned packed integer values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
  },
  {
    "Mnemonic": "VMOVDQU32",
    "Opcode": "F3 0F 6F /r MOVDQU xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move unaligned packed integer values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
  },
  {
    "Mnemonic": "VMOVDQU64",
    "Opcode": "F3 0F 6F /r MOVDQU xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move unaligned packed integer values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
  },
  {
    "Mnemonic": "VMOVDQU8",
    "Opcode": "F3 0F 6F /r MOVDQU xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Move unaligned packed integer values from xmm2/m128 to xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
  },
  {
    "Mnemonic": "VPBLENDD",
    "Opcode": "VEX.128.66.0F3A.W0 02 /r ib VPBLENDD xmm1, xmm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Select dwords from xmm2 and xmm3/m128 from mask specified in imm8 and store the values into xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPBLENDD.html"
  },
  {
    "Mnemonic": "VPBLENDMB",
    "Opcode": "EVEX.128.66.0F38.W0 66 /r VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Blend byte integer vector xmm2 and byte vector xmm3/m128 and store the result in xmm1, under control mask.",
    "Know More": "https://www.felixcloutier.com/x86/VPBLENDMB:VPBLENDMW.html"
  },
  {
    "Mnemonic": "VPBLENDMD",
    "Opcode": "EVEX.128.66.0F38.W0 64 /r VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Blend doubleword integer vector xmm2 and doubleword vector xmm3/m128/m32bcst and store the result in xmm1, under control mask.",
    "Know More": "https://www.felixcloutier.com/x86/VPBLENDMD:VPBLENDMQ.html"
  },
  {
    "Mnemonic": "VPBLENDMQ",
    "Opcode": "EVEX.128.66.0F38.W0 64 /r VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Blend doubleword integer vector xmm2 and doubleword vector xmm3/m128/m32bcst and store the result in xmm1, under control mask.",
    "Know More": "https://www.felixcloutier.com/x86/VPBLENDMD:VPBLENDMQ.html"
  },
  {
    "Mnemonic": "VPBLENDMW",
    "Opcode": "EVEX.128.66.0F38.W0 66 /r VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Blend byte integer vector xmm2 and byte vector xmm3/m128 and store the result in xmm1, under control mask.",
    "Know More": "https://www.felixcloutier.com/x86/VPBLENDMB:VPBLENDMW.html"
  },
  {
    "Mnemonic": "VPBROADCAST",
    "Opcode": "VEX.128.66.0F38.W0 78 /r VPBROADCASTB xmm1, xmm2/m8",
    "64-bit Mode": "Valid",
    "Description": "Broadcast a byte integer in the source operand to sixteen locations in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPBROADCAST.html"
  },
  {
    "Mnemonic": "VPBROADCASTB",
    "Opcode": "EVEX.128.66.0F38.W0 7A /r VPBROADCASTB xmm1 {k1}{z}, reg",
    "64-bit Mode": "Valid",
    "Description": "Broadcast an 8-bit value from a GPR to all bytes in the 128-bit destination subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
  },
  {
    "Mnemonic": "VPBROADCASTD",
    "Opcode": "EVEX.128.66.0F38.W0 7A /r VPBROADCASTB xmm1 {k1}{z}, reg",
    "64-bit Mode": "Valid",
    "Description": "Broadcast an 8-bit value from a GPR to all bytes in the 128-bit destination subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
  },
  {
    "Mnemonic": "VPBROADCASTM",
    "Opcode": "EVEX.128.F3.0F38.W1 2A /r VPBROADCASTMB2Q xmm1, k1",
    "64-bit Mode": "Valid",
    "Description": "Broadcast low byte value in k1 to two locations in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPBROADCASTM.html"
  },
  {
    "Mnemonic": "VPBROADCASTQ",
    "Opcode": "EVEX.128.66.0F38.W0 7A /r VPBROADCASTB xmm1 {k1}{z}, reg",
    "64-bit Mode": "Valid",
    "Description": "Broadcast an 8-bit value from a GPR to all bytes in the 128-bit destination subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
  },
  {
    "Mnemonic": "VPBROADCASTW",
    "Opcode": "EVEX.128.66.0F38.W0 7A /r VPBROADCASTB xmm1 {k1}{z}, reg",
    "64-bit Mode": "Valid",
    "Description": "Broadcast an 8-bit value from a GPR to all bytes in the 128-bit destination subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
  },
  {
    "Mnemonic": "VPCMPB",
    "Opcode": "EVEX.128.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed byte values in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPB:VPCMPUB.html"
  },
  {
    "Mnemonic": "VPCMPD",
    "Opcode": "EVEX.128.66.0F3A.W0 1F /r ib VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed doubleword integer values in xmm3/m128/m32bcst and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPD:VPCMPUD.html"
  },
  {
    "Mnemonic": "VPCMPQ",
    "Opcode": "EVEX.128.66.0F3A.W1 1F /r ib VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed quadword integer values in xmm3/m128/m64bcst and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPQ:VPCMPUQ.html"
  },
  {
    "Mnemonic": "VPCMPUB",
    "Opcode": "EVEX.128.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed byte values in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPB:VPCMPUB.html"
  },
  {
    "Mnemonic": "VPCMPUD",
    "Opcode": "EVEX.128.66.0F3A.W0 1F /r ib VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed doubleword integer values in xmm3/m128/m32bcst and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPD:VPCMPUD.html"
  },
  {
    "Mnemonic": "VPCMPUQ",
    "Opcode": "EVEX.128.66.0F3A.W1 1F /r ib VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed quadword integer values in xmm3/m128/m64bcst and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPQ:VPCMPUQ.html"
  },
  {
    "Mnemonic": "VPCMPUW",
    "Opcode": "EVEX.128.66.0F3A.W1 3F /r ib VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed word integers in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPW:VPCMPUW.html"
  },
  {
    "Mnemonic": "VPCMPW",
    "Opcode": "EVEX.128.66.0F3A.W1 3F /r ib VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8",
    "64-bit Mode": "Valid",
    "Description": "Compare packed signed word integers in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCMPW:VPCMPUW.html"
  },
  {
    "Mnemonic": "VPCOMPRESSD",
    "Opcode": "EVEX.128.66.0F38.W0 8B /r VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Compress packed doubleword integer values from xmm2 to xmm1/m128 using controlmask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCOMPRESSD.html"
  },
  {
    "Mnemonic": "VPCOMPRESSQ",
    "Opcode": "EVEX.128.66.0F38.W1 8B /r VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Compress packed quadword integer values from xmm2 to xmm1/m128 using controlmask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCOMPRESSQ.html"
  },
  {
    "Mnemonic": "VPCONFLICTD",
    "Opcode": "EVEX.128.66.0F38.W0 C4 /r VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Detect duplicate double-word values in xmm2/m128/m32bcst using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCONFLICTD:VPCONFLICTQ.html"
  },
  {
    "Mnemonic": "VPCONFLICTQ",
    "Opcode": "EVEX.128.66.0F38.W0 C4 /r VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Detect duplicate double-word values in xmm2/m128/m32bcst using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPCONFLICTD:VPCONFLICTQ.html"
  },
  {
    "Mnemonic": "VPERM2F128",
    "Opcode": "VEX.256.66.0F3A.W0 06 /r ib VPERM2F128 ymm1, ymm2, ymm3/m256, imm8",
    "64-bit Mode": "Valid",
    "Description": "Permute 128-bit floating-point fields in ymm2 and ymm3/mem using controls from imm8 and store result in ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERM2F128.html"
  },
  {
    "Mnemonic": "VPERM2I128",
    "Opcode": "VEX.256.66.0F3A.W0 46 /r ib VPERM2I128 ymm1, ymm2, ymm3/m256, imm8",
    "64-bit Mode": "Valid",
    "Description": "Permute 128-bit integer data in ymm2 and ymm3/mem using controls from imm8 and store result in ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERM2I128.html"
  },
  {
    "Mnemonic": "VPERMB",
    "Opcode": "EVEX.128.66.0F38.W0 8D /r VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute bytes in xmm3/m128 using byte indexes in xmm2 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMB.html"
  },
  {
    "Mnemonic": "VPERMD",
    "Opcode": "VEX.256.66.0F38.W0 36 /r VPERMD ymm1, ymm2, ymm3/m256",
    "64-bit Mode": "Valid",
    "Description": "Permute doublewords in ymm3/m256 using indices in ymm2 and store the result in ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMD:VPERMW.html"
  },
  {
    "Mnemonic": "VPERMI2B",
    "Opcode": "EVEX.128.66.0F38.W0 75 /r VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute bytes in xmm3/m128 and xmm2 using byte indexes in xmm1 and store the byte results in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMI2B.html"
  },
  {
    "Mnemonic": "VPERMI2D",
    "Opcode": "EVEX.128.66.0F38.W1 75 /r VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm2 using indexes in xmm1 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
  },
  {
    "Mnemonic": "VPERMI2PD",
    "Opcode": "EVEX.128.66.0F38.W1 75 /r VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm2 using indexes in xmm1 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
  },
  {
    "Mnemonic": "VPERMI2PS",
    "Opcode": "EVEX.128.66.0F38.W1 75 /r VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm2 using indexes in xmm1 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
  },
  {
    "Mnemonic": "VPERMI2Q",
    "Opcode": "EVEX.128.66.0F38.W1 75 /r VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm2 using indexes in xmm1 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
  },
  {
    "Mnemonic": "VPERMI2W",
    "Opcode": "EVEX.128.66.0F38.W1 75 /r VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm2 using indexes in xmm1 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
  },
  {
    "Mnemonic": "VPERMILPD",
    "Opcode": "VEX.128.66.0F38.W0 0D /r VPERMILPD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute double-precision floating-point values in xmm2 using controls from xmm3/m128 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMILPD.html"
  },
  {
    "Mnemonic": "VPERMILPS",
    "Opcode": "VEX.128.66.0F38.W0 0C /r VPERMILPS xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute single-precision floating-point values in xmm2 using controls from xmm3/m128 and store result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMILPS.html"
  },
  {
    "Mnemonic": "VPERMPD",
    "Opcode": "VEX.256.66.0F3A.W1 01 /r ib VPERMPD ymm1, ymm2/m256, imm8",
    "64-bit Mode": "Valid",
    "Description": "Permute double-precision floating-point elements in ymm2/m256 using indices in imm8 and store the result in ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMPD.html"
  },
  {
    "Mnemonic": "VPERMPS",
    "Opcode": "VEX.256.66.0F38.W0 16 /r VPERMPS ymm1, ymm2, ymm3/m256",
    "64-bit Mode": "Valid",
    "Description": "Permute single-precision floating-point elements in ymm3/m256 using indices in ymm2 and store the result in ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMPS.html"
  },
  {
    "Mnemonic": "VPERMQ",
    "Opcode": "VEX.256.66.0F3A.W1 00 /r ib VPERMQ ymm1, ymm2/m256, imm8",
    "64-bit Mode": "Valid",
    "Description": "Permute qwords in ymm2/m256 using indices in imm8 and store the result in ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMQ.html"
  },
  {
    "Mnemonic": "VPERMT2B",
    "Opcode": "EVEX.128.66.0F38.W0 7D /r VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute bytes in xmm3/m128 and xmm1 using byte indexes in xmm2 and store the byte results in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMT2B.html"
  },
  {
    "Mnemonic": "VPERMT2D",
    "Opcode": "EVEX.128.66.0F38.W1 7D /r VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm1 using indexes in xmm2 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
  },
  {
    "Mnemonic": "VPERMT2PD",
    "Opcode": "EVEX.128.66.0F38.W1 7D /r VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm1 using indexes in xmm2 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
  },
  {
    "Mnemonic": "VPERMT2PS",
    "Opcode": "EVEX.128.66.0F38.W1 7D /r VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm1 using indexes in xmm2 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
  },
  {
    "Mnemonic": "VPERMT2Q",
    "Opcode": "EVEX.128.66.0F38.W1 7D /r VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm1 using indexes in xmm2 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
  },
  {
    "Mnemonic": "VPERMT2W",
    "Opcode": "EVEX.128.66.0F38.W1 7D /r VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Permute word integers from two tables in xmm3/m128 and xmm1 using indexes in xmm2 and store the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
  },
  {
    "Mnemonic": "VPERMW",
    "Opcode": "VEX.256.66.0F38.W0 36 /r VPERMD ymm1, ymm2, ymm3/m256",
    "64-bit Mode": "Valid",
    "Description": "Permute doublewords in ymm3/m256 using indices in ymm2 and store the result in ymm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPERMD:VPERMW.html"
  },
  {
    "Mnemonic": "VPEXPANDD",
    "Opcode": "EVEX.128.66.0F38.W0 89 /r VPEXPANDD xmm1 {k1}{z}, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Expand packed double-word integer values from xmm2/m128 to xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPEXPANDD.html"
  },
  {
    "Mnemonic": "VPEXPANDQ",
    "Opcode": "EVEX.128.66.0F38.W1 89 /r VPEXPANDQ xmm1 {k1}{z}, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Expand packed quad-word integer values from xmm2/m128 to xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPEXPANDQ.html"
  },
  {
    "Mnemonic": "VPGATHERDD",
    "Opcode": "VEX.128.66.0F38.W0 90 /r VPGATHERDD xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather dword values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERQD.html"
  },
  {
    "Mnemonic": "VPGATHERDD",
    "Opcode": "EVEX.128.66.0F38.W0 90 /vsib VPGATHERDD xmm1 {k1}, vm32x",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, gather dword values from memory using writemask k1 for merging-masking.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERDQ.html"
  },
  {
    "Mnemonic": "VPGATHERDQ",
    "Opcode": "EVEX.128.66.0F38.W0 90 /vsib VPGATHERDD xmm1 {k1}, vm32x",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, gather dword values from memory using writemask k1 for merging-masking.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERDQ.html"
  },
  {
    "Mnemonic": "VPGATHERDQ",
    "Opcode": "VEX.128.66.0F38.W1 90 /r VPGATHERDQ xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather qword values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERDQ:VPGATHERQQ.html"
  },
  {
    "Mnemonic": "VPGATHERQD",
    "Opcode": "VEX.128.66.0F38.W0 90 /r VPGATHERDD xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather dword values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERQD.html"
  },
  {
    "Mnemonic": "VPGATHERQD",
    "Opcode": "EVEX.128.66.0F38.W0 91 /vsib VPGATHERQD xmm1 {k1}, vm64x",
    "64-bit Mode": "Valid",
    "Description": "Using signed qword indices, gather dword values from memory using writemask k1 for merging-masking.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERQD:VPGATHERQQ.html"
  },
  {
    "Mnemonic": "VPGATHERQQ",
    "Opcode": "VEX.128.66.0F38.W1 90 /r VPGATHERDQ xmm1, vm32x, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Using dword indices specified in vm32x, gather qword values from memory conditioned on mask specified by xmm2.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERDQ:VPGATHERQQ.html"
  },
  {
    "Mnemonic": "VPGATHERQQ",
    "Opcode": "EVEX.128.66.0F38.W0 91 /vsib VPGATHERQD xmm1 {k1}, vm64x",
    "64-bit Mode": "Valid",
    "Description": "Using signed qword indices, gather dword values from memory using writemask k1 for merging-masking.",
    "Know More": "https://www.felixcloutier.com/x86/VPGATHERQD:VPGATHERQQ.html"
  },
  {
    "Mnemonic": "VPLZCNTD",
    "Opcode": "EVEX.128.66.0F38.W0 44 /r VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Count the number of leading zero bits in each dword element of xmm2/m128/m32bcst using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPLZCNTD:VPLZCNTQ.html"
  },
  {
    "Mnemonic": "VPLZCNTQ",
    "Opcode": "EVEX.128.66.0F38.W0 44 /r VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Count the number of leading zero bits in each dword element of xmm2/m128/m32bcst using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPLZCNTD:VPLZCNTQ.html"
  },
  {
    "Mnemonic": "VPMADD52HUQ",
    "Opcode": "EVEX.128.66.0F38.W1 B5 /r VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Multiply unsigned 52-bit integers in xmm2 and xmm3/m128 and add the high 52 bits of the 104-bit product to the qword unsigned integers in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMADD52HUQ.html"
  },
  {
    "Mnemonic": "VPMADD52LUQ",
    "Opcode": "EVEX.128.66.0F38.W1 B4 /r VPMADD52LUQ xmm1 {k1}{z}, xmm2,xmm3/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Multiply unsigned 52-bit integers in xmm2 and xmm3/m128 and add the low 52 bits of the 104-bit product to the qword unsigned integers in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMADD52LUQ.html"
  },
  {
    "Mnemonic": "VPMASKMOV",
    "Opcode": "VEX.128.66.0F38.W0 8C /r VPMASKMOVD xmm1, xmm2, m128",
    "64-bit Mode": "Valid",
    "Description": "Conditionally load dword values from m128 using mask in xmm2 and store in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMASKMOV.html"
  },
  {
    "Mnemonic": "VPMOVB2M",
    "Opcode": "EVEX.128.F3.0F38.W0 29 /r VPMOVB2M k1, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding byte in XMM1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html"
  },
  {
    "Mnemonic": "VPMOVD2M",
    "Opcode": "EVEX.128.F3.0F38.W0 29 /r VPMOVB2M k1, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding byte in XMM1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html"
  },
  {
    "Mnemonic": "VPMOVDB",
    "Opcode": "EVEX.128.F3.0F38.W0 31 /r VPMOVDB xmm1/m32 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed double-word integers from xmm2 into 4 packed byte integers in xmm1/m32 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVDB:VPMOVSDB:VPMOVUSDB.html"
  },
  {
    "Mnemonic": "VPMOVDW",
    "Opcode": "EVEX.128.F3.0F38.W0 33 /r VPMOVDW xmm1/m64 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed double-word integers from xmm2 into 4 packed word integers in xmm1/m64 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVDW:VPMOVSDW:VPMOVUSDW.html"
  },
  {
    "Mnemonic": "VPMOVM2B",
    "Opcode": "EVEX.128.F3.0F38.W0 28 /r VPMOVM2B xmm1, k1",
    "64-bit Mode": "Valid",
    "Description": "Sets each byte in XMM1 to all 1\u2019s or all 0\u2019s based on the value of the corresponding bit in k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html"
  },
  {
    "Mnemonic": "VPMOVM2D",
    "Opcode": "EVEX.128.F3.0F38.W0 28 /r VPMOVM2B xmm1, k1",
    "64-bit Mode": "Valid",
    "Description": "Sets each byte in XMM1 to all 1\u2019s or all 0\u2019s based on the value of the corresponding bit in k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html"
  },
  {
    "Mnemonic": "VPMOVM2Q",
    "Opcode": "EVEX.128.F3.0F38.W0 28 /r VPMOVM2B xmm1, k1",
    "64-bit Mode": "Valid",
    "Description": "Sets each byte in XMM1 to all 1\u2019s or all 0\u2019s based on the value of the corresponding bit in k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html"
  },
  {
    "Mnemonic": "VPMOVM2W",
    "Opcode": "EVEX.128.F3.0F38.W0 28 /r VPMOVM2B xmm1, k1",
    "64-bit Mode": "Valid",
    "Description": "Sets each byte in XMM1 to all 1\u2019s or all 0\u2019s based on the value of the corresponding bit in k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html"
  },
  {
    "Mnemonic": "VPMOVQ2M",
    "Opcode": "EVEX.128.F3.0F38.W0 29 /r VPMOVB2M k1, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding byte in XMM1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html"
  },
  {
    "Mnemonic": "VPMOVQB",
    "Opcode": "EVEX.128.F3.0F38.W0 32 /r VPMOVQB xmm1/m16 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed byte integers in xmm1/m16 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQB:VPMOVSQB:VPMOVUSQB.html"
  },
  {
    "Mnemonic": "VPMOVQD",
    "Opcode": "EVEX.128.F3.0F38.W0 35 /r VPMOVQD xmm1/m128 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed double-word integers in xmm1/m128 with truncation subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQD:VPMOVSQD:VPMOVUSQD.html"
  },
  {
    "Mnemonic": "VPMOVQW",
    "Opcode": "EVEX.128.F3.0F38.W0 34 /r VPMOVQW xmm1/m32 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed word integers in xmm1/m32 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQW:VPMOVSQW:VPMOVUSQW.html"
  },
  {
    "Mnemonic": "VPMOVSDB",
    "Opcode": "EVEX.128.F3.0F38.W0 31 /r VPMOVDB xmm1/m32 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed double-word integers from xmm2 into 4 packed byte integers in xmm1/m32 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVDB:VPMOVSDB:VPMOVUSDB.html"
  },
  {
    "Mnemonic": "VPMOVSDW",
    "Opcode": "EVEX.128.F3.0F38.W0 33 /r VPMOVDW xmm1/m64 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed double-word integers from xmm2 into 4 packed word integers in xmm1/m64 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVDW:VPMOVSDW:VPMOVUSDW.html"
  },
  {
    "Mnemonic": "VPMOVSQB",
    "Opcode": "EVEX.128.F3.0F38.W0 32 /r VPMOVQB xmm1/m16 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed byte integers in xmm1/m16 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQB:VPMOVSQB:VPMOVUSQB.html"
  },
  {
    "Mnemonic": "VPMOVSQD",
    "Opcode": "EVEX.128.F3.0F38.W0 35 /r VPMOVQD xmm1/m128 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed double-word integers in xmm1/m128 with truncation subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQD:VPMOVSQD:VPMOVUSQD.html"
  },
  {
    "Mnemonic": "VPMOVSQW",
    "Opcode": "EVEX.128.F3.0F38.W0 34 /r VPMOVQW xmm1/m32 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed word integers in xmm1/m32 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQW:VPMOVSQW:VPMOVUSQW.html"
  },
  {
    "Mnemonic": "VPMOVSWB",
    "Opcode": "EVEX.128.F3.0F38.W0 30 /r VPMOVWB xmm1/m64 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 8 packed word integers from xmm2 into 8 packed bytes in xmm1/m64 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVWB:VPMOVSWB:VPMOVUSWB.html"
  },
  {
    "Mnemonic": "VPMOVUSDB",
    "Opcode": "EVEX.128.F3.0F38.W0 31 /r VPMOVDB xmm1/m32 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed double-word integers from xmm2 into 4 packed byte integers in xmm1/m32 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVDB:VPMOVSDB:VPMOVUSDB.html"
  },
  {
    "Mnemonic": "VPMOVUSDW",
    "Opcode": "EVEX.128.F3.0F38.W0 33 /r VPMOVDW xmm1/m64 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 4 packed double-word integers from xmm2 into 4 packed word integers in xmm1/m64 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVDW:VPMOVSDW:VPMOVUSDW.html"
  },
  {
    "Mnemonic": "VPMOVUSQB",
    "Opcode": "EVEX.128.F3.0F38.W0 32 /r VPMOVQB xmm1/m16 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed byte integers in xmm1/m16 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQB:VPMOVSQB:VPMOVUSQB.html"
  },
  {
    "Mnemonic": "VPMOVUSQD",
    "Opcode": "EVEX.128.F3.0F38.W0 35 /r VPMOVQD xmm1/m128 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed double-word integers in xmm1/m128 with truncation subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQD:VPMOVSQD:VPMOVUSQD.html"
  },
  {
    "Mnemonic": "VPMOVUSQW",
    "Opcode": "EVEX.128.F3.0F38.W0 34 /r VPMOVQW xmm1/m32 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 2 packed quad-word integers from xmm2 into 2 packed word integers in xmm1/m32 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVQW:VPMOVSQW:VPMOVUSQW.html"
  },
  {
    "Mnemonic": "VPMOVUSWB",
    "Opcode": "EVEX.128.F3.0F38.W0 30 /r VPMOVWB xmm1/m64 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 8 packed word integers from xmm2 into 8 packed bytes in xmm1/m64 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVWB:VPMOVSWB:VPMOVUSWB.html"
  },
  {
    "Mnemonic": "VPMOVW2M",
    "Opcode": "EVEX.128.F3.0F38.W0 29 /r VPMOVB2M k1, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding byte in XMM1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html"
  },
  {
    "Mnemonic": "VPMOVWB",
    "Opcode": "EVEX.128.F3.0F38.W0 30 /r VPMOVWB xmm1/m64 {k1}{z}, xmm2",
    "64-bit Mode": "Valid",
    "Description": "Converts 8 packed word integers from xmm2 into 8 packed bytes in xmm1/m64 with truncation under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMOVWB:VPMOVSWB:VPMOVUSWB.html"
  },
  {
    "Mnemonic": "VPMULTISHIFTQB",
    "Opcode": "EVEX.128.66.0F38.W1 83 /r VPMULTISHIFTQB xmm1 {k1}{z}, xmm2,xmm3/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Select unaligned bytes from qwords in xmm3/m128/m64bcst using control bytes in xmm2, write byte results to xmm1 under k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPMULTISHIFTQB.html"
  },
  {
    "Mnemonic": "VPROLD",
    "Opcode": "EVEX.128.66.0F38.W0 15 /r VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 left by count in the corresponding element of xmm3/m128/m32bcst.",
    "Know More": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
  },
  {
    "Mnemonic": "VPROLQ",
    "Opcode": "EVEX.128.66.0F38.W0 15 /r VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 left by count in the corresponding element of xmm3/m128/m32bcst.",
    "Know More": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
  },
  {
    "Mnemonic": "VPROLVD",
    "Opcode": "EVEX.128.66.0F38.W0 15 /r VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 left by count in the corresponding element of xmm3/m128/m32bcst.",
    "Know More": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
  },
  {
    "Mnemonic": "VPROLVQ",
    "Opcode": "EVEX.128.66.0F38.W0 15 /r VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 left by count in the corresponding element of xmm3/m128/m32bcst.",
    "Know More": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
  },
  {
    "Mnemonic": "VPRORD",
    "Opcode": "EVEX.128.66.0F38.W0 14 /r VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 right by count in the corresponding element of xmm3/m128/m32bcst, store result using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
  },
  {
    "Mnemonic": "VPRORQ",
    "Opcode": "EVEX.128.66.0F38.W0 14 /r VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 right by count in the corresponding element of xmm3/m128/m32bcst, store result using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
  },
  {
    "Mnemonic": "VPRORVD",
    "Opcode": "EVEX.128.66.0F38.W0 14 /r VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 right by count in the corresponding element of xmm3/m128/m32bcst, store result using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
  },
  {
    "Mnemonic": "VPRORVQ",
    "Opcode": "EVEX.128.66.0F38.W0 14 /r VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Rotate doublewords in xmm2 right by count in the corresponding element of xmm3/m128/m32bcst, store result using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
  },
  {
    "Mnemonic": "VPSCATTERDD",
    "Opcode": "EVEX.128.66.0F38.W0 A0 /vsib VPSCATTERDD vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter dword values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
  },
  {
    "Mnemonic": "VPSCATTERDQ",
    "Opcode": "EVEX.128.66.0F38.W0 A0 /vsib VPSCATTERDD vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter dword values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
  },
  {
    "Mnemonic": "VPSCATTERQD",
    "Opcode": "EVEX.128.66.0F38.W0 A0 /vsib VPSCATTERDD vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter dword values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
  },
  {
    "Mnemonic": "VPSCATTERQQ",
    "Opcode": "EVEX.128.66.0F38.W0 A0 /vsib VPSCATTERDD vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter dword values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
  },
  {
    "Mnemonic": "VPSLLVD",
    "Opcode": "VEX.128.66.0F38.W0 47 /r VPSLLVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 left by amount specified in the corresponding element of xmm3/m128 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html"
  },
  {
    "Mnemonic": "VPSLLVQ",
    "Opcode": "VEX.128.66.0F38.W0 47 /r VPSLLVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 left by amount specified in the corresponding element of xmm3/m128 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html"
  },
  {
    "Mnemonic": "VPSLLVW",
    "Opcode": "VEX.128.66.0F38.W0 47 /r VPSLLVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 left by amount specified in the corresponding element of xmm3/m128 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html"
  },
  {
    "Mnemonic": "VPSRAVD",
    "Opcode": "VEX.128.66.0F38.W0 46 /r VPSRAVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 right by amount specified in the corresponding element of xmm3/m128 while shifting in sign bits.",
    "Know More": "https://www.felixcloutier.com/x86/VPSRAVW:VPSRAVD:VPSRAVQ.html"
  },
  {
    "Mnemonic": "VPSRAVQ",
    "Opcode": "VEX.128.66.0F38.W0 46 /r VPSRAVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 right by amount specified in the corresponding element of xmm3/m128 while shifting in sign bits.",
    "Know More": "https://www.felixcloutier.com/x86/VPSRAVW:VPSRAVD:VPSRAVQ.html"
  },
  {
    "Mnemonic": "VPSRAVW",
    "Opcode": "VEX.128.66.0F38.W0 46 /r VPSRAVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 right by amount specified in the corresponding element of xmm3/m128 while shifting in sign bits.",
    "Know More": "https://www.felixcloutier.com/x86/VPSRAVW:VPSRAVD:VPSRAVQ.html"
  },
  {
    "Mnemonic": "VPSRLVD",
    "Opcode": "VEX.128.66.0F38.W0 45 /r VPSRLVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 right by amount specified in the corresponding element of xmm3/m128 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html"
  },
  {
    "Mnemonic": "VPSRLVQ",
    "Opcode": "VEX.128.66.0F38.W0 45 /r VPSRLVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 right by amount specified in the corresponding element of xmm3/m128 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html"
  },
  {
    "Mnemonic": "VPSRLVW",
    "Opcode": "VEX.128.66.0F38.W0 45 /r VPSRLVD xmm1, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Shift doublewords in xmm2 right by amount specified in the corresponding element of xmm3/m128 while shifting in 0s.",
    "Know More": "https://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html"
  },
  {
    "Mnemonic": "VPTERNLOGD",
    "Opcode": "EVEX.128.66.0F3A.W0 25 /r ib VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Bitwise ternary logic taking xmm1, xmm2 and xmm3/m128/m32bcst as source operands and writing the result to xmm1 under writemask k1 with dword granularity.",
    "Know More": "https://www.felixcloutier.com/x86/VPTERNLOGD:VPTERNLOGQ.html"
  },
  {
    "Mnemonic": "VPTERNLOGQ",
    "Opcode": "EVEX.128.66.0F3A.W0 25 /r ib VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Bitwise ternary logic taking xmm1, xmm2 and xmm3/m128/m32bcst as source operands and writing the result to xmm1 under writemask k1 with dword granularity.",
    "Know More": "https://www.felixcloutier.com/x86/VPTERNLOGD:VPTERNLOGQ.html"
  },
  {
    "Mnemonic": "VPTESTMB",
    "Opcode": "EVEX.128.66.0F38.W0 26 /r VPTESTMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
  },
  {
    "Mnemonic": "VPTESTMD",
    "Opcode": "EVEX.128.66.0F38.W0 26 /r VPTESTMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
  },
  {
    "Mnemonic": "VPTESTMQ",
    "Opcode": "EVEX.128.66.0F38.W0 26 /r VPTESTMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
  },
  {
    "Mnemonic": "VPTESTMW",
    "Opcode": "EVEX.128.66.0F38.W0 26 /r VPTESTMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise AND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
  },
  {
    "Mnemonic": "VPTESTNMB",
    "Opcode": "EVEX.128.F3.0F38.W0 26 /r VPTESTNMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NAND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
  },
  {
    "Mnemonic": "VPTESTNMD",
    "Opcode": "EVEX.128.F3.0F38.W0 26 /r VPTESTNMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NAND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
  },
  {
    "Mnemonic": "VPTESTNMQ",
    "Opcode": "EVEX.128.F3.0F38.W0 26 /r VPTESTNMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NAND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
  },
  {
    "Mnemonic": "VPTESTNMW",
    "Opcode": "EVEX.128.F3.0F38.W0 26 /r VPTESTNMB k2 {k1}, xmm2, xmm3/m128",
    "64-bit Mode": "Valid",
    "Description": "Bitwise NAND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
  },
  {
    "Mnemonic": "VRANGEPD",
    "Opcode": "EVEX.128.66.0F3A.W1 50 /r ib VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Calculate two RANGE operation output value from 2 pairs of double-precision floating-point values in xmm2 and xmm3/m128/m32bcst, store the results to xmm1 under the writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRANGEPD.html"
  },
  {
    "Mnemonic": "VRANGEPS",
    "Opcode": "EVEX.128.66.0F3A.W0 50 /r ib VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Calculate four RANGE operation output value from 4 pairs of single-precision floating-point values in xmm2 and xmm3/m128/m32bcst, store the results to xmm1 under the writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRANGEPS.html"
  },
  {
    "Mnemonic": "VRANGESD",
    "Opcode": "EVEX.LIG.66.0F3A.W1 51 /r VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Calculate a RANGE operation output value from 2 double-precision floating-point values in xmm2 and xmm3/m64, store the output to xmm1 under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VRANGESD.html"
  },
  {
    "Mnemonic": "VRANGESS",
    "Opcode": "EVEX.LIG.66.0F3A.W0 51 /r VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Calculate a RANGE operation output value from 2 single-precision floating-point values in xmm2 and xmm3/m32, store the output to xmm1 under writemask.",
    "Know More": "https://www.felixcloutier.com/x86/VRANGESS.html"
  },
  {
    "Mnemonic": "VRCP14PD",
    "Opcode": "EVEX.128.66.0F38.W1 4C /r VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocals of the packed double-precision floating-point values in xmm2/m128/m64bcst and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP14PD.html"
  },
  {
    "Mnemonic": "VRCP14PS",
    "Opcode": "EVEX.128.66.0F38.W0 4C /r VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocals of the packed single-precision floating-point values in xmm2/m128/m32bcst and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP14PS.html"
  },
  {
    "Mnemonic": "VRCP14SD",
    "Opcode": "EVEX.LIG.66.0F38.W1 4D /r VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal of the scalar double-precision floating-point value in xmm3/m64 and stores the result in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP14SD.html"
  },
  {
    "Mnemonic": "VRCP14SS",
    "Opcode": "EVEX.LIG.66.0F38.W0 4D /r VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal of the scalar single-precision floating-point value in xmm3/m32 and stores the results in xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP14SS.html"
  },
  {
    "Mnemonic": "VREDUCEPD",
    "Opcode": "EVEX.128.66.0F3A.W1 56 /r ib VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Perform reduction transformation on packed double-precision floating point values in xmm2/m128/m32bcst by subtracting a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VREDUCEPD.html"
  },
  {
    "Mnemonic": "VREDUCEPS",
    "Opcode": "EVEX.128.66.0F3A.W0 56 /r ib VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Perform reduction transformation on packed single-precision floating point values in xmm2/m128/m32bcst by subtracting a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VREDUCEPS.html"
  },
  {
    "Mnemonic": "VREDUCESD",
    "Opcode": "EVEX.LIG.66.0F3A.W1 57 VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8/r",
    "64-bit Mode": "Valid",
    "Description": "Perform a reduction transformation on a scalar double-precision floating point value in xmm3/m64 by subtracting a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VREDUCESD.html"
  },
  {
    "Mnemonic": "VREDUCESS",
    "Opcode": "EVEX.LIG.66.0F3A.W0 57 /r /ib VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Perform a reduction transformation on a scalar single-precision floating point value in xmm3/m32 by subtracting a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VREDUCESS.html"
  },
  {
    "Mnemonic": "VRNDSCALEPD",
    "Opcode": "EVEX.128.66.0F3A.W1 09 /r ib VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Rounds packed double-precision floating point values in xmm2/m128/m64bcst to a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VRNDSCALEPD.html"
  },
  {
    "Mnemonic": "VRNDSCALEPS",
    "Opcode": "EVEX.128.66.0F3A.W0 08 /r ib VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Rounds packed single-precision floating point values in xmm2/m128/m32bcst to a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VRNDSCALEPS.html"
  },
  {
    "Mnemonic": "VRNDSCALESD",
    "Opcode": "EVEX.LIG.66.0F3A.W1 0B /r ib VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Rounds scalar double-precision floating-point value in xmm3/m64 to a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VRNDSCALESD.html"
  },
  {
    "Mnemonic": "VRNDSCALESS",
    "Opcode": "EVEX.LIG.66.0F3A.W0 0A /r ib VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8",
    "64-bit Mode": "Valid",
    "Description": "Rounds scalar single-precision floating-point value in xmm3/m32 to a number of fraction bits specified by the imm8 field.",
    "Know More": "https://www.felixcloutier.com/x86/VRNDSCALESS.html"
  },
  {
    "Mnemonic": "VRSQRT14PD",
    "Opcode": "EVEX.128.66.0F38.W1 4E /r VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal square roots of the packed double-precision floating-point values in xmm2/m128/m64bcst and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT14PD.html"
  },
  {
    "Mnemonic": "VRSQRT14PS",
    "Opcode": "EVEX.128.66.0F38.W0 4E /r VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal square roots of the packed single-precision floating-point values in xmm2/m128/m32bcst and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT14PS.html"
  },
  {
    "Mnemonic": "VRSQRT14SD",
    "Opcode": "EVEX.LIG.66.0F38.W1 4F /r VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal square root of the scalar double-precision floating-point value in xmm3/m64 and stores the result in the low quadword element of xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT14SD.html"
  },
  {
    "Mnemonic": "VRSQRT14SS",
    "Opcode": "EVEX.LIG.66.0F38.W0 4F /r VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal square root of the scalar single-precision floating-point value in xmm3/m32 and stores the result in the low doubleword element of xmm1 using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT14SS.html"
  },
  {
    "Mnemonic": "VSCALEFPD",
    "Opcode": "EVEX.128.66.0F38.W1 2C /r VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst",
    "64-bit Mode": "Valid",
    "Description": "Scale the packed double-precision floating-point values in xmm2 using values from xmm3/m128/m64bcst.",
    "Know More": "https://www.felixcloutier.com/x86/VSCALEFPD.html"
  },
  {
    "Mnemonic": "VSCALEFPS",
    "Opcode": "EVEX.128.66.0F38.W0 2C /r VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
    "64-bit Mode": "Valid",
    "Description": "Scale the packed single-precision floating-point values in xmm2 using values from xmm3/m128/m32bcst.",
    "Know More": "https://www.felixcloutier.com/x86/VSCALEFPS.html"
  },
  {
    "Mnemonic": "VSCALEFSD",
    "Opcode": "EVEX.LIG.66.0F38.W1 2D /r VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}",
    "64-bit Mode": "Valid",
    "Description": "Scale the scalar double-precision floating-point values in xmm2 using the value from xmm3/m64.",
    "Know More": "https://www.felixcloutier.com/x86/VSCALEFSD.html"
  },
  {
    "Mnemonic": "VSCALEFSS",
    "Opcode": "EVEX.LIG.66.0F38.W0 2D /r VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}",
    "64-bit Mode": "Valid",
    "Description": "Scale the scalar single-precision floating-point value in xmm2 using floating-point value from xmm3/m32.",
    "Know More": "https://www.felixcloutier.com/x86/VSCALEFSS.html"
  },
  {
    "Mnemonic": "VSCATTERDPD",
    "Opcode": "EVEX.128.66.0F38.W0 A2 /vsib VSCATTERDPS vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter single-precision floating-point values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
  },
  {
    "Mnemonic": "VSCATTERDPS",
    "Opcode": "EVEX.128.66.0F38.W0 A2 /vsib VSCATTERDPS vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter single-precision floating-point values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
  },
  {
    "Mnemonic": "VSCATTERQPD",
    "Opcode": "EVEX.128.66.0F38.W0 A2 /vsib VSCATTERDPS vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter single-precision floating-point values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
  },
  {
    "Mnemonic": "VSCATTERQPS",
    "Opcode": "EVEX.128.66.0F38.W0 A2 /vsib VSCATTERDPS vm32x {k1}, xmm1",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, scatter single-precision floating-point values to memory using writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
  },
  {
    "Mnemonic": "VSHUFF32x4",
    "Opcode": "EVEX.256.66.0F3A.W0 23 /r ib VSHUFF32X4 ymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle 128-bit packed single-precision floating-point values selected by imm8 from ymm2 and ymm3/m256/m32bcst and place results in ymm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
  },
  {
    "Mnemonic": "VSHUFF64x2",
    "Opcode": "EVEX.256.66.0F3A.W0 23 /r ib VSHUFF32X4 ymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle 128-bit packed single-precision floating-point values selected by imm8 from ymm2 and ymm3/m256/m32bcst and place results in ymm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
  },
  {
    "Mnemonic": "VSHUFI32x4",
    "Opcode": "EVEX.256.66.0F3A.W0 23 /r ib VSHUFF32X4 ymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle 128-bit packed single-precision floating-point values selected by imm8 from ymm2 and ymm3/m256/m32bcst and place results in ymm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
  },
  {
    "Mnemonic": "VSHUFI64x2",
    "Opcode": "EVEX.256.66.0F3A.W0 23 /r ib VSHUFF32X4 ymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8",
    "64-bit Mode": "Valid",
    "Description": "Shuffle 128-bit packed single-precision floating-point values selected by imm8 from ymm2 and ymm3/m256/m32bcst and place results in ymm1 subject to writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
  },
  {
    "Mnemonic": "VTESTPD",
    "Opcode": "VEX.128.66.0F38.W0 0E /r VTESTPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Set ZF and CF depending on sign bit AND and ANDN of packed single-precision floating-point sources.",
    "Know More": "https://www.felixcloutier.com/x86/VTESTPD:VTESTPS.html"
  },
  {
    "Mnemonic": "VTESTPS",
    "Opcode": "VEX.128.66.0F38.W0 0E /r VTESTPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Set ZF and CF depending on sign bit AND and ANDN of packed single-precision floating-point sources.",
    "Know More": "https://www.felixcloutier.com/x86/VTESTPD:VTESTPS.html"
  },
  {
    "Mnemonic": "VZEROALL",
    "Opcode": "VEX.256.0F.WIG 77 VZEROALL",
    "64-bit Mode": "Valid",
    "Description": "Zero all YMM registers.",
    "Know More": "https://www.felixcloutier.com/x86/VZEROALL.html"
  },
  {
    "Mnemonic": "VZEROUPPER",
    "Opcode": "VEX.128.0F.WIG 77 VZEROUPPER",
    "64-bit Mode": "Valid",
    "Description": "Zero upper 128 bits of all YMM registers.",
    "Know More": "https://www.felixcloutier.com/x86/VZEROUPPER.html"
  },
  {
    "Mnemonic": "WRFSBASE",
    "Opcode": "F3 0F AE /2 WRFSBASE r32",
    "64-bit Mode": "Valid",
    "Description": "Load the FS base address with the 32-bit value in the source register.",
    "Know More": "https://www.felixcloutier.com/x86/WRFSBASE:WRGSBASE.html"
  },
  {
    "Mnemonic": "WRGSBASE",
    "Opcode": "F3 0F AE /2 WRFSBASE r32",
    "64-bit Mode": "Valid",
    "Description": "Load the FS base address with the 32-bit value in the source register.",
    "Know More": "https://www.felixcloutier.com/x86/WRFSBASE:WRGSBASE.html"
  },
  {
    "Mnemonic": "WRPKRU",
    "Opcode": "NP 0F 01 EF",
    "64-bit Mode": "Valid",
    "Description": "Writes EAX into PKRU.",
    "Know More": "https://www.felixcloutier.com/x86/WRPKRU.html"
  },
  {
    "Mnemonic": "XABORT",
    "Opcode": "C6 F8 ib XABORT imm8",
    "64-bit Mode": "Valid",
    "Description": "Causes an RTM abort if in RTM execution.",
    "Know More": "https://www.felixcloutier.com/x86/XABORT.html"
  },
  {
    "Mnemonic": "XACQUIRE",
    "Opcode": "F2 XACQUIRE",
    "64-bit Mode": "Valid",
    "Description": "A hint used with an \u201cXACQUIRE-enabled\u201c instruction to start lock elision on the instruction memory operand address.",
    "Know More": "https://www.felixcloutier.com/x86/XACQUIRE:XRELEASE.html"
  },
  {
    "Mnemonic": "XBEGIN",
    "Opcode": "C7 F8 XBEGIN rel16",
    "64-bit Mode": "Valid",
    "Description": "Specifies the start of an RTM region.",
    "Know More": "https://www.felixcloutier.com/x86/XBEGIN.html"
  },
  {
    "Mnemonic": "XEND",
    "Opcode": "NP 0F 01 D5 XEND",
    "64-bit Mode": "Valid",
    "Description": "Specifies the end of an RTM code region.",
    "Know More": "https://www.felixcloutier.com/x86/XEND.html"
  },
  {
    "Mnemonic": "XORPD",
    "Opcode": "66 0F 57/r XORPD xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical XOR of packed double-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/XORPD.html"
  },
  {
    "Mnemonic": "XORPS",
    "Opcode": "NP 0F 57 /r XORPS xmm1, xmm2/m128",
    "64-bit Mode": "Valid",
    "Description": "Return the bitwise logical XOR of packed single-precision floating-point values in xmm1 and xmm2/mem.",
    "Know More": "https://www.felixcloutier.com/x86/XORPS.html"
  },
  {
    "Mnemonic": "XRELEASE",
    "Opcode": "F2 XACQUIRE",
    "64-bit Mode": "Valid",
    "Description": "A hint used with an \u201cXACQUIRE-enabled\u201c instruction to start lock elision on the instruction memory operand address.",
    "Know More": "https://www.felixcloutier.com/x86/XACQUIRE:XRELEASE.html"
  },
  {
    "Mnemonic": "XRSTOR",
    "Opcode": "NP 0F AE /5 XRSTOR mem",
    "64-bit Mode": "Valid",
    "Description": "Restore state components specified by EDX:EAX from mem.",
    "Know More": "https://www.felixcloutier.com/x86/XRSTOR.html"
  },
  {
    "Mnemonic": "XRSTORS",
    "Opcode": "NP 0F C7 /3 XRSTORS mem",
    "64-bit Mode": "Valid",
    "Description": "Restore state components specified by EDX:EAX from mem.",
    "Know More": "https://www.felixcloutier.com/x86/XRSTORS.html"
  },
  {
    "Mnemonic": "XSAVE",
    "Opcode": "NP 0F AE /4 XSAVE mem",
    "64-bit Mode": "Valid",
    "Description": "Save state components specified by EDX:EAX to mem.",
    "Know More": "https://www.felixcloutier.com/x86/XSAVE.html"
  },
  {
    "Mnemonic": "XSAVEC",
    "Opcode": "NP 0F C7 /4 XSAVEC mem",
    "64-bit Mode": "Valid",
    "Description": "Save state components specified by EDX:EAX to mem with compaction.",
    "Know More": "https://www.felixcloutier.com/x86/XSAVEC.html"
  },
  {
    "Mnemonic": "XSAVEOPT",
    "Opcode": "NP 0F AE /6 XSAVEOPT mem",
    "64-bit Mode": "Valid",
    "Description": "Save state components specified by EDX:EAX to mem, optimizing if possible.",
    "Know More": "https://www.felixcloutier.com/x86/XSAVEOPT.html"
  },
  {
    "Mnemonic": "XSAVES",
    "Opcode": "NP 0F C7 /5 XSAVES mem",
    "64-bit Mode": "Valid",
    "Description": "Save state components specified by EDX:EAX to mem with compaction, optimizing if possible.",
    "Know More": "https://www.felixcloutier.com/x86/XSAVES.html"
  },
  {
    "Mnemonic": "XTEST",
    "Opcode": "NP 0F 01 D6 XTEST",
    "64-bit Mode": "Valid",
    "Description": "Test if executing in a transactional region.",
    "Know More": "https://www.felixcloutier.com/x86/XTEST.html"
  },
  {
    "Mnemonic": "ENCLS",
    "Opcode": "NP 0F 01 CF ENCLS",
    "64-bit Mode": "Valid",
    "Description": "This instruction is used to execute privileged Intel SGX leaf functions that are used for managing and debugging the enclaves.",
    "Know More": "https://www.felixcloutier.com/x86/ENCLS.html"
  },
  {
    "Mnemonic": "ENCLS[EADD]",
    "Opcode": "EAX = 01H ENCLS[EADD]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function adds a page to an uninitialized enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EADD.html"
  },
  {
    "Mnemonic": "ENCLS[EAUG]",
    "Opcode": "EAX = 0DH ENCLS[EAUG]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function adds a page to an initialized enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EAUG.html"
  },
  {
    "Mnemonic": "ENCLS[EBLOCK]",
    "Opcode": "EAX = 09H ENCLS[EBLOCK]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function marks a page in the EPC as blocked.",
    "Know More": "https://www.felixcloutier.com/x86/EBLOCK.html"
  },
  {
    "Mnemonic": "ENCLS[ECREATE]",
    "Opcode": "EAX = 00H ENCLS[ECREATE]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function begins an enclave build by creating an SECS page in EPC.",
    "Know More": "https://www.felixcloutier.com/x86/ECREATE.html"
  },
  {
    "Mnemonic": "ENCLS[EDBGRD]",
    "Opcode": "EAX = 04H ENCLS[EDBGRD]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function reads a dword/quadword from a debug enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EDBGRD.html"
  },
  {
    "Mnemonic": "ENCLS[EDBGWR]",
    "Opcode": "EAX = 05H ENCLS[EDBGWR]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function writes a dword/quadword to a debug enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EDBGWR.html"
  },
  {
    "Mnemonic": "ENCLS[EEXTEND]",
    "Opcode": "EAX = 06H ENCLS[EEXTEND]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function measures 256 bytes of an uninitialized enclave page.",
    "Know More": "https://www.felixcloutier.com/x86/EEXTEND.html"
  },
  {
    "Mnemonic": "ENCLS[EINIT]",
    "Opcode": "EAX = 02H ENCLS[EINIT]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function initializes the enclave and makes it ready to execute enclave code.",
    "Know More": "https://www.felixcloutier.com/x86/EINIT.html"
  },
  {
    "Mnemonic": "ENCLS[ELBUC]",
    "Opcode": "EAX = 07H ENCLS[ELDB]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function loads, verifies an EPC page and marks the page as blocked.",
    "Know More": "https://www.felixcloutier.com/x86/ELDB:ELDU:ELDBC:ELBUC.html"
  },
  {
    "Mnemonic": "ENCLS[ELDBC]",
    "Opcode": "EAX = 07H ENCLS[ELDB]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function loads, verifies an EPC page and marks the page as blocked.",
    "Know More": "https://www.felixcloutier.com/x86/ELDB:ELDU:ELDBC:ELBUC.html"
  },
  {
    "Mnemonic": "ENCLS[ELDB]",
    "Opcode": "EAX = 07H ENCLS[ELDB]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function loads, verifies an EPC page and marks the page as blocked.",
    "Know More": "https://www.felixcloutier.com/x86/ELDB:ELDU:ELDBC:ELBUC.html"
  },
  {
    "Mnemonic": "ENCLS[ELDU]",
    "Opcode": "EAX = 07H ENCLS[ELDB]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function loads, verifies an EPC page and marks the page as blocked.",
    "Know More": "https://www.felixcloutier.com/x86/ELDB:ELDU:ELDBC:ELBUC.html"
  },
  {
    "Mnemonic": "ENCLS[EMODPR]",
    "Opcode": "EAX = 0EH ENCLS[EMODPR]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function restricts the access rights associated with a EPC page in an initialized enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EMODPR.html"
  },
  {
    "Mnemonic": "ENCLS[EMODT]",
    "Opcode": "EAX = 0FH ENCLS[EMODT]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function changes the type of an existing EPC page.",
    "Know More": "https://www.felixcloutier.com/x86/EMODT.html"
  },
  {
    "Mnemonic": "ENCLS[EPA]",
    "Opcode": "EAX = 0AH ENCLS[EPA]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function adds a Version Array to the EPC.",
    "Know More": "https://www.felixcloutier.com/x86/EPA.html"
  },
  {
    "Mnemonic": "ENCLS[ERDINFO]",
    "Opcode": "EAX = 10H ENCLS[ERDINFO]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function returns type and status information about an EPC page.",
    "Know More": "https://www.felixcloutier.com/x86/ERDINFO.html"
  },
  {
    "Mnemonic": "ENCLS[EREMOVE]",
    "Opcode": "EAX = 03H ENCLS[EREMOVE]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function removes a page from the EPC.",
    "Know More": "https://www.felixcloutier.com/x86/EREMOVE.html"
  },
  {
    "Mnemonic": "ENCLS[ETRACKC]",
    "Opcode": "EAX = 11H ENCLS[ETRACKC]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function activates EBLOCK checks.",
    "Know More": "https://www.felixcloutier.com/x86/ETRACKC.html"
  },
  {
    "Mnemonic": "ENCLS[ETRACK]",
    "Opcode": "EAX = 0CH ENCLS[ETRACK]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function activates EBLOCK checks.",
    "Know More": "https://www.felixcloutier.com/x86/ETRACK.html"
  },
  {
    "Mnemonic": "ENCLS[EWB]",
    "Opcode": "EAX = 0BH ENCLS[EWB]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function invalidates an EPC page and writes it out to main memory.",
    "Know More": "https://www.felixcloutier.com/x86/EWB.html"
  },
  {
    "Mnemonic": "ENCLU",
    "Opcode": "NP 0F 01 D7 ENCLU",
    "64-bit Mode": "Valid",
    "Description": "This instruction is used to execute non-privileged Intel SGX leaf functions.",
    "Know More": "https://www.felixcloutier.com/x86/ENCLU.html"
  },
  {
    "Mnemonic": "ENCLU[EACCEPTCOPY]",
    "Opcode": "EAX = 07H ENCLU[EACCEPTCOPY]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function initializes a dynamically allocated EPC page from another page in the EPC.",
    "Know More": "https://www.felixcloutier.com/x86/EACCEPTCOPY.html"
  },
  {
    "Mnemonic": "ENCLU[EACCEPT]",
    "Opcode": "EAX = 05H ENCLU[EACCEPT]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function accepts changes made by system software to an EPC page in the running enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EACCEPT.html"
  },
  {
    "Mnemonic": "ENCLU[EENTER]",
    "Opcode": "EAX = 02H ENCLU[EENTER]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function is used to enter an enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EENTER.html"
  },
  {
    "Mnemonic": "ENCLU[EGETKEY]",
    "Opcode": "EAX = 01H ENCLU[EGETKEY]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function retrieves a cryptographic key.",
    "Know More": "https://www.felixcloutier.com/x86/EGETKEY.html"
  },
  {
    "Mnemonic": "ENCLU[EMODPE]",
    "Opcode": "EAX = 06H ENCLU[EMODPE]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function extends the access rights of an existing EPC page.",
    "Know More": "https://www.felixcloutier.com/x86/EMODPE.html"
  },
  {
    "Mnemonic": "ENCLU[EREPORT]",
    "Opcode": "EAX = 00H ENCLU[EREPORT]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function creates a cryptographic report of the enclave.",
    "Know More": "https://www.felixcloutier.com/x86/EREPORT.html"
  },
  {
    "Mnemonic": "ENCLU[ERESUME]",
    "Opcode": "EAX = 03H ENCLU[ERESUME]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function is used to re-enter an enclave after an interrupt.",
    "Know More": "https://www.felixcloutier.com/x86/ERESUME.html"
  },
  {
    "Mnemonic": "ENCLV",
    "Opcode": "NP 0F 01 C0 ENCLV",
    "64-bit Mode": "Valid",
    "Description": "This instruction is used to execute privileged SGX leaf functions that are reserved for VMM use.",
    "Know More": "https://www.felixcloutier.com/x86/ENCLV.html"
  },
  {
    "Mnemonic": "ENCLV[EDECVIRTCHILD]",
    "Opcode": "EAX = 00H ENCLV[EDECVIRTCHILD]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function decrements the SECS VIRTCHILDCNT field.",
    "Know More": "https://www.felixcloutier.com/x86/EDECVIRTCHILD.html"
  },
  {
    "Mnemonic": "ENCLV[EINCVIRTCHILD]",
    "Opcode": "EAX = 01H ENCLV[EINCVIRTCHILD]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function increments the SECS VIRTCHILDCNT field.",
    "Know More": "https://www.felixcloutier.com/x86/EINCVIRTCHILD.html"
  },
  {
    "Mnemonic": "ENCLV[ESETCONTEXT]",
    "Opcode": "EAX = 02H ENCLV[ESETCONTEXT]",
    "64-bit Mode": "Valid",
    "Description": "This leaf function sets the ENCLAVECONTEXT field in SECS.",
    "Know More": "https://www.felixcloutier.com/x86/ESETCONTEXT.html"
  },
  {
    "Mnemonic": "PREFETCHWT1",
    "Opcode": "0F 0D /2 PREFETCHWT1 m8",
    "64-bit Mode": "Valid",
    "Description": "Move data from m8 closer to the processor using T1 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/PREFETCHWT1.html"
  },
  {
    "Mnemonic": "V4FMADDPS",
    "Opcode": "EVEX.512.F2.0F38.W0 9A /r V4FMADDPS zmm1{k1}{z}, zmm2+3, m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from source register block indicated by zmm2 by values from m128 and accumulate the result in zmm1.",
    "Know More": "https://www.felixcloutier.com/x86/V4FMADDPS:V4FNMADDPS.html"
  },
  {
    "Mnemonic": "V4FMADDSS",
    "Opcode": "EVEX.LLIG.F2.0F38.W0 9B /r V4FMADDSS xmm1{k1}{z}, xmm2+3, m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point values from source register block indicated by xmm2 by values from m128 and accumulate the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/V4FMADDSS:V4FNMADDSS.html"
  },
  {
    "Mnemonic": "V4FNMADDPS",
    "Opcode": "EVEX.512.F2.0F38.W0 9A /r V4FMADDPS zmm1{k1}{z}, zmm2+3, m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply packed single-precision floating-point values from source register block indicated by zmm2 by values from m128 and accumulate the result in zmm1.",
    "Know More": "https://www.felixcloutier.com/x86/V4FMADDPS:V4FNMADDPS.html"
  },
  {
    "Mnemonic": "V4FNMADDSS",
    "Opcode": "EVEX.LLIG.F2.0F38.W0 9B /r V4FMADDSS xmm1{k1}{z}, xmm2+3, m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply scalar single-precision floating-point values from source register block indicated by xmm2 by values from m128 and accumulate the result in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/V4FMADDSS:V4FNMADDSS.html"
  },
  {
    "Mnemonic": "VEXP2PD",
    "Opcode": "EVEX.512.66.0F38.W1 C8 /r VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes approximations to the exponential 2^x (with less than 2^-23 of maximum relative error) of the packed double-precision floating-point values from zmm2/m512/m64bcst and stores the floating-point result in zmm1with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VEXP2PD.html"
  },
  {
    "Mnemonic": "VEXP2PS",
    "Opcode": "EVEX.512.66.0F38.W0 C8 /r VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes approximations to the exponential 2^x (with less than 2^-23 of maximum relative error) of the packed single-precision floating-point values from zmm2/m512/m32bcst and stores the floating-point result in zmm1with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VEXP2PS.html"
  },
  {
    "Mnemonic": "VGATHERPF0DPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /1 /vsib VGATHERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T0 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF0DPS:VGATHERPF0QPS:VGATHERPF0DPD:VGATHERPF0QPD.html"
  },
  {
    "Mnemonic": "VGATHERPF0DPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /1 /vsib VGATHERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T0 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF0DPS:VGATHERPF0QPS:VGATHERPF0DPD:VGATHERPF0QPD.html"
  },
  {
    "Mnemonic": "VGATHERPF0QPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /1 /vsib VGATHERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T0 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF0DPS:VGATHERPF0QPS:VGATHERPF0DPD:VGATHERPF0QPD.html"
  },
  {
    "Mnemonic": "VGATHERPF0QPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /1 /vsib VGATHERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T0 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF0DPS:VGATHERPF0QPS:VGATHERPF0DPD:VGATHERPF0QPD.html"
  },
  {
    "Mnemonic": "VGATHERPF1DPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /2 /vsib VGATHERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T1 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF1DPS:VGATHERPF1QPS:VGATHERPF1DPD:VGATHERPF1QPD.html"
  },
  {
    "Mnemonic": "VGATHERPF1DPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /2 /vsib VGATHERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T1 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF1DPS:VGATHERPF1QPS:VGATHERPF1DPD:VGATHERPF1QPD.html"
  },
  {
    "Mnemonic": "VGATHERPF1QPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /2 /vsib VGATHERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T1 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF1DPS:VGATHERPF1QPS:VGATHERPF1DPD:VGATHERPF1QPD.html"
  },
  {
    "Mnemonic": "VGATHERPF1QPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /2 /vsib VGATHERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using opmask k1 and T1 hint.",
    "Know More": "https://www.felixcloutier.com/x86/VGATHERPF1DPS:VGATHERPF1QPS:VGATHERPF1DPD:VGATHERPF1QPD.html"
  },
  {
    "Mnemonic": "VP4DPWSSD",
    "Opcode": "EVEX.512.F2.0F38.W0 52 /r VP4DPWSSD zmm1{k1}{z}, zmm2+3, m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply signed words from source register block indicated by zmm2 by signed words from m128 and accumulate resulting signed dwords in zmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VP4DPWSSD.html"
  },
  {
    "Mnemonic": "VP4DPWSSDS",
    "Opcode": "EVEX.512.F2.0F38.W0 53 /r VP4DPWSSDS zmm1{k1}{z}, zmm2+3, m128",
    "64-bit Mode": "Valid",
    "Description": "Multiply signed words from source register block indicated by zmm2 by signed words from m128 and accumulate the resulting dword results with signed saturation in zmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VP4DPWSSDS.html"
  },
  {
    "Mnemonic": "VRCP28PD",
    "Opcode": "EVEX.512.66.0F38.W1 CA /r VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocals ( < 2^-28 relative error) of the packed double-precision floating-point values in zmm2/m512/m64bcst and stores the results in zmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP28PD.html"
  },
  {
    "Mnemonic": "VRCP28PS",
    "Opcode": "EVEX.512.66.0F38.W0 CA /r VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocals ( < 2^-28 relative error) of the packed single-precision floating-point values in zmm2/m512/m32bcst and stores the results in zmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP28PS.html"
  },
  {
    "Mnemonic": "VRCP28SD",
    "Opcode": "EVEX.LIG.66.0F38.W1 CB /r VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64 {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal ( < 2^-28 relative error) of the scalar double-precision floating-point value in xmm3/m64 and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP28SD.html"
  },
  {
    "Mnemonic": "VRCP28SS",
    "Opcode": "EVEX.LIG.66.0F38.W0 CB /r VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32 {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes the approximate reciprocal ( < 2^-28 relative error) of the scalar single-precision floating-point value in xmm3/m32 and stores the results in xmm1.",
    "Know More": "https://www.felixcloutier.com/x86/VRCP28SS.html"
  },
  {
    "Mnemonic": "VRSQRT28PD",
    "Opcode": "EVEX.512.66.0F38.W1 CC /r VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes approximations to the Reciprocal square root (<2^-28 relative error) of the packed double-precision floating-point values from zmm2/m512/m64bcst and stores result in zmm1with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT28PD.html"
  },
  {
    "Mnemonic": "VRSQRT28PS",
    "Opcode": "EVEX.512.66.0F38.W0 CC /r VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes approximations to the Reciprocal square root (<2^-28 relative error) of the packed single-precision floating-point values from zmm2/m512/m32bcst and stores result in zmm1with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT28PS.html"
  },
  {
    "Mnemonic": "VRSQRT28SD",
    "Opcode": "EVEX.LIG.66.0F38.W1 CD /r VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64 {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes approximate reciprocal square root (<2^-28 relative error) of the scalar double-precision floating-point value from xmm3/m64 and stores result in xmm1with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT28SD.html"
  },
  {
    "Mnemonic": "VRSQRT28SS",
    "Opcode": "EVEX.LIG.66.0F38.W0 CD /r VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32 {sae}",
    "64-bit Mode": "Valid",
    "Description": "Computes approximate reciprocal square root (<2^-28 relative error) of the scalar single-precision floating-point value from xmm3/m32 and stores result in xmm1with writemask k1.",
    "Know More": "https://www.felixcloutier.com/x86/VRSQRT28SS.html"
  },
  {
    "Mnemonic": "VSCATTERPF0DPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /5 /vsib VSCATTERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T0 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF0DPS:VSCATTERPF0QPS:VSCATTERPF0DPD:VSCATTERPF0QPD.html"
  },
  {
    "Mnemonic": "VSCATTERPF0DPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /5 /vsib VSCATTERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T0 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF0DPS:VSCATTERPF0QPS:VSCATTERPF0DPD:VSCATTERPF0QPD.html"
  },
  {
    "Mnemonic": "VSCATTERPF0QPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /5 /vsib VSCATTERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T0 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF0DPS:VSCATTERPF0QPS:VSCATTERPF0DPD:VSCATTERPF0QPD.html"
  },
  {
    "Mnemonic": "VSCATTERPF0QPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /5 /vsib VSCATTERPF0DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T0 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF0DPS:VSCATTERPF0QPS:VSCATTERPF0DPD:VSCATTERPF0QPD.html"
  },
  {
    "Mnemonic": "VSCATTERPF1DPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /6 /vsib VSCATTERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T1 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF1DPS:VSCATTERPF1QPS:VSCATTERPF1DPD:VSCATTERPF1QPD.html"
  },
  {
    "Mnemonic": "VSCATTERPF1DPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /6 /vsib VSCATTERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T1 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF1DPS:VSCATTERPF1QPS:VSCATTERPF1DPD:VSCATTERPF1QPD.html"
  },
  {
    "Mnemonic": "VSCATTERPF1QPD",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /6 /vsib VSCATTERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T1 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF1DPS:VSCATTERPF1QPS:VSCATTERPF1DPD:VSCATTERPF1QPD.html"
  },
  {
    "Mnemonic": "VSCATTERPF1QPS",
    "Opcode": "EVEX.512.66.0F38.W0 C6 /6 /vsib VSCATTERPF1DPS vm32z {k1}",
    "64-bit Mode": "Valid",
    "Description": "Using signed dword indices, prefetch sparse byte memory locations containing single-precision data using writemask k1 and T1 hint with intent to write.",
    "Know More": "https://www.felixcloutier.com/x86/VSCATTERPF1DPS:VSCATTERPF1QPS:VSCATTERPF1DPD:VSCATTERPF1QPD.html"
  }
]